{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1559230579337},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1559230579337},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1559230579338},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1559230579339},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1559230579338},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1559230579351},{"_id":"source/_posts/2016-05-20-kongzheng1993-DB_Exchange.md","hash":"3c31a5891c7e35152a72e36f22dcb74a12adbd25","modified":1548495467564},{"_id":"source/_posts/2016-05-20-kongzheng1993-Properties.md","hash":"e65e54089b2ce9aac22463606050b35d74d5da15","modified":1548495467565},{"_id":"source/_posts/2016-05-20-kongzheng1993-Session.md","hash":"4c1a6e7a3ac37035b50c4e9ab1deaa71927a2c23","modified":1548495467565},{"_id":"source/_posts/2016-05-20-kongzheng1993-aboutFloat.md","hash":"6ae722589d6f663395d879b11e337e2f7281d531","modified":1548495467566},{"_id":"source/_posts/2016-05-20-kongzheng1993-method_of_request&response.md","hash":"f087c46439c85eb453284c38d4aba5578571cd75","modified":1548495467566},{"_id":"source/_posts/2016-05-20-kongzheng1993-servlet.md","hash":"fe5438515d69283caa8dfaa9b82ed8dde5e69b26","modified":1548495467566},{"_id":"source/_posts/2016-05-20-kongzheng1993-请求转发与重定向.md","hash":"3c6018452c07b7820a2dc8f117411f5b9149bdb2","modified":1548495467566},{"_id":"source/_posts/2016-05-21-kongzheng1993-resume.md","hash":"a4dec033afe86b1fd0448b61d8bcdbdb5e146105","modified":1559229836641},{"_id":"source/_posts/2016-06-10-kongzheng1993-thewayofsort.md","hash":"647f82501c4ac81d6cce6b8a6a8baeeb56bbbfe2","modified":1548495467568},{"_id":"source/_posts/2016-06-10-kongzheng1993-acoderinlove.md","hash":"57f12aab788727f9cc4f17b5773f427e81324490","modified":1548495467567},{"_id":"source/_posts/2016-06-13-kongzheng1993-String_Original.md","hash":"fd64af2b4830f1abfd0c5dded154e1915d1151e1","modified":1548495467568},{"_id":"source/_posts/2016-06-13-kongzheng1993-aboutFinal.md","hash":"ac5a2b9198763390758da8f2a0d813ce1a9e20cb","modified":1548495467568},{"_id":"source/_posts/2016-06-16-kongzheng1993-synchronized.md","hash":"544693023b1f17b3e8c98805e9684c6df0b744f9","modified":1548495467570},{"_id":"source/_posts/2016-07-05-kongzheng1993-PreparedStatement&Statement.md","hash":"25e3b06bfb9673640900bb500a5ef3296c0cd3a2","modified":1548495467570},{"_id":"source/_posts/2016-07-11-kongzheng1993-ablout_try_catch.md","hash":"608d2576f4abca802cd681422cf3829d53b160e9","modified":1548495467570},{"_id":"source/_posts/2016-07-13-kongzheng1993-oracle.md","hash":"117b0d331518aa0fcc39c178c95c3fa419cdde17","modified":1548495467570},{"_id":"source/_posts/2016-07-19-kongzheng1993-MysqlToOracle.md","hash":"d273abfcaa69416cf19d4eeca1d0b3639195020b","modified":1548495467570},{"_id":"source/_posts/2016-07-21-kongzheng1993-OracleAfterChangetheNameofComputer.md","hash":"0b1a3725cf5dfb8d48f17e028af33a1cdc6b476f","modified":1559230063573},{"_id":"source/_posts/2016-07-23-kongzheng1993-about_sqlplus_sys.md","hash":"fb05a4aa69b890637be53949872cb05c75944790","modified":1548495467571},{"_id":"source/_posts/2017-03-08-kongzheng1993-JavaReflect.md","hash":"152a811c3f5a90f8713704be5d255c6cd59fa408","modified":1548495467571},{"_id":"source/_posts/2017-03-08-kongzheng1993-有关字符串的笔记.md","hash":"d3d9eff397833897eaeb9a852220d01b601bdb6f","modified":1548495467571},{"_id":"source/_posts/2017-03-09-kongzheng1993-about_comparator_and_comparable.md","hash":"a9caea434bc47a706757922693c1328507e829b4","modified":1548495467572},{"_id":"source/_posts/2017-03-28-kongzheng1993-centos7_mysql.md","hash":"b8c7bd7734d29e6dbfb8fb5bacf3d06fa57f3b71","modified":1548495467572},{"_id":"source/_posts/2018-02-01-kongzheng1993-hexo搭建githubPages.md","hash":"951822073c9e889ad0fe63186a636644d8f4b4db","modified":1559233798154},{"_id":"source/_posts/2018-02-07-kongzheng1993-suse_ftp服务配置.md","hash":"da92a607e6fbdb89d62b4702e663b61e1b7a3542","modified":1548495467573},{"_id":"source/_posts/2018-06-08-kongzheng1993-java多线程总结.md","hash":"1ba03cdf82632e05b3354ed59ef4ceb140f2820d","modified":1548495467574},{"_id":"source/_posts/2018-08-05-kongzheng1993-mysql数据库导出导入.md","hash":"3230c6b8a679e00bf0dc6f160e39831f52e7ed26","modified":1548495467575},{"_id":"source/_posts/2018-05-02-kongzheng1993-linux命令行下的ss.md","hash":"f3cc7d1a86e913d377a012d50fd3cfa28664c9f6","modified":1548495467574},{"_id":"source/_posts/2019-05-31-kongzheng1993-生产部署illegal-character.md","hash":"6694ebc07e7a4a19c10686cf587a33429dfa3183","modified":1559233645543},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1559230579339},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1559230579339},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1559230579340},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1559230579340},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1559230579340},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1559230579340},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1559230579341},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1559230579341},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1559230579341},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1559230579342},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1559230579342},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1559230579342},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1559230579349},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1559230579349},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1559230579349},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1559230579350},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1559230579350},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1559230579352},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1559230579350},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1559230579351},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1559230579343},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1559230579343},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1559230579343},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1559230579344},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1559230579344},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1559230579344},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1559230579344},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1559230579344},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1559230579345},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1559230579345},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1559230579347},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1559230579347},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1559230579348},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1559230579348},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1559230579348},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1559230579349},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1559230579352},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1559230579357},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1559230579370},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1559230579371},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1559230579371},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1559230579372},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1559230579372},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1559230579373},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1559230579373},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1559230579378},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1559230579379},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1559230579377},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1559230579380},{"_id":"source/_posts/2018-06-08-kongzheng1993-java多线程总结/20150309140927553.jpeg","hash":"391773d5b0c871dc2623b8403e9166aafa170237","modified":1548495467575},{"_id":"source/_posts/2019-05-31-kongzheng1993-生产部署illegal-character/WechatIMG1.jpeg","hash":"80ecb632806183e9ebee073854908d37ed4c98ad","modified":1559233124017},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1559230579346},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1559230579346},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1559230579346},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1559230579346},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1559230579347},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1559230579347},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1559230579357},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1559230579357},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1559230579353},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1559230579354},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1559230579353},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1559230579354},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1559230579354},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1559230579355},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1559230579355},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1559230579356},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1559230579356},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1559230579356},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1559230579360},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1559230579366},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1559230579374},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1559230579375},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1559230579375},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1559230579377},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1559230579376},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1559230579376},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1559230579359},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1559230579365},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1559230579370},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1559230579362},{"_id":"public/2016/06/10/kongzheng1993-acoderinlove/index.html","hash":"bc7b6fc7bb914bdb81fccea7af1e1b046ec2346b","modified":1559234346281},{"_id":"public/archives/2016/page/3/index.html","hash":"60e77d52d7a53434205b39d65527c08132444234","modified":1559234346260},{"_id":"public/archives/2016/05/index.html","hash":"6fd2964150006a6c981dc733b16f2447c80f6d29","modified":1559234346260},{"_id":"public/archives/2016/06/index.html","hash":"8d4ee28b09dcac187e6233b8ad870109ca1ee54f","modified":1559234346284},{"_id":"public/archives/2016/07/page/2/index.html","hash":"2b9c4a8dc2e2827207895260a7a8b69bc4ec3b54","modified":1559234346285},{"_id":"public/archives/2017/index.html","hash":"da3a21361065ac0a7298caa278120b0ee2c1d6e1","modified":1559234346271},{"_id":"public/archives/2017/03/index.html","hash":"1e477ec52671e55a6973e0f66aa047e9d3727f2c","modified":1559234346271},{"_id":"public/archives/2018/index.html","hash":"f9ce8a9a52b232e71317503934100d2ee49968c2","modified":1559234346285},{"_id":"public/archives/2018/02/index.html","hash":"9f00a3045635be7b1ca52c8ec965419a9addf6b5","modified":1559234346271},{"_id":"public/archives/2018/05/index.html","hash":"ca1758c4133cf44ff45db58c5e1c7fe4280dfe22","modified":1559234346272},{"_id":"public/archives/2018/06/index.html","hash":"4cd5a9bd9b028b373462cf3b1e8b3483b508a2b8","modified":1559234346272},{"_id":"public/archives/2018/08/index.html","hash":"e77c1de39cd847559f7f7bc12af4251e4d334239","modified":1559234346272},{"_id":"public/archives/2019/index.html","hash":"b5bbf3182cb7b304456f5db162e74b2ea95d8592","modified":1559234346272},{"_id":"public/archives/2019/05/index.html","hash":"358bf0555b7eadba7543f80c64a12e4c57f4aab4","modified":1559234346272},{"_id":"public/categories/blog/index.html","hash":"814da89ae05a1cdfca54da50208bc32d8cfd40be","modified":1559234346272},{"_id":"public/categories/suse/index.html","hash":"1dc8477a38903f6e52bc97fb9caf20afd731b132","modified":1559234346272},{"_id":"public/categories/mysql/index.html","hash":"c43359c84844dc977fde6150ada143dbb84b082c","modified":1559234346273},{"_id":"public/categories/java/index.html","hash":"a5a94eb7622719cfbceb9f9640c0e128bd3445db","modified":1559234346273},{"_id":"public/categories/blog/github/index.html","hash":"7ce23b9a5724b53f564d761f7b9687791d937c08","modified":1559234346273},{"_id":"public/categories/linux/index.html","hash":"b95affa062344fa8d81e381583e326ce2859f341","modified":1559234346273},{"_id":"public/categories/suse/server/index.html","hash":"fc2f0b7ceeb6083c640a320e0c8678a3350f9a5d","modified":1559234346273},{"_id":"public/categories/blog/github/git/index.html","hash":"540240de2d170ddc3c7d522506865024f180683c","modified":1559234346273},{"_id":"public/categories/linux/ss/index.html","hash":"c10b91df48d7eb86e882cfd8017bde6e30487803","modified":1559234346273},{"_id":"public/categories/suse/server/FTP/index.html","hash":"2b64fea40d5d973bdcb3ba8e5208357662124676","modified":1559234346274},{"_id":"public/categories/resume/index.html","hash":"25e322abadedad0d237fd335cc8dbf57e82bf1dd","modified":1559234346274},{"_id":"public/tags/float/index.html","hash":"a085af1688cb98535d833ead92ac2341486537e4","modified":1559234346274},{"_id":"public/tags/re/index.html","hash":"50d825e88af4288473d1409abf9aa1eb4f3e334e","modified":1559234346286},{"_id":"public/tags/sample-post/index.html","hash":"3fcb1c0291712589072d5866bf34b24d693cd5d9","modified":1559234346274},{"_id":"public/tags/images/index.html","hash":"2e8059473bb14c76607c9476d900760a01bd62c6","modified":1559234346274},{"_id":"public/tags/test/index.html","hash":"d25862141641c45b74ba01a5ffaad94782b7cb97","modified":1559234346274},{"_id":"public/tags/String/index.html","hash":"89c595ad49659aac744fda842ef2dc584bbb21a4","modified":1559234346275},{"_id":"public/tags/new/index.html","hash":"d24ea06f71c810cdb362fc6d40084f166eeb7356","modified":1559234346275},{"_id":"public/tags/catch，try/index.html","hash":"5bcb342dd43b6a4dfb2f08b84944b138bdc557a3","modified":1559234346275},{"_id":"public/tags/sql/index.html","hash":"1268d96c3f161e980f2f6311cd86d181cb89a4f1","modified":1559234346275},{"_id":"public/tags/select/index.html","hash":"f5e3fe72e938a55e9b22441da230f699e2e852bd","modified":1559234346275},{"_id":"public/tags/distinct/index.html","hash":"15a46438067f6ba8576a42f6b326b85b56e278f0","modified":1559234346276},{"_id":"public/tags/group-by/index.html","hash":"7a5fb572d91befe8d5e70f6344075821d6c6e661","modified":1559234346276},{"_id":"public/tags/order-by/index.html","hash":"d4a4e94cedfdab24a29a8402a721e466abaed532","modified":1559234346276},{"_id":"public/tags/oracle/index.html","hash":"6b0bc610a33cb19356127c16ed18a97fd3eee5cc","modified":1559234346276},{"_id":"public/tags/sys/index.html","hash":"3cb7fdb8ecd78d2335a4f24dd3b75e911c558288","modified":1559234346276},{"_id":"public/tags/sqlplus/index.html","hash":"97bafc3d47ad3259cc0158cca84edfa87e8f5a3f","modified":1559234346276},{"_id":"public/tags/java/index.html","hash":"d588386fd209f16bd58c9eef97f7381ec9601fe6","modified":1559234346276},{"_id":"public/tags/reflect/index.html","hash":"8d3b53fba89c751fac4749e7828f0eee75997f2f","modified":1559234346276},{"_id":"public/tags/Class/index.html","hash":"f0a22629f242ae87126cb003098b26f7100b5203","modified":1559234346277},{"_id":"public/tags/对象，Class对象/index.html","hash":"fde48d3083284e7087cbad200d2f90afaaeb96ac","modified":1559234346277},{"_id":"public/tags/github/index.html","hash":"f52a39a99086744375985f9c23e1651cfef9f0c8","modified":1559234346277},{"_id":"public/tags/hexo/index.html","hash":"8fe22b09a992121e236ba7d22bb3453280a14c4c","modified":1559234346277},{"_id":"public/tags/git/index.html","hash":"49e008f7546bb4a77cf87b45191083105885dd22","modified":1559234346277},{"_id":"public/tags/suse/index.html","hash":"c0eeda8afb4a0a25f6c1780b6313bf13ab7d0316","modified":1559234346277},{"_id":"public/tags/server/index.html","hash":"841f9226171befe57262c87814b8e7ee814ad2f9","modified":1559234346277},{"_id":"public/tags/FTP/index.html","hash":"573dd4636f66db083ee0a1b09612fbe4471b64e9","modified":1559234346277},{"_id":"public/tags/mysql/index.html","hash":"e4b6e5c7ff62d4f60627b7962d51874c56700090","modified":1559234346277},{"_id":"public/tags/备份/index.html","hash":"0ef6641ebb57be9b6ccce2e9aa9dfb00d88edc26","modified":1559234346278},{"_id":"public/tags/多线程/index.html","hash":"5bb36a80d1c0cedc984e2eef00a3ad118e593b4e","modified":1559234346278},{"_id":"public/tags/安全/index.html","hash":"6a8fb02a3188f86522c6d55943059ec295341e45","modified":1559234346278},{"_id":"public/tags/linux/index.html","hash":"3f5802ad9d3267770701cc3cfa5604a8632bc744","modified":1559234346278},{"_id":"public/tags/ss/index.html","hash":"d5b3b8aa4ef2520d8362dcc26d9cc08d78978161","modified":1559234346278},{"_id":"public/tags/console/index.html","hash":"5f6ecb55e644785d89f721136f28caa175c4ba41","modified":1559234346278},{"_id":"public/tags/resume，简历/index.html","hash":"467bc7b5cea60d02ba5a9fc615add3e2df6e8baf","modified":1559234346278},{"_id":"public/2019/05/30/kongzheng1993-resume/index.html","hash":"1c1edc6b14749068669fa3702eb821544da4a60c","modified":1559234346278},{"_id":"public/2018/08/05/kongzheng1993-mysql数据库导出导入/index.html","hash":"d617417d7875805c6bdc33cd6e1495c18f35e1f2","modified":1559234346278},{"_id":"public/2018/06/08/kongzheng1993-java多线程总结/index.html","hash":"68291e8ced03af1c1609795e9daf609ce3555ef5","modified":1559234346279},{"_id":"public/2018/08/05/kongzheng1993-生产部署illegal-character/index.html","hash":"001c1d3fbcb748648f211ff8a644617507533c47","modified":1559233965316},{"_id":"public/2018/05/02/kongzheng1993-linux命令行下的ss/index.html","hash":"960b5865d1d241ad189400841a0dc6699c866385","modified":1559234346279},{"_id":"public/2018/02/01/kongzheng1993-hexo搭建githubPages/index.html","hash":"20d903419857cec8027207d686f333da29596a02","modified":1559234346279},{"_id":"public/2018/02/01/kongzheng1993-suse_ftp服务配置/index.html","hash":"e66feb7b1bcedca30752d6079fdde4529b4f7150","modified":1559234346279},{"_id":"public/2017/03/08/kongzheng1993-JavaReflect/index.html","hash":"1531a7dd225686dddf068df905b3628994dc730b","modified":1559234346279},{"_id":"public/2016/07/28/kongzheng1993-method_of_request&response/index.html","hash":"2148dfdb6a340ea1ef33671ae3c924178c2c9753","modified":1559234346279},{"_id":"public/2016/07/28/kongzheng1993-Properties/index.html","hash":"a36ce74eb2442b9eba329be4fa6dff7979255abd","modified":1559234346279},{"_id":"public/2016/07/27/kongzheng1993-Session/index.html","hash":"8b927a4c2eff9098a6a50c3fe44f7d55c5c4ceb7","modified":1559234346280},{"_id":"public/2016/07/26/kongzheng1993-请求转发与重定向/index.html","hash":"5f9cba82f29bf5c56618e4929b201ea53bc205ea","modified":1559234346280},{"_id":"public/2016/07/26/kongzheng1993-servlet/index.html","hash":"d9b543b7e8fefdb5e95fc0f0d4e4251c0f030fa3","modified":1559234346280},{"_id":"public/2016/07/26/kongzheng1993-about_comparator_and_comparable/index.html","hash":"97b1579e5dff3e1b89d0a1dd7ab2e0cd0ea3c67d","modified":1559234346280},{"_id":"public/2016/07/26/kongzheng1993-centos7_mysql/index.html","hash":"e973b60d6571a8351e15fd69669d1134ce9f4d9e","modified":1559234346280},{"_id":"public/2016/07/22/kongzheng1993-有关字符串的笔记/index.html","hash":"9dcd1fadd1ed5b7c05c0a289fa60d17aad1f1ed4","modified":1559234346280},{"_id":"public/2016/07/20/kongzheng1993-OracleAfterChangetheNameofComputer/index.html","hash":"eceeb4d31b289da8d81f4bc780a15ed3840f1bd8","modified":1559234346280},{"_id":"public/2016/07/19/kongzheng1993-MysqlToOracle/index.html","hash":"c411a35e72b19d25b9b1e42690fa4613277c1ef3","modified":1559234346280},{"_id":"public/2016/07/11/kongzheng1993-ablout_try_catch/index.html","hash":"7543f6dbef36087c7f128c3ef05d8d3dc6dbe061","modified":1559234346281},{"_id":"public/2016/07/11/kongzheng1993-String_Original/index.html","hash":"e0e5811b0a2e2a90140f62b0bf3b8047d8c180a7","modified":1559234346280},{"_id":"public/2016/07/07/kongzheng1993-DB_Exchange/index.html","hash":"e0cea2dae9deb2e09b4326b962d84d5d59ed9e53","modified":1559234346281},{"_id":"public/2016/07/05/kongzheng1993-PreparedStatement&Statement/index.html","hash":"e41ef83fa2b91ff62030f89a67d4111b556c9e3b","modified":1559234346281},{"_id":"public/2016/06/13/kongzheng1993-aboutFinal/index.html","hash":"da2a4769ec93a71b3ba77cecd98e14b42bbea793","modified":1559234346281},{"_id":"public/2016/06/10/kongzheng1993-oracle/index.html","hash":"f53ae66875109881877986738592d98f1c689456","modified":1559234346281},{"_id":"public/2016/06/10/kongzheng1993-thewayofsort/index.html","hash":"482a33098a243e1975a52d6273dfaacdd8d8ef59","modified":1559234346281},{"_id":"public/2016/06/10/kongzheng1993-aboutFloat/index.html","hash":"def31addf996e8c794cd02420b3664319d075a5a","modified":1559234346281},{"_id":"public/2016/06/10/kongzheng1993-about_sqlplus_sys/index.html","hash":"af5e0539e6d9608a886b8161ca458e4fda7d362c","modified":1559234346282},{"_id":"public/2016/05/20/kongzheng1993-synchronized/index.html","hash":"08fe13baebf79f1aa2d77b94ffd4a61e246b35d5","modified":1559234346282},{"_id":"public/archives/page/2/index.html","hash":"1895988091e9ef99d3e9320910b4d6d8d5ff2b07","modified":1559234346282},{"_id":"public/archives/page/3/index.html","hash":"7704fbe0744389ca2c826c2d1b8d538c66606b70","modified":1559234346283},{"_id":"public/archives/2016/index.html","hash":"c83d3503ab2f7e2b3a373338b9df1cc61439ddbe","modified":1559234346283},{"_id":"public/archives/2016/page/2/index.html","hash":"d689f0bd4154cb38c3ff3af955cc7bd4d0ab65ac","modified":1559234346284},{"_id":"public/archives/index.html","hash":"426c819ee6860bf9e62fb720fddc06d1634a26d3","modified":1559234346282},{"_id":"public/archives/2016/07/index.html","hash":"085709ae821e534f359defafaba450cf37197aac","modified":1559234346285},{"_id":"public/index.html","hash":"01ae025f770a9ba06d57001e485bca61ce0bf97f","modified":1559234656023},{"_id":"public/page/2/index.html","hash":"0fb47b273e473946311d0f197342391eb3de6d05","modified":1559234656023},{"_id":"public/page/3/index.html","hash":"c54c3a8426d317df06413d57326380a350dc7db4","modified":1559234656141},{"_id":"public/tags/oop/index.html","hash":"ac0fe673dff8a4f543a9454c225b729e9ed0ac4c","modified":1559234346286},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1559233766052},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1559233766052},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1559233766052},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1559233766052},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1559233766053},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1559233766053},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1559233766053},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1559233766053},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1559233766053},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1559233766053},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1559233767165},{"_id":"public/2018/06/08/kongzheng1993-java多线程总结/20150309140927553.jpeg","hash":"391773d5b0c871dc2623b8403e9166aafa170237","modified":1559233767166},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1559233767173},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1559233767174},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1559233767174},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1559233767174},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1559233767174},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1559233767174},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1559233767174},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1559233767174},{"_id":"public/2018/08/05/kongzheng1993-生产部署illegal-character/WechatIMG1.jpeg","hash":"80ecb632806183e9ebee073854908d37ed4c98ad","modified":1559233767174},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1559233767187},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1559233767194},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1559233767229},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1559233767343},{"_id":"source/_posts/2019-05-30-kongzheng1993-生产部署illegal-character.md","hash":"5ec4e6b2cf3060b7a59b082ddb64faf06cfd696c","modified":1559234061016},{"_id":"source/_posts/2019-05-30-kongzheng1993-生产部署illegal-character/WechatIMG1.jpeg","hash":"80ecb632806183e9ebee073854908d37ed4c98ad","modified":1559233124017},{"_id":"public/2019/05/30/kongzheng1993-生产部署illegal-character/index.html","hash":"8a0228bbfcf8ee8c5be1b33ec802fc83a82c9374","modified":1559234346305},{"_id":"public/2019/05/30/kongzheng1993-生产部署illegal-character/WechatIMG1.jpeg","hash":"80ecb632806183e9ebee073854908d37ed4c98ad","modified":1559234346379},{"_id":"public/page/5/index.html","hash":"4edbcd9e99fd52dcb98ccbe9279abc9bef84d5e4","modified":1559234656153},{"_id":"public/page/4/index.html","hash":"ea63b124e026966786a4d2954494f23e15d334cb","modified":1559234656153},{"_id":"public/page/6/index.html","hash":"8253c56d48b2b264d040c4975daf43dce007237c","modified":1559234656154}],"Category":[{"name":"blog","_id":"cjwaviv7d001541xnb7lhk7go"},{"name":"suse","_id":"cjwaviv7k001d41xn4o162co8"},{"name":"mysql","_id":"cjwaviv7r001h41xn4oabnk78"},{"name":"java","_id":"cjwaviv7u001l41xnaj4bf3uv"},{"name":"github","parent":"cjwaviv7d001541xnb7lhk7go","_id":"cjwaviv7w001q41xnc9sb0pur"},{"name":"linux","_id":"cjwaviv7y001v41xnaovxeb9f"},{"name":"server","parent":"cjwaviv7k001d41xn4o162co8","_id":"cjwaviv81002041xn57lq40b6"},{"name":"git","parent":"cjwaviv7w001q41xnc9sb0pur","_id":"cjwaviv83002341xniolqmfk3"},{"name":"ss","parent":"cjwaviv7y001v41xnaovxeb9f","_id":"cjwaviv84002541xnd5exieyt"},{"name":"FTP","parent":"cjwaviv81002041xn57lq40b6","_id":"cjwaviv85002841xnb0gk6x68"},{"name":"resume","_id":"cjwaviv93003z41xns0m4qyqu"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"数据库和TXT文件内容的交换","date":"2016-07-06T16:00:00.000Z","excerpt":"","project":true,"comments":1,"_content":"\n\n\n### 前言\n\n今天做了一个简单的实验，通过这次试验来练习IO流，数据库连接，SQL等知识。下面是详细信息。\n\n### 项目结构\n\n<img src=\"/assets/img/flant.png\">\n\n\n\n\n### 代码\n\n#### bean.Content\n\n```\n\npackage bean;\npublic class Content {\n\tprivate int id;\n\tprivate String content;\n\tpublic Content(int id,String content){\n\t\tthis.id=id;\n\t\tthis.content=content;\n\t}\t\n\tpublic void setId(int id){\n\t\tthis.id=id;\n\t}\n\tpublic int getId(){\n\t\treturn id;\n\t}\n\tpublic void setContent(String content){\n\t\tthis.content=content;\n\t}\n\tpublic String getContent(){\n\t\treturn content;\n\t}\n\tpublic String toString(){\t\n\t\treturn id+\",\"+content;\t\n\t}\t\n}\n\n\n```\n\n#### bean.Student\n\n```\n\npackage bean;\n\npublic class Student {\n\tprivate int id;\n\tprivate String name;\n\tprivate String sex;\n\tprivate int age;\n\tpublic Student(int id,String name,String sex,int age){\n\t\tthis.id=id;\n\t\tthis.name=name;\n\t\tthis.sex=sex;\n\t\tthis.age=age;\n\t}\t\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setSex(String sex) {\n\t\tthis.sex = sex;\n\t}\n\tpublic String getSex() {\n\t\treturn sex;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n}\n\n\n```\n\n#### dao.ContentDao\n\n```\npackage dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport bean.Content;\nimport utils.DBUtil;\npublic class ContentDao {\t\n\tDBUtil db=new DBUtil();\n\tPreparedStatement pre=null;\n\tResultSet re=null;\t\n\tpublic List<Content> getInfoFromDB(){\n\t\tdb.getConnection();\n\t\tList<Content> list= new ArrayList<Content>();\n\t\tString sql=\"select * from content;\";\n\t\ttry {\n\t\t\tpre=db.getCon().prepareStatement(sql);\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\tre=pre.executeQuery();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\twhile(re.next()){\n\t\t\t\tlist.add(new Content(re.getInt(1),re.getString(2)));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn list;\n\t}\n}\n\n```\n\n#### dao.Student\n\n```\n\npackage dao;\n\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.sql.PreparedStatement;\nimport bean.Student;\nimport utils.DBUtil;\npublic class StudentDao {\t\n\tDBUtil db=new DBUtil();\n\tPreparedStatement pre=null;\t\n\tpublic void senttoDB(List<Student> list){\n\t\tdb.getConnection();\n\t\tfor(Student st:list){\n\t\t\tString sql=\"insert into Student values(?,?,?,?)\";\n\t\t\ttry {\t\t\t\t\n\t\t\t\tpre=db.getCon().prepareStatement(sql);\n\t\t\t\tpre.setInt(1, st.getId());\n\t\t\t\tpre.setString(2, st.getName());\n\t\t\t\tpre.setString(3, st.getSex());\n\t\t\t\tpre.setInt(4, st.getAge());\t\t\t\t\t\t\n\t\t\t\tpre.executeUpdate();\t\t\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}finally{\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tdb.closeConnection(pre,null);\n\t}\n}\n\n```\n\n#### test.Test\n\n```\n\npackage test;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport bean.Content;\nimport bean.Student;\nimport dao.ContentDao;\nimport dao.StudentDao;\n\npublic class Test {\n\tpublic static void main(String[]args){\n\t\t\n//\t\treadFromFile();\n\t\twritetoFile();\t\t\t\t\n\t}\n\tpublic static void readFromFile(){\n\t\tStudentDao stuDao=new StudentDao();\n\t\tString line;\n\t\tList<Student> list =new ArrayList<Student>();\t\t\n\t\tFile file=new File(\"files/read.txt\");\t\t\n\t\ttry {\n\t\t\tFileReader in=new FileReader(file);\n\t\t\tBufferedReader read=new BufferedReader(in);\n\t\t\twhile((line=read.readLine())!=null){\n\t\t\t\tString l[] =line.split(\",\");\n\t\t\t\t\n//\t\t\t\tSystem.out.println(line);\n\t\t\t\tlist.add(new Student(Integer.parseInt(l[0]),l[1],l[2],Integer.parseInt(l[3])));\n\t\t\t\t\n//\t\t\t\tread.readLine();\n\t\t\t}\n\t\t\tstuDao.senttoDB(list);\n\t\t\tread.close();\n\t\t\tin.close();\t\t\t\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"not found this file\");\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\t\n\t}\t\n\tpublic static void writetoFile(){\t\t\n\t\tContentDao contDao=new ContentDao();\n\t\tFile file=new File(\"files/write.txt\");\n\t\ttry {\n\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(file));\n//\t\t\tList <Content> list=new ArrayList<Content>();\n//\t\t\tlist=contDao.getInfoFromDB();\t\t\t\n\t\t\tfor(Content cont:contDao.getInfoFromDB()){\n\t\t\t\tSystem.out.print(cont.toString());\n\t\t\t\tout.write(cont.toString());\n\t\t\t\tout.newLine();\n\t\t\t\tout.flush();\n\t\t\t}\n\t\t\tout.close();\t\t\t\t\t\t\t\t\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\t\t\n\t}\n\t\n\t\n\t\n}\n\n```\n\n#### utils.DBUtil\n\n```\n\npackage utils;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class DBUtil {\t\n\tprivate Connection con=null;\t\n\tpublic Connection getCon() {\n\t\treturn con;\n\t}\t\n\tpublic void getConnection(){\t\t\t\t\t\t\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tcon=DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db_test\",\"root\",\"root\");\n//\t\t\tString sql=\"insert into \";\n//\t\t\tpre=con.prepareStatement(sql);\t\t\t\t\t\t\t\t\t\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\t\n\t}\n\tpublic void closeConnection(PreparedStatement pre,ResultSet re){\t\t\n\t\tif(re!=null){\n\t\t\ttry {\n\t\t\t\tre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(pre!=null){\n\t\t\ttry {\n\t\t\t\tpre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(con!=null){\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n### 总结\n\n通过这次试验，让我熟练了IO和数据库的一些知识，但是并不扎实，课余时间还要多练\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\" data-title=\"StudentSystem\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","source":"_posts/2016-05-20-kongzheng1993-DB_Exchange.md","raw":"---\nlayout: post\ntitle:  \"数据库和TXT文件内容的交换\"\ndate:   2016-07-07\nexcerpt: \"IO&数据库练习\"\nproject: true\ntag:\n- oop\ncomments: true\n---\n\n\n\n### 前言\n\n今天做了一个简单的实验，通过这次试验来练习IO流，数据库连接，SQL等知识。下面是详细信息。\n\n### 项目结构\n\n<img src=\"/assets/img/flant.png\">\n\n\n\n\n### 代码\n\n#### bean.Content\n\n```\n\npackage bean;\npublic class Content {\n\tprivate int id;\n\tprivate String content;\n\tpublic Content(int id,String content){\n\t\tthis.id=id;\n\t\tthis.content=content;\n\t}\t\n\tpublic void setId(int id){\n\t\tthis.id=id;\n\t}\n\tpublic int getId(){\n\t\treturn id;\n\t}\n\tpublic void setContent(String content){\n\t\tthis.content=content;\n\t}\n\tpublic String getContent(){\n\t\treturn content;\n\t}\n\tpublic String toString(){\t\n\t\treturn id+\",\"+content;\t\n\t}\t\n}\n\n\n```\n\n#### bean.Student\n\n```\n\npackage bean;\n\npublic class Student {\n\tprivate int id;\n\tprivate String name;\n\tprivate String sex;\n\tprivate int age;\n\tpublic Student(int id,String name,String sex,int age){\n\t\tthis.id=id;\n\t\tthis.name=name;\n\t\tthis.sex=sex;\n\t\tthis.age=age;\n\t}\t\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setSex(String sex) {\n\t\tthis.sex = sex;\n\t}\n\tpublic String getSex() {\n\t\treturn sex;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n}\n\n\n```\n\n#### dao.ContentDao\n\n```\npackage dao;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport bean.Content;\nimport utils.DBUtil;\npublic class ContentDao {\t\n\tDBUtil db=new DBUtil();\n\tPreparedStatement pre=null;\n\tResultSet re=null;\t\n\tpublic List<Content> getInfoFromDB(){\n\t\tdb.getConnection();\n\t\tList<Content> list= new ArrayList<Content>();\n\t\tString sql=\"select * from content;\";\n\t\ttry {\n\t\t\tpre=db.getCon().prepareStatement(sql);\n\t\t} catch (SQLException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\tre=pre.executeQuery();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\twhile(re.next()){\n\t\t\t\tlist.add(new Content(re.getInt(1),re.getString(2)));\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn list;\n\t}\n}\n\n```\n\n#### dao.Student\n\n```\n\npackage dao;\n\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.sql.PreparedStatement;\nimport bean.Student;\nimport utils.DBUtil;\npublic class StudentDao {\t\n\tDBUtil db=new DBUtil();\n\tPreparedStatement pre=null;\t\n\tpublic void senttoDB(List<Student> list){\n\t\tdb.getConnection();\n\t\tfor(Student st:list){\n\t\t\tString sql=\"insert into Student values(?,?,?,?)\";\n\t\t\ttry {\t\t\t\t\n\t\t\t\tpre=db.getCon().prepareStatement(sql);\n\t\t\t\tpre.setInt(1, st.getId());\n\t\t\t\tpre.setString(2, st.getName());\n\t\t\t\tpre.setString(3, st.getSex());\n\t\t\t\tpre.setInt(4, st.getAge());\t\t\t\t\t\t\n\t\t\t\tpre.executeUpdate();\t\t\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}finally{\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tdb.closeConnection(pre,null);\n\t}\n}\n\n```\n\n#### test.Test\n\n```\n\npackage test;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport bean.Content;\nimport bean.Student;\nimport dao.ContentDao;\nimport dao.StudentDao;\n\npublic class Test {\n\tpublic static void main(String[]args){\n\t\t\n//\t\treadFromFile();\n\t\twritetoFile();\t\t\t\t\n\t}\n\tpublic static void readFromFile(){\n\t\tStudentDao stuDao=new StudentDao();\n\t\tString line;\n\t\tList<Student> list =new ArrayList<Student>();\t\t\n\t\tFile file=new File(\"files/read.txt\");\t\t\n\t\ttry {\n\t\t\tFileReader in=new FileReader(file);\n\t\t\tBufferedReader read=new BufferedReader(in);\n\t\t\twhile((line=read.readLine())!=null){\n\t\t\t\tString l[] =line.split(\",\");\n\t\t\t\t\n//\t\t\t\tSystem.out.println(line);\n\t\t\t\tlist.add(new Student(Integer.parseInt(l[0]),l[1],l[2],Integer.parseInt(l[3])));\n\t\t\t\t\n//\t\t\t\tread.readLine();\n\t\t\t}\n\t\t\tstuDao.senttoDB(list);\n\t\t\tread.close();\n\t\t\tin.close();\t\t\t\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"not found this file\");\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\t\n\t}\t\n\tpublic static void writetoFile(){\t\t\n\t\tContentDao contDao=new ContentDao();\n\t\tFile file=new File(\"files/write.txt\");\n\t\ttry {\n\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(file));\n//\t\t\tList <Content> list=new ArrayList<Content>();\n//\t\t\tlist=contDao.getInfoFromDB();\t\t\t\n\t\t\tfor(Content cont:contDao.getInfoFromDB()){\n\t\t\t\tSystem.out.print(cont.toString());\n\t\t\t\tout.write(cont.toString());\n\t\t\t\tout.newLine();\n\t\t\t\tout.flush();\n\t\t\t}\n\t\t\tout.close();\t\t\t\t\t\t\t\t\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\t\t\n\t}\n\t\n\t\n\t\n}\n\n```\n\n#### utils.DBUtil\n\n```\n\npackage utils;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class DBUtil {\t\n\tprivate Connection con=null;\t\n\tpublic Connection getCon() {\n\t\treturn con;\n\t}\t\n\tpublic void getConnection(){\t\t\t\t\t\t\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tcon=DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db_test\",\"root\",\"root\");\n//\t\t\tString sql=\"insert into \";\n//\t\t\tpre=con.prepareStatement(sql);\t\t\t\t\t\t\t\t\t\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\t\n\t}\n\tpublic void closeConnection(PreparedStatement pre,ResultSet re){\t\t\n\t\tif(re!=null){\n\t\t\ttry {\n\t\t\t\tre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(pre!=null){\n\t\t\ttry {\n\t\t\t\tpre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(con!=null){\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n### 总结\n\n通过这次试验，让我熟练了IO和数据库的一些知识，但是并不扎实，课余时间还要多练\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\" data-title=\"StudentSystem\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","slug":"kongzheng1993-DB_Exchange","published":1,"updated":"2019-01-26T09:37:47.564Z","photos":[],"link":"","_id":"cjwaviv56000041xnpfwmqcxu","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天做了一个简单的实验，通过这次试验来练习IO流，数据库连接，SQL等知识。下面是详细信息。</p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><img src=\"/2016/07/07/kongzheng1993-DB_Exchange/assets/img/flant.png\">\n\n\n\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"bean-Content\"><a href=\"#bean-Content\" class=\"headerlink\" title=\"bean.Content\"></a>bean.Content</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package bean;</span><br><span class=\"line\">public class Content &#123;</span><br><span class=\"line\">\tprivate int id;</span><br><span class=\"line\">\tprivate String content;</span><br><span class=\"line\">\tpublic Content(int id,String content)&#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t\tthis.content=content;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void setId(int id)&#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getId()&#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setContent(String content)&#123;</span><br><span class=\"line\">\t\tthis.content=content;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getContent()&#123;</span><br><span class=\"line\">\t\treturn content;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String toString()&#123;\t</span><br><span class=\"line\">\t\treturn id+&quot;,&quot;+content;\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bean-Student\"><a href=\"#bean-Student\" class=\"headerlink\" title=\"bean.Student\"></a>bean.Student</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package bean;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Student &#123;</span><br><span class=\"line\">\tprivate int id;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate String sex;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tpublic Student(int id,String name,String sex,int age)&#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t\tthis.sex=sex;</span><br><span class=\"line\">\t\tthis.age=age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void setId(int id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setSex(String sex) &#123;</span><br><span class=\"line\">\t\tthis.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getSex() &#123;</span><br><span class=\"line\">\t\treturn sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao-ContentDao\"><a href=\"#dao-ContentDao\" class=\"headerlink\" title=\"dao.ContentDao\"></a>dao.ContentDao</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import bean.Content;</span><br><span class=\"line\">import utils.DBUtil;</span><br><span class=\"line\">public class ContentDao &#123;\t</span><br><span class=\"line\">\tDBUtil db=new DBUtil();</span><br><span class=\"line\">\tPreparedStatement pre=null;</span><br><span class=\"line\">\tResultSet re=null;\t</span><br><span class=\"line\">\tpublic List&lt;Content&gt; getInfoFromDB()&#123;</span><br><span class=\"line\">\t\tdb.getConnection();</span><br><span class=\"line\">\t\tList&lt;Content&gt; list= new ArrayList&lt;Content&gt;();</span><br><span class=\"line\">\t\tString sql=&quot;select * from content;&quot;;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tpre=db.getCon().prepareStatement(sql);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te1.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tre=pre.executeQuery();</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\twhile(re.next())&#123;</span><br><span class=\"line\">\t\t\t\tlist.add(new Content(re.getInt(1),re.getString(2)));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao-Student\"><a href=\"#dao-Student\" class=\"headerlink\" title=\"dao.Student\"></a>dao.Student</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import bean.Student;</span><br><span class=\"line\">import utils.DBUtil;</span><br><span class=\"line\">public class StudentDao &#123;\t</span><br><span class=\"line\">\tDBUtil db=new DBUtil();</span><br><span class=\"line\">\tPreparedStatement pre=null;\t</span><br><span class=\"line\">\tpublic void senttoDB(List&lt;Student&gt; list)&#123;</span><br><span class=\"line\">\t\tdb.getConnection();</span><br><span class=\"line\">\t\tfor(Student st:list)&#123;</span><br><span class=\"line\">\t\t\tString sql=&quot;insert into Student values(?,?,?,?)&quot;;</span><br><span class=\"line\">\t\t\ttry &#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpre=db.getCon().prepareStatement(sql);</span><br><span class=\"line\">\t\t\t\tpre.setInt(1, st.getId());</span><br><span class=\"line\">\t\t\t\tpre.setString(2, st.getName());</span><br><span class=\"line\">\t\t\t\tpre.setString(3, st.getSex());</span><br><span class=\"line\">\t\t\t\tpre.setInt(4, st.getAge());\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpre.executeUpdate();\t\t</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;finally&#123;\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdb.closeConnection(pre,null);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"test-Test\"><a href=\"#test-Test\" class=\"headerlink\" title=\"test.Test\"></a>test.Test</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import bean.Content;</span><br><span class=\"line\">import bean.Student;</span><br><span class=\"line\">import dao.ContentDao;</span><br><span class=\"line\">import dao.StudentDao;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">\tpublic static void main(String[]args)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\treadFromFile();</span><br><span class=\"line\">\t\twritetoFile();\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void readFromFile()&#123;</span><br><span class=\"line\">\t\tStudentDao stuDao=new StudentDao();</span><br><span class=\"line\">\t\tString line;</span><br><span class=\"line\">\t\tList&lt;Student&gt; list =new ArrayList&lt;Student&gt;();\t\t</span><br><span class=\"line\">\t\tFile file=new File(&quot;files/read.txt&quot;);\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tFileReader in=new FileReader(file);</span><br><span class=\"line\">\t\t\tBufferedReader read=new BufferedReader(in);</span><br><span class=\"line\">\t\t\twhile((line=read.readLine())!=null)&#123;</span><br><span class=\"line\">\t\t\t\tString l[] =line.split(&quot;,&quot;);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">//\t\t\t\tSystem.out.println(line);</span><br><span class=\"line\">\t\t\t\tlist.add(new Student(Integer.parseInt(l[0]),l[1],l[2],Integer.parseInt(l[3])));</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">//\t\t\t\tread.readLine();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tstuDao.senttoDB(list);</span><br><span class=\"line\">\t\t\tread.close();</span><br><span class=\"line\">\t\t\tin.close();\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;not found this file&quot;);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic static void writetoFile()&#123;\t\t</span><br><span class=\"line\">\t\tContentDao contDao=new ContentDao();</span><br><span class=\"line\">\t\tFile file=new File(&quot;files/write.txt&quot;);</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(file));</span><br><span class=\"line\">//\t\t\tList &lt;Content&gt; list=new ArrayList&lt;Content&gt;();</span><br><span class=\"line\">//\t\t\tlist=contDao.getInfoFromDB();\t\t\t</span><br><span class=\"line\">\t\t\tfor(Content cont:contDao.getInfoFromDB())&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(cont.toString());</span><br><span class=\"line\">\t\t\t\tout.write(cont.toString());</span><br><span class=\"line\">\t\t\t\tout.newLine();</span><br><span class=\"line\">\t\t\t\tout.flush();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tout.close();\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"utils-DBUtil\"><a href=\"#utils-DBUtil\" class=\"headerlink\" title=\"utils.DBUtil\"></a>utils.DBUtil</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DBUtil &#123;\t</span><br><span class=\"line\">\tprivate Connection con=null;\t</span><br><span class=\"line\">\tpublic Connection getCon() &#123;</span><br><span class=\"line\">\t\treturn con;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void getConnection()&#123;\t\t\t\t\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t\tcon=DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db_test&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class=\"line\">//\t\t\tString sql=&quot;insert into &quot;;</span><br><span class=\"line\">//\t\t\tpre=con.prepareStatement(sql);\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException | SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void closeConnection(PreparedStatement pre,ResultSet re)&#123;\t\t</span><br><span class=\"line\">\t\tif(re!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(pre!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tpre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(con!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcon.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这次试验，让我熟练了IO和数据库的一些知识，但是并不扎实，课余时间还要多练</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\" data-title=\"StudentSystem\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天做了一个简单的实验，通过这次试验来练习IO流，数据库连接，SQL等知识。下面是详细信息。</p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><img src=\"/2016/07/07/kongzheng1993-DB_Exchange/assets/img/flant.png\">\n\n\n\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"bean-Content\"><a href=\"#bean-Content\" class=\"headerlink\" title=\"bean.Content\"></a>bean.Content</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package bean;</span><br><span class=\"line\">public class Content &#123;</span><br><span class=\"line\">\tprivate int id;</span><br><span class=\"line\">\tprivate String content;</span><br><span class=\"line\">\tpublic Content(int id,String content)&#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t\tthis.content=content;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void setId(int id)&#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getId()&#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setContent(String content)&#123;</span><br><span class=\"line\">\t\tthis.content=content;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getContent()&#123;</span><br><span class=\"line\">\t\treturn content;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String toString()&#123;\t</span><br><span class=\"line\">\t\treturn id+&quot;,&quot;+content;\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bean-Student\"><a href=\"#bean-Student\" class=\"headerlink\" title=\"bean.Student\"></a>bean.Student</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package bean;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Student &#123;</span><br><span class=\"line\">\tprivate int id;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate String sex;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tpublic Student(int id,String name,String sex,int age)&#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t\tthis.sex=sex;</span><br><span class=\"line\">\t\tthis.age=age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void setId(int id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setSex(String sex) &#123;</span><br><span class=\"line\">\t\tthis.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getSex() &#123;</span><br><span class=\"line\">\t\treturn sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao-ContentDao\"><a href=\"#dao-ContentDao\" class=\"headerlink\" title=\"dao.ContentDao\"></a>dao.ContentDao</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import bean.Content;</span><br><span class=\"line\">import utils.DBUtil;</span><br><span class=\"line\">public class ContentDao &#123;\t</span><br><span class=\"line\">\tDBUtil db=new DBUtil();</span><br><span class=\"line\">\tPreparedStatement pre=null;</span><br><span class=\"line\">\tResultSet re=null;\t</span><br><span class=\"line\">\tpublic List&lt;Content&gt; getInfoFromDB()&#123;</span><br><span class=\"line\">\t\tdb.getConnection();</span><br><span class=\"line\">\t\tList&lt;Content&gt; list= new ArrayList&lt;Content&gt;();</span><br><span class=\"line\">\t\tString sql=&quot;select * from content;&quot;;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tpre=db.getCon().prepareStatement(sql);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te1.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tre=pre.executeQuery();</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\twhile(re.next())&#123;</span><br><span class=\"line\">\t\t\t\tlist.add(new Content(re.getInt(1),re.getString(2)));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dao-Student\"><a href=\"#dao-Student\" class=\"headerlink\" title=\"dao.Student\"></a>dao.Student</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import bean.Student;</span><br><span class=\"line\">import utils.DBUtil;</span><br><span class=\"line\">public class StudentDao &#123;\t</span><br><span class=\"line\">\tDBUtil db=new DBUtil();</span><br><span class=\"line\">\tPreparedStatement pre=null;\t</span><br><span class=\"line\">\tpublic void senttoDB(List&lt;Student&gt; list)&#123;</span><br><span class=\"line\">\t\tdb.getConnection();</span><br><span class=\"line\">\t\tfor(Student st:list)&#123;</span><br><span class=\"line\">\t\t\tString sql=&quot;insert into Student values(?,?,?,?)&quot;;</span><br><span class=\"line\">\t\t\ttry &#123;\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpre=db.getCon().prepareStatement(sql);</span><br><span class=\"line\">\t\t\t\tpre.setInt(1, st.getId());</span><br><span class=\"line\">\t\t\t\tpre.setString(2, st.getName());</span><br><span class=\"line\">\t\t\t\tpre.setString(3, st.getSex());</span><br><span class=\"line\">\t\t\t\tpre.setInt(4, st.getAge());\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpre.executeUpdate();\t\t</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;finally&#123;\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdb.closeConnection(pre,null);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"test-Test\"><a href=\"#test-Test\" class=\"headerlink\" title=\"test.Test\"></a>test.Test</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import bean.Content;</span><br><span class=\"line\">import bean.Student;</span><br><span class=\"line\">import dao.ContentDao;</span><br><span class=\"line\">import dao.StudentDao;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">\tpublic static void main(String[]args)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\treadFromFile();</span><br><span class=\"line\">\t\twritetoFile();\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void readFromFile()&#123;</span><br><span class=\"line\">\t\tStudentDao stuDao=new StudentDao();</span><br><span class=\"line\">\t\tString line;</span><br><span class=\"line\">\t\tList&lt;Student&gt; list =new ArrayList&lt;Student&gt;();\t\t</span><br><span class=\"line\">\t\tFile file=new File(&quot;files/read.txt&quot;);\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tFileReader in=new FileReader(file);</span><br><span class=\"line\">\t\t\tBufferedReader read=new BufferedReader(in);</span><br><span class=\"line\">\t\t\twhile((line=read.readLine())!=null)&#123;</span><br><span class=\"line\">\t\t\t\tString l[] =line.split(&quot;,&quot;);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">//\t\t\t\tSystem.out.println(line);</span><br><span class=\"line\">\t\t\t\tlist.add(new Student(Integer.parseInt(l[0]),l[1],l[2],Integer.parseInt(l[3])));</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">//\t\t\t\tread.readLine();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tstuDao.senttoDB(list);</span><br><span class=\"line\">\t\t\tread.close();</span><br><span class=\"line\">\t\t\tin.close();\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;not found this file&quot;);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic static void writetoFile()&#123;\t\t</span><br><span class=\"line\">\t\tContentDao contDao=new ContentDao();</span><br><span class=\"line\">\t\tFile file=new File(&quot;files/write.txt&quot;);</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(file));</span><br><span class=\"line\">//\t\t\tList &lt;Content&gt; list=new ArrayList&lt;Content&gt;();</span><br><span class=\"line\">//\t\t\tlist=contDao.getInfoFromDB();\t\t\t</span><br><span class=\"line\">\t\t\tfor(Content cont:contDao.getInfoFromDB())&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(cont.toString());</span><br><span class=\"line\">\t\t\t\tout.write(cont.toString());</span><br><span class=\"line\">\t\t\t\tout.newLine();</span><br><span class=\"line\">\t\t\t\tout.flush();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tout.close();\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"utils-DBUtil\"><a href=\"#utils-DBUtil\" class=\"headerlink\" title=\"utils.DBUtil\"></a>utils.DBUtil</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DBUtil &#123;\t</span><br><span class=\"line\">\tprivate Connection con=null;\t</span><br><span class=\"line\">\tpublic Connection getCon() &#123;</span><br><span class=\"line\">\t\treturn con;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void getConnection()&#123;\t\t\t\t\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t\tcon=DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db_test&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class=\"line\">//\t\t\tString sql=&quot;insert into &quot;;</span><br><span class=\"line\">//\t\t\tpre=con.prepareStatement(sql);\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException | SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void closeConnection(PreparedStatement pre,ResultSet re)&#123;\t\t</span><br><span class=\"line\">\t\tif(re!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(pre!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tpre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(con!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcon.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这次试验，让我熟练了IO和数据库的一些知识，但是并不扎实，课余时间还要多练</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\" data-title=\"StudentSystem\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-StuSystem/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"properties文件的使用","date":"2016-07-27T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## 简介\n\njava中的properties文件是一种配置文件，主要用于配置信息，文件类型为.properties，格式为文本文件，文件内容是“键=值”的格式，在properties文件中可以使用“#”来做注释，properties文件在Java编程中用到的地方很多，操作很方便。\n\n## Properties文件\n\nconfig.properties\n\n```\ndb_url=com.mysql.jdbc.Driver\ndb_mysql=jdbc:mysql\ndb_ip=127.0.0.1\ndb_port=3306\ndb_dbName=users\ndb_usn=root\ndb_pwd=root\n\n```\n\n## Properties类的方法\n\nProperites类存在Java.util中，该类继承自Hashtable\n\n1 getProperty ( String  key) ，   用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。\n2 load ( InputStream  inStream) ，从输入流中读取属性列表（键和元素对）。通过对指定的文件（比如说上面的 test.properties 文件）进行装载来获取该文\n\n件中的所有键 - 值对。以供 getProperty ( String  key) 来搜索。\n3 setProperty ( String  key, String  value) ，调用 Hashtable 的方法 put 。他通过调用基类的put方法来设置 键 - 值对。 \n4 store ( OutputStream  out, String  comments) ，   以适合使用 load 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素\n\n对）写入输出流。与 load 方法相反，该方法将键 - 值对写入到指定的文件中去。\n5 clear () ，清除所有装载的 键 - 值对。该方法在基类中提供。\n\n## 在JAVA文件中操作properties文件的方法\n\n```\n\n        pr=new Properties();\n        inStream=this.getClass().getResourceAsStream(\"config.properties\");\n        InputStream inStream=DBUtil.class.getResourceAsStream(\"config.properties\");\n        try {\n            pr.load(inStream);\n            url=pr.getProperty(\"db_url\");\n            mysql=pr.getProperty(\"db_mysql\");\n            ip=pr.getProperty(\"db_ip\");\n            port=pr.getProperty(\"db_port\");\n            dbname=pr.getProperty(\"db_dbName\");\n            dbusn=pr.getProperty(\"db_usn\");\n            dbpwd=pr.getProperty(\"db_pwd\");\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n```\n\n## 总结\n\njava的properties文件需要放到classpath下面，这样程序才能读取到，有关classpath实际上就是java类或者库的存放路径，在java工程中，properties放到class文件一块。在web应用中，最简单的方法是放到web应用的WEB- INF\\classes目录下即可，也可以放在其他文件夹下面，这时候需要在设置classpath环境变量的时候，将这个文件夹路径加到 classpath变量中，这样也也可以读取到。在此，你需要对classpath有个深刻理解，classpath绝非系统中刻意设定的那个系统环境变量，WEB-INF\\classes其实也是，java工程的class文件目录也是。\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","source":"_posts/2016-05-20-kongzheng1993-Properties.md","raw":"---\nlayout: post\ntitle:  \"properties文件的使用\"\ndate:   2016-07-28\nexcerpt: \"properties\"\ntag:\n- oop\ncomments: true\n---\n\n\n## 简介\n\njava中的properties文件是一种配置文件，主要用于配置信息，文件类型为.properties，格式为文本文件，文件内容是“键=值”的格式，在properties文件中可以使用“#”来做注释，properties文件在Java编程中用到的地方很多，操作很方便。\n\n## Properties文件\n\nconfig.properties\n\n```\ndb_url=com.mysql.jdbc.Driver\ndb_mysql=jdbc:mysql\ndb_ip=127.0.0.1\ndb_port=3306\ndb_dbName=users\ndb_usn=root\ndb_pwd=root\n\n```\n\n## Properties类的方法\n\nProperites类存在Java.util中，该类继承自Hashtable\n\n1 getProperty ( String  key) ，   用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。\n2 load ( InputStream  inStream) ，从输入流中读取属性列表（键和元素对）。通过对指定的文件（比如说上面的 test.properties 文件）进行装载来获取该文\n\n件中的所有键 - 值对。以供 getProperty ( String  key) 来搜索。\n3 setProperty ( String  key, String  value) ，调用 Hashtable 的方法 put 。他通过调用基类的put方法来设置 键 - 值对。 \n4 store ( OutputStream  out, String  comments) ，   以适合使用 load 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素\n\n对）写入输出流。与 load 方法相反，该方法将键 - 值对写入到指定的文件中去。\n5 clear () ，清除所有装载的 键 - 值对。该方法在基类中提供。\n\n## 在JAVA文件中操作properties文件的方法\n\n```\n\n        pr=new Properties();\n        inStream=this.getClass().getResourceAsStream(\"config.properties\");\n        InputStream inStream=DBUtil.class.getResourceAsStream(\"config.properties\");\n        try {\n            pr.load(inStream);\n            url=pr.getProperty(\"db_url\");\n            mysql=pr.getProperty(\"db_mysql\");\n            ip=pr.getProperty(\"db_ip\");\n            port=pr.getProperty(\"db_port\");\n            dbname=pr.getProperty(\"db_dbName\");\n            dbusn=pr.getProperty(\"db_usn\");\n            dbpwd=pr.getProperty(\"db_pwd\");\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n```\n\n## 总结\n\njava的properties文件需要放到classpath下面，这样程序才能读取到，有关classpath实际上就是java类或者库的存放路径，在java工程中，properties放到class文件一块。在web应用中，最简单的方法是放到web应用的WEB- INF\\classes目录下即可，也可以放在其他文件夹下面，这时候需要在设置classpath环境变量的时候，将这个文件夹路径加到 classpath变量中，这样也也可以读取到。在此，你需要对classpath有个深刻理解，classpath绝非系统中刻意设定的那个系统环境变量，WEB-INF\\classes其实也是，java工程的class文件目录也是。\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","slug":"kongzheng1993-Properties","published":1,"updated":"2019-01-26T09:37:47.565Z","photos":[],"link":"","_id":"cjwaviv5i000141xnt0zuo2c3","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>java中的properties文件是一种配置文件，主要用于配置信息，文件类型为.properties，格式为文本文件，文件内容是“键=值”的格式，在properties文件中可以使用“#”来做注释，properties文件在Java编程中用到的地方很多，操作很方便。</p>\n<h2 id=\"Properties文件\"><a href=\"#Properties文件\" class=\"headerlink\" title=\"Properties文件\"></a>Properties文件</h2><p>config.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db_url=com.mysql.jdbc.Driver</span><br><span class=\"line\">db_mysql=jdbc:mysql</span><br><span class=\"line\">db_ip=127.0.0.1</span><br><span class=\"line\">db_port=3306</span><br><span class=\"line\">db_dbName=users</span><br><span class=\"line\">db_usn=root</span><br><span class=\"line\">db_pwd=root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Properties类的方法\"><a href=\"#Properties类的方法\" class=\"headerlink\" title=\"Properties类的方法\"></a>Properties类的方法</h2><p>Properites类存在Java.util中，该类继承自Hashtable</p>\n<p>1 getProperty ( String  key) ，   用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。<br>2 load ( InputStream  inStream) ，从输入流中读取属性列表（键和元素对）。通过对指定的文件（比如说上面的 test.properties 文件）进行装载来获取该文</p>\n<p>件中的所有键 - 值对。以供 getProperty ( String  key) 来搜索。<br>3 setProperty ( String  key, String  value) ，调用 Hashtable 的方法 put 。他通过调用基类的put方法来设置 键 - 值对。<br>4 store ( OutputStream  out, String  comments) ，   以适合使用 load 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素</p>\n<p>对）写入输出流。与 load 方法相反，该方法将键 - 值对写入到指定的文件中去。<br>5 clear () ，清除所有装载的 键 - 值对。该方法在基类中提供。</p>\n<h2 id=\"在JAVA文件中操作properties文件的方法\"><a href=\"#在JAVA文件中操作properties文件的方法\" class=\"headerlink\" title=\"在JAVA文件中操作properties文件的方法\"></a>在JAVA文件中操作properties文件的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pr=new Properties();</span><br><span class=\"line\">inStream=this.getClass().getResourceAsStream(&quot;config.properties&quot;);</span><br><span class=\"line\">InputStream inStream=DBUtil.class.getResourceAsStream(&quot;config.properties&quot;);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    pr.load(inStream);</span><br><span class=\"line\">    url=pr.getProperty(&quot;db_url&quot;);</span><br><span class=\"line\">    mysql=pr.getProperty(&quot;db_mysql&quot;);</span><br><span class=\"line\">    ip=pr.getProperty(&quot;db_ip&quot;);</span><br><span class=\"line\">    port=pr.getProperty(&quot;db_port&quot;);</span><br><span class=\"line\">    dbname=pr.getProperty(&quot;db_dbName&quot;);</span><br><span class=\"line\">    dbusn=pr.getProperty(&quot;db_usn&quot;);</span><br><span class=\"line\">    dbpwd=pr.getProperty(&quot;db_pwd&quot;);</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">    // TODO Auto-generated catch block</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>java的properties文件需要放到classpath下面，这样程序才能读取到，有关classpath实际上就是java类或者库的存放路径，在java工程中，properties放到class文件一块。在web应用中，最简单的方法是放到web应用的WEB- INF\\classes目录下即可，也可以放在其他文件夹下面，这时候需要在设置classpath环境变量的时候，将这个文件夹路径加到 classpath变量中，这样也也可以读取到。在此，你需要对classpath有个深刻理解，classpath绝非系统中刻意设定的那个系统环境变量，WEB-INF\\classes其实也是，java工程的class文件目录也是。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>java中的properties文件是一种配置文件，主要用于配置信息，文件类型为.properties，格式为文本文件，文件内容是“键=值”的格式，在properties文件中可以使用“#”来做注释，properties文件在Java编程中用到的地方很多，操作很方便。</p>\n<h2 id=\"Properties文件\"><a href=\"#Properties文件\" class=\"headerlink\" title=\"Properties文件\"></a>Properties文件</h2><p>config.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db_url=com.mysql.jdbc.Driver</span><br><span class=\"line\">db_mysql=jdbc:mysql</span><br><span class=\"line\">db_ip=127.0.0.1</span><br><span class=\"line\">db_port=3306</span><br><span class=\"line\">db_dbName=users</span><br><span class=\"line\">db_usn=root</span><br><span class=\"line\">db_pwd=root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Properties类的方法\"><a href=\"#Properties类的方法\" class=\"headerlink\" title=\"Properties类的方法\"></a>Properties类的方法</h2><p>Properites类存在Java.util中，该类继承自Hashtable</p>\n<p>1 getProperty ( String  key) ，   用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。<br>2 load ( InputStream  inStream) ，从输入流中读取属性列表（键和元素对）。通过对指定的文件（比如说上面的 test.properties 文件）进行装载来获取该文</p>\n<p>件中的所有键 - 值对。以供 getProperty ( String  key) 来搜索。<br>3 setProperty ( String  key, String  value) ，调用 Hashtable 的方法 put 。他通过调用基类的put方法来设置 键 - 值对。<br>4 store ( OutputStream  out, String  comments) ，   以适合使用 load 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素</p>\n<p>对）写入输出流。与 load 方法相反，该方法将键 - 值对写入到指定的文件中去。<br>5 clear () ，清除所有装载的 键 - 值对。该方法在基类中提供。</p>\n<h2 id=\"在JAVA文件中操作properties文件的方法\"><a href=\"#在JAVA文件中操作properties文件的方法\" class=\"headerlink\" title=\"在JAVA文件中操作properties文件的方法\"></a>在JAVA文件中操作properties文件的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pr=new Properties();</span><br><span class=\"line\">inStream=this.getClass().getResourceAsStream(&quot;config.properties&quot;);</span><br><span class=\"line\">InputStream inStream=DBUtil.class.getResourceAsStream(&quot;config.properties&quot;);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    pr.load(inStream);</span><br><span class=\"line\">    url=pr.getProperty(&quot;db_url&quot;);</span><br><span class=\"line\">    mysql=pr.getProperty(&quot;db_mysql&quot;);</span><br><span class=\"line\">    ip=pr.getProperty(&quot;db_ip&quot;);</span><br><span class=\"line\">    port=pr.getProperty(&quot;db_port&quot;);</span><br><span class=\"line\">    dbname=pr.getProperty(&quot;db_dbName&quot;);</span><br><span class=\"line\">    dbusn=pr.getProperty(&quot;db_usn&quot;);</span><br><span class=\"line\">    dbpwd=pr.getProperty(&quot;db_pwd&quot;);</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">    // TODO Auto-generated catch block</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>java的properties文件需要放到classpath下面，这样程序才能读取到，有关classpath实际上就是java类或者库的存放路径，在java工程中，properties放到class文件一块。在web应用中，最简单的方法是放到web应用的WEB- INF\\classes目录下即可，也可以放在其他文件夹下面，这时候需要在设置classpath环境变量的时候，将这个文件夹路径加到 classpath变量中，这样也也可以读取到。在此，你需要对classpath有个深刻理解，classpath绝非系统中刻意设定的那个系统环境变量，WEB-INF\\classes其实也是，java工程的class文件目录也是。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"Session笔记","date":"2016-07-26T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n### Session简介\n\n在WEB开发中，服务器可以为每个用户浏览器创建一个会话对象（session对象），注意：一个浏览器独占一个session对象(默认情况下)。因此，在需要保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中，当用户使用浏览器访问其它程序时，其它程序可以从用户的session中取出该用户的数据，为用户服务。\n\n### Session和Cookie的区别\n\n* Cookie是把用户的数据写给用户的浏览器。\n* Session技术把用户的数据写到用户独占的session中。\n* Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象。\n\n### Session实现原理\n\nservlet中：\n\n```\n\nresponse.sendRedirect(\"pages/login.jsp\");\nString username=request.getParameter(\"usn\");\nHttpSession session=request.getSession();\n session.setAttribute(\"username\",username);\n\n```\n\n通过`HttpSession session=request.getSession();`，如果此线程中已经存在一个session，就使用这个session，如果没有，就创建一个。这个getSession()方法可以添加boolean的参数，true表示如果没有就创建一个，如果有就使用存在的那一个，false表示，直接创建一个，默认是true。session.setAttribute()来创建一个属性，这样另一端就可以get了。\n\n\nJsp中：\n\n```\n\n Object usn=session.getAttribute(\"username\");\n\n```\n\n直接使用servlet中创建的Session对象，调用getAttribute();得到servlet中set的属性。这里即便是使用getSession()方法再次得到session也是在servlet中设置的Session对象。\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-session/\" data-title=\"session\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-session/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","source":"_posts/2016-05-20-kongzheng1993-Session.md","raw":"---\nlayout: post\ntitle:  \"Session笔记\"\ndate:   2016-07-27\nexcerpt: \"Session\"\ntag:\n- oop\ncomments: true\n---\n\n### Session简介\n\n在WEB开发中，服务器可以为每个用户浏览器创建一个会话对象（session对象），注意：一个浏览器独占一个session对象(默认情况下)。因此，在需要保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中，当用户使用浏览器访问其它程序时，其它程序可以从用户的session中取出该用户的数据，为用户服务。\n\n### Session和Cookie的区别\n\n* Cookie是把用户的数据写给用户的浏览器。\n* Session技术把用户的数据写到用户独占的session中。\n* Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象。\n\n### Session实现原理\n\nservlet中：\n\n```\n\nresponse.sendRedirect(\"pages/login.jsp\");\nString username=request.getParameter(\"usn\");\nHttpSession session=request.getSession();\n session.setAttribute(\"username\",username);\n\n```\n\n通过`HttpSession session=request.getSession();`，如果此线程中已经存在一个session，就使用这个session，如果没有，就创建一个。这个getSession()方法可以添加boolean的参数，true表示如果没有就创建一个，如果有就使用存在的那一个，false表示，直接创建一个，默认是true。session.setAttribute()来创建一个属性，这样另一端就可以get了。\n\n\nJsp中：\n\n```\n\n Object usn=session.getAttribute(\"username\");\n\n```\n\n直接使用servlet中创建的Session对象，调用getAttribute();得到servlet中set的属性。这里即便是使用getSession()方法再次得到session也是在servlet中设置的Session对象。\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-session/\" data-title=\"session\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-session/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","slug":"kongzheng1993-Session","published":1,"updated":"2019-01-26T09:37:47.565Z","photos":[],"link":"","_id":"cjwaviv5q000341xny4ki07as","content":"<h3 id=\"Session简介\"><a href=\"#Session简介\" class=\"headerlink\" title=\"Session简介\"></a>Session简介</h3><p>在WEB开发中，服务器可以为每个用户浏览器创建一个会话对象（session对象），注意：一个浏览器独占一个session对象(默认情况下)。因此，在需要保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中，当用户使用浏览器访问其它程序时，其它程序可以从用户的session中取出该用户的数据，为用户服务。</p>\n<h3 id=\"Session和Cookie的区别\"><a href=\"#Session和Cookie的区别\" class=\"headerlink\" title=\"Session和Cookie的区别\"></a>Session和Cookie的区别</h3><ul>\n<li>Cookie是把用户的数据写给用户的浏览器。</li>\n<li>Session技术把用户的数据写到用户独占的session中。</li>\n<li>Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象。</li>\n</ul>\n<h3 id=\"Session实现原理\"><a href=\"#Session实现原理\" class=\"headerlink\" title=\"Session实现原理\"></a>Session实现原理</h3><p>servlet中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">response.sendRedirect(&quot;pages/login.jsp&quot;);</span><br><span class=\"line\">String username=request.getParameter(&quot;usn&quot;);</span><br><span class=\"line\">HttpSession session=request.getSession();</span><br><span class=\"line\"> session.setAttribute(&quot;username&quot;,username);</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>HttpSession session=request.getSession();</code>，如果此线程中已经存在一个session，就使用这个session，如果没有，就创建一个。这个getSession()方法可以添加boolean的参数，true表示如果没有就创建一个，如果有就使用存在的那一个，false表示，直接创建一个，默认是true。session.setAttribute()来创建一个属性，这样另一端就可以get了。</p>\n<p>Jsp中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Object usn=session.getAttribute(&quot;username&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>直接使用servlet中创建的Session对象，调用getAttribute();得到servlet中set的属性。这里即便是使用getSession()方法再次得到session也是在servlet中设置的Session对象。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-session/\" data-title=\"session\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-session/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h3 id=\"Session简介\"><a href=\"#Session简介\" class=\"headerlink\" title=\"Session简介\"></a>Session简介</h3><p>在WEB开发中，服务器可以为每个用户浏览器创建一个会话对象（session对象），注意：一个浏览器独占一个session对象(默认情况下)。因此，在需要保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中，当用户使用浏览器访问其它程序时，其它程序可以从用户的session中取出该用户的数据，为用户服务。</p>\n<h3 id=\"Session和Cookie的区别\"><a href=\"#Session和Cookie的区别\" class=\"headerlink\" title=\"Session和Cookie的区别\"></a>Session和Cookie的区别</h3><ul>\n<li>Cookie是把用户的数据写给用户的浏览器。</li>\n<li>Session技术把用户的数据写到用户独占的session中。</li>\n<li>Session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象。</li>\n</ul>\n<h3 id=\"Session实现原理\"><a href=\"#Session实现原理\" class=\"headerlink\" title=\"Session实现原理\"></a>Session实现原理</h3><p>servlet中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">response.sendRedirect(&quot;pages/login.jsp&quot;);</span><br><span class=\"line\">String username=request.getParameter(&quot;usn&quot;);</span><br><span class=\"line\">HttpSession session=request.getSession();</span><br><span class=\"line\"> session.setAttribute(&quot;username&quot;,username);</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>HttpSession session=request.getSession();</code>，如果此线程中已经存在一个session，就使用这个session，如果没有，就创建一个。这个getSession()方法可以添加boolean的参数，true表示如果没有就创建一个，如果有就使用存在的那一个，false表示，直接创建一个，默认是true。session.setAttribute()来创建一个属性，这样另一端就可以get了。</p>\n<p>Jsp中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Object usn=session.getAttribute(&quot;username&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>直接使用servlet中创建的Session对象，调用getAttribute();得到servlet中set的属性。这里即便是使用getSession()方法再次得到session也是在servlet中设置的Session对象。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-session/\" data-title=\"session\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-session/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"关于float","date":"2016-06-09T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n\n\n### Java类型转换 \n\n\nJava中不同类型之间的变量赋值时，需要先进行类型转换，才能进行赋值。Java类型转换分为自动转换和强制转换两种。 \n基本类型间的自动类型转换需要满足以下条件: \n\n(1).转换双方的类型必须兼容，例如int和long类型就是兼容的，而int和boolean就是不兼容的。 \n\n(2).只能是\"窄类型\"向\"宽类型\"转换,也就是目标类型的数据表示范围要比源类型的数据表示范围要大。 \n\n\n\n\n### 数值常量默认类型 \n  \n1.Java中整型常量数值的默认类型是int类型，如果需要声明long类型的常量 ，需要在数值加上'l'或者'L'. \n  例如:int i = 3; \n       long l = 3L; \n  \n2.Java中的浮点型常量数值默认是double类型，如果要声明一个数值为float型，则需要在数值后面加上'f'或者'F'. \n  例如:double d = 3.14; \n       float f = 3.14f; \n   \n### float f = 3.4;语句是错误的\n3.4数值常量默认情况下是double类型，如果赋值给f,那么将由double转换成float类型，由前面的知识可以知道是不能自动类型转换的，所以可以将float f = 3.4修改成: \n\n(1)float f = 3.4f; \n(2)float f = (float)3.4; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFloat/\" data-title=\"About Float\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","source":"_posts/2016-05-20-kongzheng1993-aboutFloat.md","raw":"---\nlayout: post\ntitle: \"关于float\"\ndate: 2016-06-10\nexcerpt: \"为什么面试题里float f=3.4是错的？\"\ntags: [float]\ncomments: true\n---\n\n\n\n\n### Java类型转换 \n\n\nJava中不同类型之间的变量赋值时，需要先进行类型转换，才能进行赋值。Java类型转换分为自动转换和强制转换两种。 \n基本类型间的自动类型转换需要满足以下条件: \n\n(1).转换双方的类型必须兼容，例如int和long类型就是兼容的，而int和boolean就是不兼容的。 \n\n(2).只能是\"窄类型\"向\"宽类型\"转换,也就是目标类型的数据表示范围要比源类型的数据表示范围要大。 \n\n\n\n\n### 数值常量默认类型 \n  \n1.Java中整型常量数值的默认类型是int类型，如果需要声明long类型的常量 ，需要在数值加上'l'或者'L'. \n  例如:int i = 3; \n       long l = 3L; \n  \n2.Java中的浮点型常量数值默认是double类型，如果要声明一个数值为float型，则需要在数值后面加上'f'或者'F'. \n  例如:double d = 3.14; \n       float f = 3.14f; \n   \n### float f = 3.4;语句是错误的\n3.4数值常量默认情况下是double类型，如果赋值给f,那么将由double转换成float类型，由前面的知识可以知道是不能自动类型转换的，所以可以将float f = 3.4修改成: \n\n(1)float f = 3.4f; \n(2)float f = (float)3.4; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFloat/\" data-title=\"About Float\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","slug":"kongzheng1993-aboutFloat","published":1,"updated":"2019-01-26T09:37:47.566Z","photos":[],"link":"","_id":"cjwaviv5v000441xnh78pypyr","content":"<h3 id=\"Java类型转换\"><a href=\"#Java类型转换\" class=\"headerlink\" title=\"Java类型转换\"></a>Java类型转换</h3><p>Java中不同类型之间的变量赋值时，需要先进行类型转换，才能进行赋值。Java类型转换分为自动转换和强制转换两种。<br>基本类型间的自动类型转换需要满足以下条件: </p>\n<p>(1).转换双方的类型必须兼容，例如int和long类型就是兼容的，而int和boolean就是不兼容的。 </p>\n<p>(2).只能是”窄类型”向”宽类型”转换,也就是目标类型的数据表示范围要比源类型的数据表示范围要大。 </p>\n<h3 id=\"数值常量默认类型\"><a href=\"#数值常量默认类型\" class=\"headerlink\" title=\"数值常量默认类型\"></a>数值常量默认类型</h3><p>1.Java中整型常量数值的默认类型是int类型，如果需要声明long类型的常量 ，需要在数值加上’l’或者’L’.<br>  例如:int i = 3;<br>       long l = 3L; </p>\n<p>2.Java中的浮点型常量数值默认是double类型，如果要声明一个数值为float型，则需要在数值后面加上’f’或者’F’.<br>  例如:double d = 3.14;<br>       float f = 3.14f; </p>\n<h3 id=\"float-f-3-4-语句是错误的\"><a href=\"#float-f-3-4-语句是错误的\" class=\"headerlink\" title=\"float f = 3.4;语句是错误的\"></a>float f = 3.4;语句是错误的</h3><p>3.4数值常量默认情况下是double类型，如果赋值给f,那么将由double转换成float类型，由前面的知识可以知道是不能自动类型转换的，所以可以将float f = 3.4修改成: </p>\n<p>(1)float f = 3.4f;<br>(2)float f = (float)3.4; </p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFloat/\" data-title=\"About Float\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<h3 id=\"Java类型转换\"><a href=\"#Java类型转换\" class=\"headerlink\" title=\"Java类型转换\"></a>Java类型转换</h3><p>Java中不同类型之间的变量赋值时，需要先进行类型转换，才能进行赋值。Java类型转换分为自动转换和强制转换两种。<br>基本类型间的自动类型转换需要满足以下条件: </p>\n<p>(1).转换双方的类型必须兼容，例如int和long类型就是兼容的，而int和boolean就是不兼容的。 </p>\n<p>(2).只能是”窄类型”向”宽类型”转换,也就是目标类型的数据表示范围要比源类型的数据表示范围要大。 </p>\n<h3 id=\"数值常量默认类型\"><a href=\"#数值常量默认类型\" class=\"headerlink\" title=\"数值常量默认类型\"></a>数值常量默认类型</h3><p>1.Java中整型常量数值的默认类型是int类型，如果需要声明long类型的常量 ，需要在数值加上’l’或者’L’.<br>  例如:int i = 3;<br>       long l = 3L; </p>\n<p>2.Java中的浮点型常量数值默认是double类型，如果要声明一个数值为float型，则需要在数值后面加上’f’或者’F’.<br>  例如:double d = 3.14;<br>       float f = 3.14f; </p>\n<h3 id=\"float-f-3-4-语句是错误的\"><a href=\"#float-f-3-4-语句是错误的\" class=\"headerlink\" title=\"float f = 3.4;语句是错误的\"></a>float f = 3.4;语句是错误的</h3><p>3.4数值常量默认情况下是double类型，如果赋值给f,那么将由double转换成float类型，由前面的知识可以知道是不能自动类型转换的，所以可以将float f = 3.4修改成: </p>\n<p>(1)float f = 3.4f;<br>(2)float f = (float)3.4; </p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFloat/\" data-title=\"About Float\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"request&response","date":"2016-07-27T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n#### request的方法：\n\n客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。\n\n序号/方法/说明 \n\n* object getAttribute(String name) 返回指定属性的属性值 \n* Enumeration getAttributeNames() 返回所有可用属性名的枚举 \n* String getCharacterEncoding() 返回字符编码方式 \n* int getContentLength() 返回请求体的长度（以字节数） \n* String getContentType() 得到请求体的MIME类型 \n* ServletInputStream getInputStream() 得到请求体中一行的二进制流 \n* String getParameter(String name) 返回name指定参数的参数值 \n* Enumeration getParameterNames() 返回可用参数名的枚举 \n* String[] getParameterValues(String name) 返回包含参数name的所有值的数组 \n* String getProtocol() 返回请求用的协议类型及版本号 \n* String getScheme() 返回请求用的计划名,如:http.https及ftp等 \n* String getServerName() 返回接受请求的服务器主机名 \n* int getServerPort() 返回服务器接受此请求所用的端口号 \n* BufferedReader getReader() 返回解码过了的请求体 \n* String getRemoteAddr() 返回发送此请求的客户端IP地址 \n* String getRemoteHost() 返回发送此请求的客户端主机名 \n* void setAttribute(String key,Object obj) 设置属性的属性值 \n* String getRealPath(String path) 返回一虚拟路径的真实路径\n\n#### response的方法：\n\n序号/方法/说明\n\nresponse对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。\n序号 方 法 说 明 \n* String getCharacterEncoding() 返回响应用的是何种字符编码 \n* ServletOutputStream getOutputStream() 返回响应的一个二进制输出流 \n* PrintWriter getWriter() 返回可以向客户端输出字符的一个对象 \n* void setContentLength(int len) 设置响应头长度 \n* void setContentType(String type) 设置响应的MIME类型 \n* sendRedirect(java.lang.String location) 重新定向客户端的请求\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","source":"_posts/2016-05-20-kongzheng1993-method_of_request&response.md","raw":"---\nlayout: post\ntitle:  \"request&response\"\ndate:   2016-07-28\nexcerpt: \"properties\"\ntag:\n- oop\ncomments: true\n---\n\n#### request的方法：\n\n客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。\n\n序号/方法/说明 \n\n* object getAttribute(String name) 返回指定属性的属性值 \n* Enumeration getAttributeNames() 返回所有可用属性名的枚举 \n* String getCharacterEncoding() 返回字符编码方式 \n* int getContentLength() 返回请求体的长度（以字节数） \n* String getContentType() 得到请求体的MIME类型 \n* ServletInputStream getInputStream() 得到请求体中一行的二进制流 \n* String getParameter(String name) 返回name指定参数的参数值 \n* Enumeration getParameterNames() 返回可用参数名的枚举 \n* String[] getParameterValues(String name) 返回包含参数name的所有值的数组 \n* String getProtocol() 返回请求用的协议类型及版本号 \n* String getScheme() 返回请求用的计划名,如:http.https及ftp等 \n* String getServerName() 返回接受请求的服务器主机名 \n* int getServerPort() 返回服务器接受此请求所用的端口号 \n* BufferedReader getReader() 返回解码过了的请求体 \n* String getRemoteAddr() 返回发送此请求的客户端IP地址 \n* String getRemoteHost() 返回发送此请求的客户端主机名 \n* void setAttribute(String key,Object obj) 设置属性的属性值 \n* String getRealPath(String path) 返回一虚拟路径的真实路径\n\n#### response的方法：\n\n序号/方法/说明\n\nresponse对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。\n序号 方 法 说 明 \n* String getCharacterEncoding() 返回响应用的是何种字符编码 \n* ServletOutputStream getOutputStream() 返回响应的一个二进制输出流 \n* PrintWriter getWriter() 返回可以向客户端输出字符的一个对象 \n* void setContentLength(int len) 设置响应头长度 \n* void setContentType(String type) 设置响应的MIME类型 \n* sendRedirect(java.lang.String location) 重新定向客户端的请求\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","slug":"kongzheng1993-method_of_request&response","published":1,"updated":"2019-01-26T09:37:47.566Z","photos":[],"link":"","_id":"cjwaviv5x000541xnhxj5bw76","content":"<h4 id=\"request的方法：\"><a href=\"#request的方法：\" class=\"headerlink\" title=\"request的方法：\"></a>request的方法：</h4><p>客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。</p>\n<p>序号/方法/说明 </p>\n<ul>\n<li>object getAttribute(String name) 返回指定属性的属性值 </li>\n<li>Enumeration getAttributeNames() 返回所有可用属性名的枚举 </li>\n<li>String getCharacterEncoding() 返回字符编码方式 </li>\n<li>int getContentLength() 返回请求体的长度（以字节数） </li>\n<li>String getContentType() 得到请求体的MIME类型 </li>\n<li>ServletInputStream getInputStream() 得到请求体中一行的二进制流 </li>\n<li>String getParameter(String name) 返回name指定参数的参数值 </li>\n<li>Enumeration getParameterNames() 返回可用参数名的枚举 </li>\n<li>String[] getParameterValues(String name) 返回包含参数name的所有值的数组 </li>\n<li>String getProtocol() 返回请求用的协议类型及版本号 </li>\n<li>String getScheme() 返回请求用的计划名,如:http.https及ftp等 </li>\n<li>String getServerName() 返回接受请求的服务器主机名 </li>\n<li>int getServerPort() 返回服务器接受此请求所用的端口号 </li>\n<li>BufferedReader getReader() 返回解码过了的请求体 </li>\n<li>String getRemoteAddr() 返回发送此请求的客户端IP地址 </li>\n<li>String getRemoteHost() 返回发送此请求的客户端主机名 </li>\n<li>void setAttribute(String key,Object obj) 设置属性的属性值 </li>\n<li>String getRealPath(String path) 返回一虚拟路径的真实路径</li>\n</ul>\n<h4 id=\"response的方法：\"><a href=\"#response的方法：\" class=\"headerlink\" title=\"response的方法：\"></a>response的方法：</h4><p>序号/方法/说明</p>\n<p>response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。<br>序号 方 法 说 明 </p>\n<ul>\n<li>String getCharacterEncoding() 返回响应用的是何种字符编码 </li>\n<li>ServletOutputStream getOutputStream() 返回响应的一个二进制输出流 </li>\n<li>PrintWriter getWriter() 返回可以向客户端输出字符的一个对象 </li>\n<li>void setContentLength(int len) 设置响应头长度 </li>\n<li>void setContentType(String type) 设置响应的MIME类型 </li>\n<li>sendRedirect(java.lang.String location) 重新定向客户端的请求</li>\n</ul>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h4 id=\"request的方法：\"><a href=\"#request的方法：\" class=\"headerlink\" title=\"request的方法：\"></a>request的方法：</h4><p>客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。</p>\n<p>序号/方法/说明 </p>\n<ul>\n<li>object getAttribute(String name) 返回指定属性的属性值 </li>\n<li>Enumeration getAttributeNames() 返回所有可用属性名的枚举 </li>\n<li>String getCharacterEncoding() 返回字符编码方式 </li>\n<li>int getContentLength() 返回请求体的长度（以字节数） </li>\n<li>String getContentType() 得到请求体的MIME类型 </li>\n<li>ServletInputStream getInputStream() 得到请求体中一行的二进制流 </li>\n<li>String getParameter(String name) 返回name指定参数的参数值 </li>\n<li>Enumeration getParameterNames() 返回可用参数名的枚举 </li>\n<li>String[] getParameterValues(String name) 返回包含参数name的所有值的数组 </li>\n<li>String getProtocol() 返回请求用的协议类型及版本号 </li>\n<li>String getScheme() 返回请求用的计划名,如:http.https及ftp等 </li>\n<li>String getServerName() 返回接受请求的服务器主机名 </li>\n<li>int getServerPort() 返回服务器接受此请求所用的端口号 </li>\n<li>BufferedReader getReader() 返回解码过了的请求体 </li>\n<li>String getRemoteAddr() 返回发送此请求的客户端IP地址 </li>\n<li>String getRemoteHost() 返回发送此请求的客户端主机名 </li>\n<li>void setAttribute(String key,Object obj) 设置属性的属性值 </li>\n<li>String getRealPath(String path) 返回一虚拟路径的真实路径</li>\n</ul>\n<h4 id=\"response的方法：\"><a href=\"#response的方法：\" class=\"headerlink\" title=\"response的方法：\"></a>response的方法：</h4><p>序号/方法/说明</p>\n<p>response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。<br>序号 方 法 说 明 </p>\n<ul>\n<li>String getCharacterEncoding() 返回响应用的是何种字符编码 </li>\n<li>ServletOutputStream getOutputStream() 返回响应的一个二进制输出流 </li>\n<li>PrintWriter getWriter() 返回可以向客户端输出字符的一个对象 </li>\n<li>void setContentLength(int len) 设置响应头长度 </li>\n<li>void setContentType(String type) 设置响应的MIME类型 </li>\n<li>sendRedirect(java.lang.String location) 重新定向客户端的请求</li>\n</ul>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-properties/\" data-title=\"properties\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-properties/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"Servlet笔记","date":"2016-07-25T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n## servlet 笔记\n\n\n- 注意如果是使用请求转发来切换页面，地址栏url不变，但是网页实际上已经变化，这时候要认清真正的地址，来确定本页面和其对应的servlet之间的相对位置，防止发生404错误。\n- 在jsp中使用click动作有限制。页面上显示的同步机制的数据，click是有效果的；如果是异步遍历的数据，那么触发的事件click是无法捕捉到的，需要on来获取整个标签页面的属性。而且on的作用范围比较大，同步和异步中都可以使用。\n\nclick范例：\n\n```\n\n$(\"body\").on(\"click\",\"#firstPage\",function(){\n        //alert(\"首页:\");\n        changePages(1);\n    }\n\n```\n\non范例：\n\n```\n\n$(\"body\").on(\"click\",\"#lastPage\",function(){\n        //alert(\"last页\"+totalPage);\n        changePages(totalPage);\n    }\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\" data-title=\"servlet\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","source":"_posts/2016-05-20-kongzheng1993-servlet.md","raw":"---\nlayout: post\ntitle:  \"Servlet笔记\"\ndate:   2016-07-26\nexcerpt: \"servlet\"\ntag:\n- oop\ncomments: true\n---\n\n## servlet 笔记\n\n\n- 注意如果是使用请求转发来切换页面，地址栏url不变，但是网页实际上已经变化，这时候要认清真正的地址，来确定本页面和其对应的servlet之间的相对位置，防止发生404错误。\n- 在jsp中使用click动作有限制。页面上显示的同步机制的数据，click是有效果的；如果是异步遍历的数据，那么触发的事件click是无法捕捉到的，需要on来获取整个标签页面的属性。而且on的作用范围比较大，同步和异步中都可以使用。\n\nclick范例：\n\n```\n\n$(\"body\").on(\"click\",\"#firstPage\",function(){\n        //alert(\"首页:\");\n        changePages(1);\n    }\n\n```\n\non范例：\n\n```\n\n$(\"body\").on(\"click\",\"#lastPage\",function(){\n        //alert(\"last页\"+totalPage);\n        changePages(totalPage);\n    }\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\" data-title=\"servlet\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","slug":"kongzheng1993-servlet","published":1,"updated":"2019-01-26T09:37:47.566Z","photos":[],"link":"","_id":"cjwaviv62000841xnnjo3b2u5","content":"<h2 id=\"servlet-笔记\"><a href=\"#servlet-笔记\" class=\"headerlink\" title=\"servlet 笔记\"></a>servlet 笔记</h2><ul>\n<li>注意如果是使用请求转发来切换页面，地址栏url不变，但是网页实际上已经变化，这时候要认清真正的地址，来确定本页面和其对应的servlet之间的相对位置，防止发生404错误。</li>\n<li>在jsp中使用click动作有限制。页面上显示的同步机制的数据，click是有效果的；如果是异步遍历的数据，那么触发的事件click是无法捕捉到的，需要on来获取整个标签页面的属性。而且on的作用范围比较大，同步和异步中都可以使用。</li>\n</ul>\n<p>click范例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(&quot;body&quot;).on(&quot;click&quot;,&quot;#firstPage&quot;,function()&#123;</span><br><span class=\"line\">        //alert(&quot;首页:&quot;);</span><br><span class=\"line\">        changePages(1);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>on范例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(&quot;body&quot;).on(&quot;click&quot;,&quot;#lastPage&quot;,function()&#123;</span><br><span class=\"line\">        //alert(&quot;last页&quot;+totalPage);</span><br><span class=\"line\">        changePages(totalPage);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\" data-title=\"servlet\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h2 id=\"servlet-笔记\"><a href=\"#servlet-笔记\" class=\"headerlink\" title=\"servlet 笔记\"></a>servlet 笔记</h2><ul>\n<li>注意如果是使用请求转发来切换页面，地址栏url不变，但是网页实际上已经变化，这时候要认清真正的地址，来确定本页面和其对应的servlet之间的相对位置，防止发生404错误。</li>\n<li>在jsp中使用click动作有限制。页面上显示的同步机制的数据，click是有效果的；如果是异步遍历的数据，那么触发的事件click是无法捕捉到的，需要on来获取整个标签页面的属性。而且on的作用范围比较大，同步和异步中都可以使用。</li>\n</ul>\n<p>click范例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(&quot;body&quot;).on(&quot;click&quot;,&quot;#firstPage&quot;,function()&#123;</span><br><span class=\"line\">        //alert(&quot;首页:&quot;);</span><br><span class=\"line\">        changePages(1);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>on范例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(&quot;body&quot;).on(&quot;click&quot;,&quot;#lastPage&quot;,function()&#123;</span><br><span class=\"line\">        //alert(&quot;last页&quot;+totalPage);</span><br><span class=\"line\">        changePages(totalPage);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\" data-title=\"servlet\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-servlet/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"请求转发和重定向","date":"2016-07-25T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n### 重定向与转发的区别：\n\n1.重定向访问服务器两次，转发只访问服务器一次。\n2.重定向可以看见目标页面的URL，转发只能看见第一次访问的页面URL，以后的工作都是有服务器来做的。\n3.重定向跳转后必须加上return，要不然页面虽然跳转了，但是还会执行跳转后面的语句，转发是执行了跳转页面，下面的代码就不会在执行了。\n4.在request级别使用信息共享，使用重定向必然出错\n5.还有一个大的区别就是，重定向可以访问自己web应用以外的资源\n\n\n### 一、调用方式 \n\n我们知道，在servlet中调用转发、重定向的语句如下： \nrequest.getRequestDispatcher(\"new.jsp\").forward(request, response);//转发到new.jsp \nresponse.sendRedirect(\"new.jsp\");//重定向到new.jsp \n\n在jsp页面中你也会看到通过下面的方式实现转发： \n<jsp:forward page=\"apage.jsp\" /> \n\n当然也可以在jsp页面中实现重定向： \n<%response.sendRedirect(\"new.jsp\");//重定向到new.jsp%> \n\n### 二、本质区别 \n\n#### 解释一　　 \n\n一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程： \n\n转发过程：客户浏览器发送http请求----》web服务器接受此请求--》调用内部的一个方法在容器内部完成请求处理和转发动作----》将目标资源发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。 \n\n重定向过程：客户浏览器发送http请求----》web服务器接受后发送302状态码响应及对应新的location给客户浏览器--》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址----》服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。 \n\n#### 解释二 \n重定向，其实是两次request, \n第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。 \n\n\n\n请求转发是服务器内部把对一个request/response的处理权，移交给另外一个 \n对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。 \n\n \n\n#### 解释三 \n假设你去办理某个执照， \n\n重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。 \n\n转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。 \n\n### 三、请求重定向与请求转发的比较 \n\n尽管HttpServletResponse.sendRedirect方法和RequestDispatcher.forward方法都可以让浏览器获得另外一个URL所指向的资源，但两者的内部运行机制有着很大的区别。下面是HttpServletResponse.sendRedirect方法实现的请求重定向与RequestDispatcher.forward方法实现的请求转发的总结比较： \n\n（1）RequestDispatcher.forward方法只能将请求转发给同一个WEB应用中的组件；而HttpServletResponse.sendRedirect 方法不仅可以重定向到当前应用程序中的其他资源，还可以重定向到同一个站点上的其他应用程序中的资源，甚至是使用绝对URL重定向到其他站点的资源。如果传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录；如果创建RequestDispatcher对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。 \n\n（2）调用HttpServletResponse.sendRedirect方法重定向的访问过程结束后，浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；而调用RequestDispatcher.forward 方法的请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。 \n\n（3）HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，响应的结果就是告诉浏览器去重新发出对另外一个URL的 访问请求，这个过程好比有个绰号叫“浏览器”的人写信找张三借钱，张三回信说没有钱，让“浏览器”去找李四借，并将李四现在的通信地址告诉给了“浏览器”。于是，“浏览器”又按张三提供通信地址给李四写信借钱，李四收到信后就把钱汇给了“浏览器”。可见，“浏览器”一共发出了两封信和收到了两次回复， “浏览器”也知道他借到的钱出自李四之手。RequestDispatcher.forward方 法在服务器端内部将请求转发给另外一个资源，浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。这个过程好比绰号叫“浏览器”的人写信找张三借钱，张三没有钱，于是张三找李四借了一些钱，甚至还可以加上自己的一些钱，然后再将这些钱汇给了“浏览器”。可见，“浏览器”只发 出了一封信和收到了一次回复，他只知道从张三那里借到了钱，并不知道有一部分钱出自李四之手。 \n\n（4）RequestDispatcher.forward方法的调用者与被调用者之间共享相同的request对象和response对象，它们属于同一个访问请求和响应过程；而HttpServletResponse.sendRedirect方法调用者与被调用者使用各自的request对象和response对象，它们属于两个独立的访问请求和响应过程。对于同一个WEB应用程序的内部资源之间的跳转，特别是跳转之前要对请求进行一些前期预处理，并要使用HttpServletRequest.setAttribute方法传递预处理结果，那就应该使用RequestDispatcher.forward方法。不同WEB应用程序之间的重定向，特别是要重定向到另外一个WEB站点上的资源的情况，都应该使用HttpServletResponse.sendRedirect方法。 \n\n（5）无论是RequestDispatcher.forward方法，还是HttpServletResponse.sendRedirect方法，在调用它们之前，都不能有内容已经被实际输出到了客户端。如果缓冲区中已经有了一些内容，这些内容将被从缓冲区中清除。\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\" data-title=\"requestdispatcherandsendredirect\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","source":"_posts/2016-05-20-kongzheng1993-请求转发与重定向.md","raw":"---\nlayout: post\ntitle: \"请求转发和重定向\"\ndate: 2016-07-26\nexcerpt: \"getRequestDispatcher,forword,sendRedirect\"\ntags: [re]\ncomments: true\n---\n\n### 重定向与转发的区别：\n\n1.重定向访问服务器两次，转发只访问服务器一次。\n2.重定向可以看见目标页面的URL，转发只能看见第一次访问的页面URL，以后的工作都是有服务器来做的。\n3.重定向跳转后必须加上return，要不然页面虽然跳转了，但是还会执行跳转后面的语句，转发是执行了跳转页面，下面的代码就不会在执行了。\n4.在request级别使用信息共享，使用重定向必然出错\n5.还有一个大的区别就是，重定向可以访问自己web应用以外的资源\n\n\n### 一、调用方式 \n\n我们知道，在servlet中调用转发、重定向的语句如下： \nrequest.getRequestDispatcher(\"new.jsp\").forward(request, response);//转发到new.jsp \nresponse.sendRedirect(\"new.jsp\");//重定向到new.jsp \n\n在jsp页面中你也会看到通过下面的方式实现转发： \n<jsp:forward page=\"apage.jsp\" /> \n\n当然也可以在jsp页面中实现重定向： \n<%response.sendRedirect(\"new.jsp\");//重定向到new.jsp%> \n\n### 二、本质区别 \n\n#### 解释一　　 \n\n一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程： \n\n转发过程：客户浏览器发送http请求----》web服务器接受此请求--》调用内部的一个方法在容器内部完成请求处理和转发动作----》将目标资源发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。 \n\n重定向过程：客户浏览器发送http请求----》web服务器接受后发送302状态码响应及对应新的location给客户浏览器--》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址----》服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。 \n\n#### 解释二 \n重定向，其实是两次request, \n第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。 \n\n\n\n请求转发是服务器内部把对一个request/response的处理权，移交给另外一个 \n对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。 \n\n \n\n#### 解释三 \n假设你去办理某个执照， \n\n重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。 \n\n转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。 \n\n### 三、请求重定向与请求转发的比较 \n\n尽管HttpServletResponse.sendRedirect方法和RequestDispatcher.forward方法都可以让浏览器获得另外一个URL所指向的资源，但两者的内部运行机制有着很大的区别。下面是HttpServletResponse.sendRedirect方法实现的请求重定向与RequestDispatcher.forward方法实现的请求转发的总结比较： \n\n（1）RequestDispatcher.forward方法只能将请求转发给同一个WEB应用中的组件；而HttpServletResponse.sendRedirect 方法不仅可以重定向到当前应用程序中的其他资源，还可以重定向到同一个站点上的其他应用程序中的资源，甚至是使用绝对URL重定向到其他站点的资源。如果传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录；如果创建RequestDispatcher对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。 \n\n（2）调用HttpServletResponse.sendRedirect方法重定向的访问过程结束后，浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；而调用RequestDispatcher.forward 方法的请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。 \n\n（3）HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，响应的结果就是告诉浏览器去重新发出对另外一个URL的 访问请求，这个过程好比有个绰号叫“浏览器”的人写信找张三借钱，张三回信说没有钱，让“浏览器”去找李四借，并将李四现在的通信地址告诉给了“浏览器”。于是，“浏览器”又按张三提供通信地址给李四写信借钱，李四收到信后就把钱汇给了“浏览器”。可见，“浏览器”一共发出了两封信和收到了两次回复， “浏览器”也知道他借到的钱出自李四之手。RequestDispatcher.forward方 法在服务器端内部将请求转发给另外一个资源，浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。这个过程好比绰号叫“浏览器”的人写信找张三借钱，张三没有钱，于是张三找李四借了一些钱，甚至还可以加上自己的一些钱，然后再将这些钱汇给了“浏览器”。可见，“浏览器”只发 出了一封信和收到了一次回复，他只知道从张三那里借到了钱，并不知道有一部分钱出自李四之手。 \n\n（4）RequestDispatcher.forward方法的调用者与被调用者之间共享相同的request对象和response对象，它们属于同一个访问请求和响应过程；而HttpServletResponse.sendRedirect方法调用者与被调用者使用各自的request对象和response对象，它们属于两个独立的访问请求和响应过程。对于同一个WEB应用程序的内部资源之间的跳转，特别是跳转之前要对请求进行一些前期预处理，并要使用HttpServletRequest.setAttribute方法传递预处理结果，那就应该使用RequestDispatcher.forward方法。不同WEB应用程序之间的重定向，特别是要重定向到另外一个WEB站点上的资源的情况，都应该使用HttpServletResponse.sendRedirect方法。 \n\n（5）无论是RequestDispatcher.forward方法，还是HttpServletResponse.sendRedirect方法，在调用它们之前，都不能有内容已经被实际输出到了客户端。如果缓冲区中已经有了一些内容，这些内容将被从缓冲区中清除。\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\" data-title=\"requestdispatcherandsendredirect\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","slug":"kongzheng1993-请求转发与重定向","published":1,"updated":"2019-01-26T09:37:47.566Z","photos":[],"link":"","_id":"cjwaviv64000a41xnzgi01kut","content":"<h3 id=\"重定向与转发的区别：\"><a href=\"#重定向与转发的区别：\" class=\"headerlink\" title=\"重定向与转发的区别：\"></a>重定向与转发的区别：</h3><p>1.重定向访问服务器两次，转发只访问服务器一次。<br>2.重定向可以看见目标页面的URL，转发只能看见第一次访问的页面URL，以后的工作都是有服务器来做的。<br>3.重定向跳转后必须加上return，要不然页面虽然跳转了，但是还会执行跳转后面的语句，转发是执行了跳转页面，下面的代码就不会在执行了。<br>4.在request级别使用信息共享，使用重定向必然出错<br>5.还有一个大的区别就是，重定向可以访问自己web应用以外的资源</p>\n<h3 id=\"一、调用方式\"><a href=\"#一、调用方式\" class=\"headerlink\" title=\"一、调用方式\"></a>一、调用方式</h3><p>我们知道，在servlet中调用转发、重定向的语句如下：<br>request.getRequestDispatcher(“new.jsp”).forward(request, response);//转发到new.jsp<br>response.sendRedirect(“new.jsp”);//重定向到new.jsp </p>\n<p>在jsp页面中你也会看到通过下面的方式实现转发：<br>&lt;jsp:forward page=”apage.jsp” /&gt; </p>\n<p>当然也可以在jsp页面中实现重定向：<br>&lt;%response.sendRedirect(“new.jsp”);//重定向到new.jsp%&gt; </p>\n<h3 id=\"二、本质区别\"><a href=\"#二、本质区别\" class=\"headerlink\" title=\"二、本质区别\"></a>二、本质区别</h3><h4 id=\"解释一\"><a href=\"#解释一\" class=\"headerlink\" title=\"解释一　　\"></a>解释一　　</h4><p>一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程： </p>\n<p>转发过程：客户浏览器发送http请求—-》web服务器接受此请求–》调用内部的一个方法在容器内部完成请求处理和转发动作—-》将目标资源发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。 </p>\n<p>重定向过程：客户浏览器发送http请求—-》web服务器接受后发送302状态码响应及对应新的location给客户浏览器–》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址—-》服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。 </p>\n<h4 id=\"解释二\"><a href=\"#解释二\" class=\"headerlink\" title=\"解释二\"></a>解释二</h4><p>重定向，其实是两次request,<br>第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。 </p>\n<p>请求转发是服务器内部把对一个request/response的处理权，移交给另外一个<br>对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。 </p>\n<h4 id=\"解释三\"><a href=\"#解释三\" class=\"headerlink\" title=\"解释三\"></a>解释三</h4><p>假设你去办理某个执照， </p>\n<p>重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。 </p>\n<p>转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。 </p>\n<h3 id=\"三、请求重定向与请求转发的比较\"><a href=\"#三、请求重定向与请求转发的比较\" class=\"headerlink\" title=\"三、请求重定向与请求转发的比较\"></a>三、请求重定向与请求转发的比较</h3><p>尽管HttpServletResponse.sendRedirect方法和RequestDispatcher.forward方法都可以让浏览器获得另外一个URL所指向的资源，但两者的内部运行机制有着很大的区别。下面是HttpServletResponse.sendRedirect方法实现的请求重定向与RequestDispatcher.forward方法实现的请求转发的总结比较： </p>\n<p>（1）RequestDispatcher.forward方法只能将请求转发给同一个WEB应用中的组件；而HttpServletResponse.sendRedirect 方法不仅可以重定向到当前应用程序中的其他资源，还可以重定向到同一个站点上的其他应用程序中的资源，甚至是使用绝对URL重定向到其他站点的资源。如果传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录；如果创建RequestDispatcher对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。 </p>\n<p>（2）调用HttpServletResponse.sendRedirect方法重定向的访问过程结束后，浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；而调用RequestDispatcher.forward 方法的请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。 </p>\n<p>（3）HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，响应的结果就是告诉浏览器去重新发出对另外一个URL的 访问请求，这个过程好比有个绰号叫“浏览器”的人写信找张三借钱，张三回信说没有钱，让“浏览器”去找李四借，并将李四现在的通信地址告诉给了“浏览器”。于是，“浏览器”又按张三提供通信地址给李四写信借钱，李四收到信后就把钱汇给了“浏览器”。可见，“浏览器”一共发出了两封信和收到了两次回复， “浏览器”也知道他借到的钱出自李四之手。RequestDispatcher.forward方 法在服务器端内部将请求转发给另外一个资源，浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。这个过程好比绰号叫“浏览器”的人写信找张三借钱，张三没有钱，于是张三找李四借了一些钱，甚至还可以加上自己的一些钱，然后再将这些钱汇给了“浏览器”。可见，“浏览器”只发 出了一封信和收到了一次回复，他只知道从张三那里借到了钱，并不知道有一部分钱出自李四之手。 </p>\n<p>（4）RequestDispatcher.forward方法的调用者与被调用者之间共享相同的request对象和response对象，它们属于同一个访问请求和响应过程；而HttpServletResponse.sendRedirect方法调用者与被调用者使用各自的request对象和response对象，它们属于两个独立的访问请求和响应过程。对于同一个WEB应用程序的内部资源之间的跳转，特别是跳转之前要对请求进行一些前期预处理，并要使用HttpServletRequest.setAttribute方法传递预处理结果，那就应该使用RequestDispatcher.forward方法。不同WEB应用程序之间的重定向，特别是要重定向到另外一个WEB站点上的资源的情况，都应该使用HttpServletResponse.sendRedirect方法。 </p>\n<p>（5）无论是RequestDispatcher.forward方法，还是HttpServletResponse.sendRedirect方法，在调用它们之前，都不能有内容已经被实际输出到了客户端。如果缓冲区中已经有了一些内容，这些内容将被从缓冲区中清除。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\" data-title=\"requestdispatcherandsendredirect\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<h3 id=\"重定向与转发的区别：\"><a href=\"#重定向与转发的区别：\" class=\"headerlink\" title=\"重定向与转发的区别：\"></a>重定向与转发的区别：</h3><p>1.重定向访问服务器两次，转发只访问服务器一次。<br>2.重定向可以看见目标页面的URL，转发只能看见第一次访问的页面URL，以后的工作都是有服务器来做的。<br>3.重定向跳转后必须加上return，要不然页面虽然跳转了，但是还会执行跳转后面的语句，转发是执行了跳转页面，下面的代码就不会在执行了。<br>4.在request级别使用信息共享，使用重定向必然出错<br>5.还有一个大的区别就是，重定向可以访问自己web应用以外的资源</p>\n<h3 id=\"一、调用方式\"><a href=\"#一、调用方式\" class=\"headerlink\" title=\"一、调用方式\"></a>一、调用方式</h3><p>我们知道，在servlet中调用转发、重定向的语句如下：<br>request.getRequestDispatcher(“new.jsp”).forward(request, response);//转发到new.jsp<br>response.sendRedirect(“new.jsp”);//重定向到new.jsp </p>\n<p>在jsp页面中你也会看到通过下面的方式实现转发：<br>&lt;jsp:forward page=”apage.jsp” /&gt; </p>\n<p>当然也可以在jsp页面中实现重定向：<br>&lt;%response.sendRedirect(“new.jsp”);//重定向到new.jsp%&gt; </p>\n<h3 id=\"二、本质区别\"><a href=\"#二、本质区别\" class=\"headerlink\" title=\"二、本质区别\"></a>二、本质区别</h3><h4 id=\"解释一\"><a href=\"#解释一\" class=\"headerlink\" title=\"解释一　　\"></a>解释一　　</h4><p>一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程： </p>\n<p>转发过程：客户浏览器发送http请求—-》web服务器接受此请求–》调用内部的一个方法在容器内部完成请求处理和转发动作—-》将目标资源发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。 </p>\n<p>重定向过程：客户浏览器发送http请求—-》web服务器接受后发送302状态码响应及对应新的location给客户浏览器–》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址—-》服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。 </p>\n<h4 id=\"解释二\"><a href=\"#解释二\" class=\"headerlink\" title=\"解释二\"></a>解释二</h4><p>重定向，其实是两次request,<br>第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。 </p>\n<p>请求转发是服务器内部把对一个request/response的处理权，移交给另外一个<br>对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。 </p>\n<h4 id=\"解释三\"><a href=\"#解释三\" class=\"headerlink\" title=\"解释三\"></a>解释三</h4><p>假设你去办理某个执照， </p>\n<p>重定向：你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。 </p>\n<p>转发：你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。 </p>\n<h3 id=\"三、请求重定向与请求转发的比较\"><a href=\"#三、请求重定向与请求转发的比较\" class=\"headerlink\" title=\"三、请求重定向与请求转发的比较\"></a>三、请求重定向与请求转发的比较</h3><p>尽管HttpServletResponse.sendRedirect方法和RequestDispatcher.forward方法都可以让浏览器获得另外一个URL所指向的资源，但两者的内部运行机制有着很大的区别。下面是HttpServletResponse.sendRedirect方法实现的请求重定向与RequestDispatcher.forward方法实现的请求转发的总结比较： </p>\n<p>（1）RequestDispatcher.forward方法只能将请求转发给同一个WEB应用中的组件；而HttpServletResponse.sendRedirect 方法不仅可以重定向到当前应用程序中的其他资源，还可以重定向到同一个站点上的其他应用程序中的资源，甚至是使用绝对URL重定向到其他站点的资源。如果传递给HttpServletResponse.sendRedirect 方法的相对URL以“/”开头，它是相对于整个WEB站点的根目录；如果创建RequestDispatcher对象时指定的相对URL以“/”开头，它是相对于当前WEB应用程序的根目录。 </p>\n<p>（2）调用HttpServletResponse.sendRedirect方法重定向的访问过程结束后，浏览器地址栏中显示的URL会发生改变，由初始的URL地址变成重定向的目标URL；而调用RequestDispatcher.forward 方法的请求转发过程结束后，浏览器地址栏保持初始的URL地址不变。 </p>\n<p>（3）HttpServletResponse.sendRedirect方法对浏览器的请求直接作出响应，响应的结果就是告诉浏览器去重新发出对另外一个URL的 访问请求，这个过程好比有个绰号叫“浏览器”的人写信找张三借钱，张三回信说没有钱，让“浏览器”去找李四借，并将李四现在的通信地址告诉给了“浏览器”。于是，“浏览器”又按张三提供通信地址给李四写信借钱，李四收到信后就把钱汇给了“浏览器”。可见，“浏览器”一共发出了两封信和收到了两次回复， “浏览器”也知道他借到的钱出自李四之手。RequestDispatcher.forward方 法在服务器端内部将请求转发给另外一个资源，浏览器只知道发出了请求并得到了响应结果，并不知道在服务器程序内部发生了转发行为。这个过程好比绰号叫“浏览器”的人写信找张三借钱，张三没有钱，于是张三找李四借了一些钱，甚至还可以加上自己的一些钱，然后再将这些钱汇给了“浏览器”。可见，“浏览器”只发 出了一封信和收到了一次回复，他只知道从张三那里借到了钱，并不知道有一部分钱出自李四之手。 </p>\n<p>（4）RequestDispatcher.forward方法的调用者与被调用者之间共享相同的request对象和response对象，它们属于同一个访问请求和响应过程；而HttpServletResponse.sendRedirect方法调用者与被调用者使用各自的request对象和response对象，它们属于两个独立的访问请求和响应过程。对于同一个WEB应用程序的内部资源之间的跳转，特别是跳转之前要对请求进行一些前期预处理，并要使用HttpServletRequest.setAttribute方法传递预处理结果，那就应该使用RequestDispatcher.forward方法。不同WEB应用程序之间的重定向，特别是要重定向到另外一个WEB站点上的资源的情况，都应该使用HttpServletResponse.sendRedirect方法。 </p>\n<p>（5）无论是RequestDispatcher.forward方法，还是HttpServletResponse.sendRedirect方法，在调用它们之前，都不能有内容已经被实际输出到了客户端。如果缓冲区中已经有了一些内容，这些内容将被从缓冲区中清除。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\" data-title=\"requestdispatcherandsendredirect\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-requestdispatcherandsendredirect/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"几种常见的内部排序","date":"2016-06-09T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n## 概论\n\n排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。\n\n我整理的排序就是内部排序。\n\n\n\n当数据较多时应该采用时间复杂度为o(nlog2n)的排序方法：快速排序、堆排序、归并排序\n\n快速排序是这几种内部排序中最好的方法，想待排序的关键字是随机分布时，快速排序的平均时间最短。\n\n \n\n## 直接插入排序\n\n### 思想\n\n将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。\n\n### 要点\n设立哨兵，作为临时存储和判断数组边界之用。\n\n如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。\n\n### 代码\n```\npublic void insertSort(int[] a){\n    int i, j, k;\nfor (i = 1; i < a.length; i++) {\n             //为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置\n            for (j = i - 1; j >= 0; j--)//这里判断是j>=0也可以防止数组越界，很巧妙\n                 if (a[j] < a[i])\n                     break;\n             //如找到了一个合适的位置\n             if (j != i - 1) {\n                 //将比a[i]大的数据向后移\n                 int temp = a[i];\n                 for (k = i - 1; k > j; k--)\n                     a[k + 1] = a[k];\n                 //将a[i]放到正确位置上\n                 a[k + 1] = temp;\n             }\n         }\n}\n```\n### 效率\n\n时间复杂度：O（n^2）.\n\n其他的插入排序有二分插入排序，2-路插入排序。\n\n## 简单选择排序\n\n### 基本思想\n\n在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。\n\n### 操作方法\n\n第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；\n\n第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；\n\n以此类推.....\n\n第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，\n\n直到整个序列按关键码有序。\n\n### 代码\n```\npublic void selectSort(int a[]){\n    int index,temp;\n    //index保存目前最小的数据的下标\n    //找出最小的数据的位置\n    for (int i=0;i<a.length ;i++) {\n        index=i;//因为每次排完序前面的都是有序的了，前面的肯定比第i个小，所以让index=i，减少不必要的麻烦\n        for (int j=i;j<a.length ;j++ ) {\n            if (a[j]<a[index]) {\n            index=j;\n            }        \n        }\n        System.out.println(\"第\"+i+\"次找到的最小值的下标是：\"+index);\n        if(index!=i)\n            {\n                temp=a[index];//找到无序数列里面的最小值并于当前位置(i)交换\n                a[index]=a[i];\n                a[i]=temp;\n            }\n        for (int m=0; m<a.length;m++ ) {\n            System.out.print(a[m]+\" \");\n\n        }\n        System.out.println();\n    }\n    \n}\n```\n## 简单选择排序的改进 --二元选择排序\n\n简单选择排序，每趟只能确定一个元素排序后的定位，我们可以考虑改进为每趟确定两个元素，也就是最大值和最小值的位置，从而减少循环次数，改进后对n个数据进行排序，最多只需进行[n/2]趟循环。\n\n### 代码\n```\n//这个算法因为比较的是大小，将min和max都记录下来，交换到当前坐标，但是如果数组中有相同的值，他们也会不论你这是交换还是不交换，都不会改变结果，所以这个方法不适用于有相同数据的数组\nvoid selectSort_double(int a[]){\n    int min,max,temp;\n    for (int i=0;i<=a.length/2;i++ ) {\n        min=i;max=i;\n        for (int j=i;j<a.length-i;j++) {\n            if(a[j]<a[min]){\n                min=j;\n                System.out.println(\"min=\"+min);\n                continue;//如果当前左边的数据小于当前最小值，那么它必定小于最大值，直接进入下一次循环\n            }\n            if (a[j]>a[max]) {\n                max=j;\n                System.out.println(\"max=\"+max);\n            }   \n        }\n        System.out.println(\"第\"+i+\"次找到的最小值的下标是：\"+min+\";第\"+i+\"次找到的最大值的下标是：\"+max);\n        temp=a[i];a[i]=a[min];a[min]=temp;\n        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;\n        for (int w=0;w<a.length ;w++ ) {\n            System.out.print(a[w]+\" \");\n        }\n        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;\n        System.out.println();\n    }\n}\n```\n## 冒泡排序\n\n### 基本思想\n\n冒泡排序是相继比较交换两个相邻位置的值，每次排序都确定一个值的位置，就像冒泡一样\n\n### 代码\n\n```\npublic class BubbleSort1{\n\n    public void bubble(int a[]){\n\n        for (int i=0;i<a.length;i++ ) {\n            for (int j=0;j<a.length-i-1 ;j++ ) {\n                \n                if (a[j]>a[j+1]) {\n                    int temp=a[j];\n                    a[j]=a[j+1];\n                    a[j+1]=temp;\n                }\n                // out(a);\n\n            }\n            out(a);\n}\n    }\n    public void out(int a[]){\n        for (int i=0;i<a.length ;i++ ) {\n            System.out.print(a[i]+\" \");\n        }\n        System.out.println();\n    }\n    public static void main(String[] args) {\n        BubbleSort1 bu=new BubbleSort1();\n        int arr[]={2,5,1,3,6,9,7};\n        // bu.out(arr);\n        bu.bubble(arr);\n        // bu.out(arr);\n        System.out.println(\"hello world\");\n    }\n\n\n}\n\n```\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-thewayofsort/\" data-title=\"thewayofsort\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","source":"_posts/2016-06-10-kongzheng1993-thewayofsort.md","raw":"---\nlayout: post\ntitle: \"几种常见的内部排序\"\ndate: 2016-06-10\nexcerpt: \"介绍几种经典的内部排序\"\ntags: [sample post, images, test]\ncomments: true\n---\n\n## 概论\n\n排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。\n\n我整理的排序就是内部排序。\n\n\n\n当数据较多时应该采用时间复杂度为o(nlog2n)的排序方法：快速排序、堆排序、归并排序\n\n快速排序是这几种内部排序中最好的方法，想待排序的关键字是随机分布时，快速排序的平均时间最短。\n\n \n\n## 直接插入排序\n\n### 思想\n\n将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。\n\n### 要点\n设立哨兵，作为临时存储和判断数组边界之用。\n\n如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。\n\n### 代码\n```\npublic void insertSort(int[] a){\n    int i, j, k;\nfor (i = 1; i < a.length; i++) {\n             //为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置\n            for (j = i - 1; j >= 0; j--)//这里判断是j>=0也可以防止数组越界，很巧妙\n                 if (a[j] < a[i])\n                     break;\n             //如找到了一个合适的位置\n             if (j != i - 1) {\n                 //将比a[i]大的数据向后移\n                 int temp = a[i];\n                 for (k = i - 1; k > j; k--)\n                     a[k + 1] = a[k];\n                 //将a[i]放到正确位置上\n                 a[k + 1] = temp;\n             }\n         }\n}\n```\n### 效率\n\n时间复杂度：O（n^2）.\n\n其他的插入排序有二分插入排序，2-路插入排序。\n\n## 简单选择排序\n\n### 基本思想\n\n在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。\n\n### 操作方法\n\n第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；\n\n第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；\n\n以此类推.....\n\n第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，\n\n直到整个序列按关键码有序。\n\n### 代码\n```\npublic void selectSort(int a[]){\n    int index,temp;\n    //index保存目前最小的数据的下标\n    //找出最小的数据的位置\n    for (int i=0;i<a.length ;i++) {\n        index=i;//因为每次排完序前面的都是有序的了，前面的肯定比第i个小，所以让index=i，减少不必要的麻烦\n        for (int j=i;j<a.length ;j++ ) {\n            if (a[j]<a[index]) {\n            index=j;\n            }        \n        }\n        System.out.println(\"第\"+i+\"次找到的最小值的下标是：\"+index);\n        if(index!=i)\n            {\n                temp=a[index];//找到无序数列里面的最小值并于当前位置(i)交换\n                a[index]=a[i];\n                a[i]=temp;\n            }\n        for (int m=0; m<a.length;m++ ) {\n            System.out.print(a[m]+\" \");\n\n        }\n        System.out.println();\n    }\n    \n}\n```\n## 简单选择排序的改进 --二元选择排序\n\n简单选择排序，每趟只能确定一个元素排序后的定位，我们可以考虑改进为每趟确定两个元素，也就是最大值和最小值的位置，从而减少循环次数，改进后对n个数据进行排序，最多只需进行[n/2]趟循环。\n\n### 代码\n```\n//这个算法因为比较的是大小，将min和max都记录下来，交换到当前坐标，但是如果数组中有相同的值，他们也会不论你这是交换还是不交换，都不会改变结果，所以这个方法不适用于有相同数据的数组\nvoid selectSort_double(int a[]){\n    int min,max,temp;\n    for (int i=0;i<=a.length/2;i++ ) {\n        min=i;max=i;\n        for (int j=i;j<a.length-i;j++) {\n            if(a[j]<a[min]){\n                min=j;\n                System.out.println(\"min=\"+min);\n                continue;//如果当前左边的数据小于当前最小值，那么它必定小于最大值，直接进入下一次循环\n            }\n            if (a[j]>a[max]) {\n                max=j;\n                System.out.println(\"max=\"+max);\n            }   \n        }\n        System.out.println(\"第\"+i+\"次找到的最小值的下标是：\"+min+\";第\"+i+\"次找到的最大值的下标是：\"+max);\n        temp=a[i];a[i]=a[min];a[min]=temp;\n        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;\n        for (int w=0;w<a.length ;w++ ) {\n            System.out.print(a[w]+\" \");\n        }\n        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;\n        System.out.println();\n    }\n}\n```\n## 冒泡排序\n\n### 基本思想\n\n冒泡排序是相继比较交换两个相邻位置的值，每次排序都确定一个值的位置，就像冒泡一样\n\n### 代码\n\n```\npublic class BubbleSort1{\n\n    public void bubble(int a[]){\n\n        for (int i=0;i<a.length;i++ ) {\n            for (int j=0;j<a.length-i-1 ;j++ ) {\n                \n                if (a[j]>a[j+1]) {\n                    int temp=a[j];\n                    a[j]=a[j+1];\n                    a[j+1]=temp;\n                }\n                // out(a);\n\n            }\n            out(a);\n}\n    }\n    public void out(int a[]){\n        for (int i=0;i<a.length ;i++ ) {\n            System.out.print(a[i]+\" \");\n        }\n        System.out.println();\n    }\n    public static void main(String[] args) {\n        BubbleSort1 bu=new BubbleSort1();\n        int arr[]={2,5,1,3,6,9,7};\n        // bu.out(arr);\n        bu.bubble(arr);\n        // bu.out(arr);\n        System.out.println(\"hello world\");\n    }\n\n\n}\n\n```\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-thewayofsort/\" data-title=\"thewayofsort\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","slug":"kongzheng1993-thewayofsort","published":1,"updated":"2019-01-26T09:37:47.568Z","photos":[],"link":"","_id":"cjwaviv6d000d41xnai3j0l87","content":"<h2 id=\"概论\"><a href=\"#概论\" class=\"headerlink\" title=\"概论\"></a>概论</h2><p>排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>\n<p>我整理的排序就是内部排序。</p>\n<p>当数据较多时应该采用时间复杂度为o(nlog2n)的排序方法：快速排序、堆排序、归并排序</p>\n<p>快速排序是这几种内部排序中最好的方法，想待排序的关键字是随机分布时，快速排序的平均时间最短。</p>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><h3 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</p>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><p>设立哨兵，作为临时存储和判断数组边界之用。</p>\n<p>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void insertSort(int[] a)&#123;</span><br><span class=\"line\">    int i, j, k;</span><br><span class=\"line\">for (i = 1; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">             //为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置</span><br><span class=\"line\">            for (j = i - 1; j &gt;= 0; j--)//这里判断是j&gt;=0也可以防止数组越界，很巧妙</span><br><span class=\"line\">                 if (a[j] &lt; a[i])</span><br><span class=\"line\">                     break;</span><br><span class=\"line\">             //如找到了一个合适的位置</span><br><span class=\"line\">             if (j != i - 1) &#123;</span><br><span class=\"line\">                 //将比a[i]大的数据向后移</span><br><span class=\"line\">                 int temp = a[i];</span><br><span class=\"line\">                 for (k = i - 1; k &gt; j; k--)</span><br><span class=\"line\">                     a[k + 1] = a[k];</span><br><span class=\"line\">                 //将a[i]放到正确位置上</span><br><span class=\"line\">                 a[k + 1] = temp;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><p>时间复杂度：O（n^2）.</p>\n<p>其他的插入排序有二分插入排序，2-路插入排序。</p>\n<h2 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h2><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</p>\n<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><p>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；</p>\n<p>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；</p>\n<p>以此类推…..</p>\n<p>第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，</p>\n<p>直到整个序列按关键码有序。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void selectSort(int a[])&#123;</span><br><span class=\"line\">    int index,temp;</span><br><span class=\"line\">    //index保存目前最小的数据的下标</span><br><span class=\"line\">    //找出最小的数据的位置</span><br><span class=\"line\">    for (int i=0;i&lt;a.length ;i++) &#123;</span><br><span class=\"line\">        index=i;//因为每次排完序前面的都是有序的了，前面的肯定比第i个小，所以让index=i，减少不必要的麻烦</span><br><span class=\"line\">        for (int j=i;j&lt;a.length ;j++ ) &#123;</span><br><span class=\"line\">            if (a[j]&lt;a[index]) &#123;</span><br><span class=\"line\">            index=j;</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;第&quot;+i+&quot;次找到的最小值的下标是：&quot;+index);</span><br><span class=\"line\">        if(index!=i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp=a[index];//找到无序数列里面的最小值并于当前位置(i)交换</span><br><span class=\"line\">                a[index]=a[i];</span><br><span class=\"line\">                a[i]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        for (int m=0; m&lt;a.length;m++ ) &#123;</span><br><span class=\"line\">            System.out.print(a[m]+&quot; &quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单选择排序的改进-–二元选择排序\"><a href=\"#简单选择排序的改进-–二元选择排序\" class=\"headerlink\" title=\"简单选择排序的改进 –二元选择排序\"></a>简单选择排序的改进 –二元选择排序</h2><p>简单选择排序，每趟只能确定一个元素排序后的定位，我们可以考虑改进为每趟确定两个元素，也就是最大值和最小值的位置，从而减少循环次数，改进后对n个数据进行排序，最多只需进行[n/2]趟循环。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个算法因为比较的是大小，将min和max都记录下来，交换到当前坐标，但是如果数组中有相同的值，他们也会不论你这是交换还是不交换，都不会改变结果，所以这个方法不适用于有相同数据的数组</span><br><span class=\"line\">void selectSort_double(int a[])&#123;</span><br><span class=\"line\">    int min,max,temp;</span><br><span class=\"line\">    for (int i=0;i&lt;=a.length/2;i++ ) &#123;</span><br><span class=\"line\">        min=i;max=i;</span><br><span class=\"line\">        for (int j=i;j&lt;a.length-i;j++) &#123;</span><br><span class=\"line\">            if(a[j]&lt;a[min])&#123;</span><br><span class=\"line\">                min=j;</span><br><span class=\"line\">                System.out.println(&quot;min=&quot;+min);</span><br><span class=\"line\">                continue;//如果当前左边的数据小于当前最小值，那么它必定小于最大值，直接进入下一次循环</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (a[j]&gt;a[max]) &#123;</span><br><span class=\"line\">                max=j;</span><br><span class=\"line\">                System.out.println(&quot;max=&quot;+max);</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;第&quot;+i+&quot;次找到的最小值的下标是：&quot;+min+&quot;;第&quot;+i+&quot;次找到的最大值的下标是：&quot;+max);</span><br><span class=\"line\">        temp=a[i];a[i]=a[min];a[min]=temp;</span><br><span class=\"line\">        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;</span><br><span class=\"line\">        for (int w=0;w&lt;a.length ;w++ ) &#123;</span><br><span class=\"line\">            System.out.print(a[w]+&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>冒泡排序是相继比较交换两个相邻位置的值，每次排序都确定一个值的位置，就像冒泡一样</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BubbleSort1&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void bubble(int a[])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i=0;i&lt;a.length;i++ ) &#123;</span><br><span class=\"line\">            for (int j=0;j&lt;a.length-i-1 ;j++ ) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (a[j]&gt;a[j+1]) &#123;</span><br><span class=\"line\">                    int temp=a[j];</span><br><span class=\"line\">                    a[j]=a[j+1];</span><br><span class=\"line\">                    a[j+1]=temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // out(a);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void out(int a[])&#123;</span><br><span class=\"line\">        for (int i=0;i&lt;a.length ;i++ ) &#123;</span><br><span class=\"line\">            System.out.print(a[i]+&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        BubbleSort1 bu=new BubbleSort1();</span><br><span class=\"line\">        int arr[]=&#123;2,5,1,3,6,9,7&#125;;</span><br><span class=\"line\">        // bu.out(arr);</span><br><span class=\"line\">        bu.bubble(arr);</span><br><span class=\"line\">        // bu.out(arr);</span><br><span class=\"line\">        System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-thewayofsort/\" data-title=\"thewayofsort\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h2 id=\"概论\"><a href=\"#概论\" class=\"headerlink\" title=\"概论\"></a>概论</h2><p>排序有内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>\n<p>我整理的排序就是内部排序。</p>\n<p>当数据较多时应该采用时间复杂度为o(nlog2n)的排序方法：快速排序、堆排序、归并排序</p>\n<p>快速排序是这几种内部排序中最好的方法，想待排序的关键字是随机分布时，快速排序的平均时间最短。</p>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><h3 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</p>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><p>设立哨兵，作为临时存储和判断数组边界之用。</p>\n<p>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void insertSort(int[] a)&#123;</span><br><span class=\"line\">    int i, j, k;</span><br><span class=\"line\">for (i = 1; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">             //为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置</span><br><span class=\"line\">            for (j = i - 1; j &gt;= 0; j--)//这里判断是j&gt;=0也可以防止数组越界，很巧妙</span><br><span class=\"line\">                 if (a[j] &lt; a[i])</span><br><span class=\"line\">                     break;</span><br><span class=\"line\">             //如找到了一个合适的位置</span><br><span class=\"line\">             if (j != i - 1) &#123;</span><br><span class=\"line\">                 //将比a[i]大的数据向后移</span><br><span class=\"line\">                 int temp = a[i];</span><br><span class=\"line\">                 for (k = i - 1; k &gt; j; k--)</span><br><span class=\"line\">                     a[k + 1] = a[k];</span><br><span class=\"line\">                 //将a[i]放到正确位置上</span><br><span class=\"line\">                 a[k + 1] = temp;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><p>时间复杂度：O（n^2）.</p>\n<p>其他的插入排序有二分插入排序，2-路插入排序。</p>\n<h2 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h2><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</p>\n<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><p>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；</p>\n<p>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；</p>\n<p>以此类推…..</p>\n<p>第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，</p>\n<p>直到整个序列按关键码有序。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void selectSort(int a[])&#123;</span><br><span class=\"line\">    int index,temp;</span><br><span class=\"line\">    //index保存目前最小的数据的下标</span><br><span class=\"line\">    //找出最小的数据的位置</span><br><span class=\"line\">    for (int i=0;i&lt;a.length ;i++) &#123;</span><br><span class=\"line\">        index=i;//因为每次排完序前面的都是有序的了，前面的肯定比第i个小，所以让index=i，减少不必要的麻烦</span><br><span class=\"line\">        for (int j=i;j&lt;a.length ;j++ ) &#123;</span><br><span class=\"line\">            if (a[j]&lt;a[index]) &#123;</span><br><span class=\"line\">            index=j;</span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;第&quot;+i+&quot;次找到的最小值的下标是：&quot;+index);</span><br><span class=\"line\">        if(index!=i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp=a[index];//找到无序数列里面的最小值并于当前位置(i)交换</span><br><span class=\"line\">                a[index]=a[i];</span><br><span class=\"line\">                a[i]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        for (int m=0; m&lt;a.length;m++ ) &#123;</span><br><span class=\"line\">            System.out.print(a[m]+&quot; &quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单选择排序的改进-–二元选择排序\"><a href=\"#简单选择排序的改进-–二元选择排序\" class=\"headerlink\" title=\"简单选择排序的改进 –二元选择排序\"></a>简单选择排序的改进 –二元选择排序</h2><p>简单选择排序，每趟只能确定一个元素排序后的定位，我们可以考虑改进为每趟确定两个元素，也就是最大值和最小值的位置，从而减少循环次数，改进后对n个数据进行排序，最多只需进行[n/2]趟循环。</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个算法因为比较的是大小，将min和max都记录下来，交换到当前坐标，但是如果数组中有相同的值，他们也会不论你这是交换还是不交换，都不会改变结果，所以这个方法不适用于有相同数据的数组</span><br><span class=\"line\">void selectSort_double(int a[])&#123;</span><br><span class=\"line\">    int min,max,temp;</span><br><span class=\"line\">    for (int i=0;i&lt;=a.length/2;i++ ) &#123;</span><br><span class=\"line\">        min=i;max=i;</span><br><span class=\"line\">        for (int j=i;j&lt;a.length-i;j++) &#123;</span><br><span class=\"line\">            if(a[j]&lt;a[min])&#123;</span><br><span class=\"line\">                min=j;</span><br><span class=\"line\">                System.out.println(&quot;min=&quot;+min);</span><br><span class=\"line\">                continue;//如果当前左边的数据小于当前最小值，那么它必定小于最大值，直接进入下一次循环</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (a[j]&gt;a[max]) &#123;</span><br><span class=\"line\">                max=j;</span><br><span class=\"line\">                System.out.println(&quot;max=&quot;+max);</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;第&quot;+i+&quot;次找到的最小值的下标是：&quot;+min+&quot;;第&quot;+i+&quot;次找到的最大值的下标是：&quot;+max);</span><br><span class=\"line\">        temp=a[i];a[i]=a[min];a[min]=temp;</span><br><span class=\"line\">        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;</span><br><span class=\"line\">        for (int w=0;w&lt;a.length ;w++ ) &#123;</span><br><span class=\"line\">            System.out.print(a[w]+&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=a[a.length-i-1];a[a.length-i-1]=a[max];a[max]=temp;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>冒泡排序是相继比较交换两个相邻位置的值，每次排序都确定一个值的位置，就像冒泡一样</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BubbleSort1&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void bubble(int a[])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i=0;i&lt;a.length;i++ ) &#123;</span><br><span class=\"line\">            for (int j=0;j&lt;a.length-i-1 ;j++ ) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (a[j]&gt;a[j+1]) &#123;</span><br><span class=\"line\">                    int temp=a[j];</span><br><span class=\"line\">                    a[j]=a[j+1];</span><br><span class=\"line\">                    a[j+1]=temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // out(a);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void out(int a[])&#123;</span><br><span class=\"line\">        for (int i=0;i&lt;a.length ;i++ ) &#123;</span><br><span class=\"line\">            System.out.print(a[i]+&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        BubbleSort1 bu=new BubbleSort1();</span><br><span class=\"line\">        int arr[]=&#123;2,5,1,3,6,9,7&#125;;</span><br><span class=\"line\">        // bu.out(arr);</span><br><span class=\"line\">        bu.bubble(arr);</span><br><span class=\"line\">        // bu.out(arr);</span><br><span class=\"line\">        System.out.println(&quot;hello world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-thewayofsort/\" data-title=\"thewayofsort\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"a coder in love","date":"2016-06-09T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n\n\n```\n\nwhile(alive){\n\t\n\teat();\n\tsleep();\n\tcode();\n\tmissyou();\n\n}\n\n```\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","source":"_posts/2016-06-10-kongzheng1993-acoderinlove.md","raw":"---\nlayout: post\ntitle: \"a coder in love\"\ndate: 2016-06-10\nexcerpt: \"love you forever\"\ntags: [sample post, images, test]\ncomments: true\n---\n\n\n\n\n```\n\nwhile(alive){\n\t\n\teat();\n\tsleep();\n\tcode();\n\tmissyou();\n\n}\n\n```\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","slug":"kongzheng1993-acoderinlove","published":1,"updated":"2019-01-26T09:37:47.567Z","photos":[],"link":"","_id":"cjwaviv6j000f41xnoorl4146","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">while(alive)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\teat();</span><br><span class=\"line\">\tsleep();</span><br><span class=\"line\">\tcode();</span><br><span class=\"line\">\tmissyou();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">while(alive)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\teat();</span><br><span class=\"line\">\tsleep();</span><br><span class=\"line\">\tcode();</span><br><span class=\"line\">\tmissyou();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-acoderinlove/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"String str","date":"2016-07-10T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\nString str=new String(\"abc\"); 跟着这段代码之后，我们会想到一个问题，就是这行代码究竟创建了几个String对象呢？\n答案是2个。\nString str只是定义了一个名为str的String类型的变量，因此它并没有创建对象；=是对变量str进行初始化，将某个对象的引用（或者叫句柄）赋值给它，显然也没有创建对象；现在只剩下了new String(\"abc\")了。那么，new String(\"abc\")什么又能被看作成“abc”和\nnew String()呢？\n这就要了解一下String的构造器：\npublic String (String original){\n\t//other code...\n}\n平常我们创建一个类的实例的方法有两种：\n1.使用new创建对象；\n2.调用Class类里面的newInstance方法，利用反射机制创建对象。\n\n我们正是使用new调用了String类的上面那个构造器方法创建了一个对象，并将它的引用赋值给了str变量。同时我们注意到，被调用的构造器方法接受的参数也是一个String对象，这个对象正是\"abc\"。由此我们又要引入另外一种创建String对象的方式的讨论——引号内包含文本。\n\n这种方式是String特有的，并且它与new的方式存在很大区别。  \n\nString str=\"abc\";  \n\n毫无疑问，这行代码创建了一个String对象。  \n\nString a=\"abc\";  String b=\"abc\";   那这里呢？\n\n答案还是一个。  \n\nString a=\"ab\"+\"cd\";   再看看这里呢？\n\n答案是三个。\n说到这里，我们就需要引入对字符串池相关知识的回顾了。  \n\n在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。  \n\n我们再回头看看String a=\"abc\";，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为\"abc\"的这么一个对象，它的判断依据是String类equals(Object obj)方法的返回值。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。因此，我们不难理解前面三个例子中头两个例子为什么是这个答案了。\n\n \n\n只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中，对此我们不再赘述。因此我们提倡大家用引号包含文本的方式来创建String对象以提高效率，实际上这也是我们在编程中常采用的。\n\n \n\n栈（stack）：主要保存基本类型（或者叫内置类型）（char、byte、short、int、long、float、double、boolean）和对象的引用，数据可以共享，速度仅次于寄存器（register），快于堆。 \n堆（heap）：用于存储对象\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\" data-title=\"String_Original\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","source":"_posts/2016-06-13-kongzheng1993-String_Original.md","raw":"---\nlayout: post\ntitle: \"String str\"\ndate: 2016-07-11\nexcerpt: \"code or die\"\ntags: [String, new]\ncomments: true\n---\n\n\nString str=new String(\"abc\"); 跟着这段代码之后，我们会想到一个问题，就是这行代码究竟创建了几个String对象呢？\n答案是2个。\nString str只是定义了一个名为str的String类型的变量，因此它并没有创建对象；=是对变量str进行初始化，将某个对象的引用（或者叫句柄）赋值给它，显然也没有创建对象；现在只剩下了new String(\"abc\")了。那么，new String(\"abc\")什么又能被看作成“abc”和\nnew String()呢？\n这就要了解一下String的构造器：\npublic String (String original){\n\t//other code...\n}\n平常我们创建一个类的实例的方法有两种：\n1.使用new创建对象；\n2.调用Class类里面的newInstance方法，利用反射机制创建对象。\n\n我们正是使用new调用了String类的上面那个构造器方法创建了一个对象，并将它的引用赋值给了str变量。同时我们注意到，被调用的构造器方法接受的参数也是一个String对象，这个对象正是\"abc\"。由此我们又要引入另外一种创建String对象的方式的讨论——引号内包含文本。\n\n这种方式是String特有的，并且它与new的方式存在很大区别。  \n\nString str=\"abc\";  \n\n毫无疑问，这行代码创建了一个String对象。  \n\nString a=\"abc\";  String b=\"abc\";   那这里呢？\n\n答案还是一个。  \n\nString a=\"ab\"+\"cd\";   再看看这里呢？\n\n答案是三个。\n说到这里，我们就需要引入对字符串池相关知识的回顾了。  \n\n在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。  \n\n我们再回头看看String a=\"abc\";，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为\"abc\"的这么一个对象，它的判断依据是String类equals(Object obj)方法的返回值。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。因此，我们不难理解前面三个例子中头两个例子为什么是这个答案了。\n\n \n\n只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中，对此我们不再赘述。因此我们提倡大家用引号包含文本的方式来创建String对象以提高效率，实际上这也是我们在编程中常采用的。\n\n \n\n栈（stack）：主要保存基本类型（或者叫内置类型）（char、byte、short、int、long、float、double、boolean）和对象的引用，数据可以共享，速度仅次于寄存器（register），快于堆。 \n堆（heap）：用于存储对象\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\" data-title=\"String_Original\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","slug":"kongzheng1993-String_Original","published":1,"updated":"2019-01-26T09:37:47.568Z","photos":[],"link":"","_id":"cjwaviv6o000i41xnniselbpn","content":"<p>String str=new String(“abc”); 跟着这段代码之后，我们会想到一个问题，就是这行代码究竟创建了几个String对象呢？<br>答案是2个。<br>String str只是定义了一个名为str的String类型的变量，因此它并没有创建对象；=是对变量str进行初始化，将某个对象的引用（或者叫句柄）赋值给它，显然也没有创建对象；现在只剩下了new String(“abc”)了。那么，new String(“abc”)什么又能被看作成“abc”和<br>new String()呢？<br>这就要了解一下String的构造器：<br>public String (String original){<br>    //other code…<br>}\n平常我们创建一个类的实例的方法有两种：<br>1.使用new创建对象；<br>2.调用Class类里面的newInstance方法，利用反射机制创建对象。</p>\n<p>我们正是使用new调用了String类的上面那个构造器方法创建了一个对象，并将它的引用赋值给了str变量。同时我们注意到，被调用的构造器方法接受的参数也是一个String对象，这个对象正是”abc”。由此我们又要引入另外一种创建String对象的方式的讨论——引号内包含文本。</p>\n<p>这种方式是String特有的，并且它与new的方式存在很大区别。  </p>\n<p>String str=”abc”;  </p>\n<p>毫无疑问，这行代码创建了一个String对象。  </p>\n<p>String a=”abc”;  String b=”abc”;   那这里呢？</p>\n<p>答案还是一个。  </p>\n<p>String a=”ab”+”cd”;   再看看这里呢？</p>\n<p>答案是三个。<br>说到这里，我们就需要引入对字符串池相关知识的回顾了。  </p>\n<p>在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。  </p>\n<p>我们再回头看看String a=”abc”;，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为”abc”的这么一个对象，它的判断依据是String类equals(Object obj)方法的返回值。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。因此，我们不难理解前面三个例子中头两个例子为什么是这个答案了。</p>\n<p>只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中，对此我们不再赘述。因此我们提倡大家用引号包含文本的方式来创建String对象以提高效率，实际上这也是我们在编程中常采用的。</p>\n<p>栈（stack）：主要保存基本类型（或者叫内置类型）（char、byte、short、int、long、float、double、boolean）和对象的引用，数据可以共享，速度仅次于寄存器（register），快于堆。<br>堆（heap）：用于存储对象</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\" data-title=\"String_Original\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<p>String str=new String(“abc”); 跟着这段代码之后，我们会想到一个问题，就是这行代码究竟创建了几个String对象呢？<br>答案是2个。<br>String str只是定义了一个名为str的String类型的变量，因此它并没有创建对象；=是对变量str进行初始化，将某个对象的引用（或者叫句柄）赋值给它，显然也没有创建对象；现在只剩下了new String(“abc”)了。那么，new String(“abc”)什么又能被看作成“abc”和<br>new String()呢？<br>这就要了解一下String的构造器：<br>public String (String original){<br>    //other code…<br>}\n平常我们创建一个类的实例的方法有两种：<br>1.使用new创建对象；<br>2.调用Class类里面的newInstance方法，利用反射机制创建对象。</p>\n<p>我们正是使用new调用了String类的上面那个构造器方法创建了一个对象，并将它的引用赋值给了str变量。同时我们注意到，被调用的构造器方法接受的参数也是一个String对象，这个对象正是”abc”。由此我们又要引入另外一种创建String对象的方式的讨论——引号内包含文本。</p>\n<p>这种方式是String特有的，并且它与new的方式存在很大区别。  </p>\n<p>String str=”abc”;  </p>\n<p>毫无疑问，这行代码创建了一个String对象。  </p>\n<p>String a=”abc”;  String b=”abc”;   那这里呢？</p>\n<p>答案还是一个。  </p>\n<p>String a=”ab”+”cd”;   再看看这里呢？</p>\n<p>答案是三个。<br>说到这里，我们就需要引入对字符串池相关知识的回顾了。  </p>\n<p>在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。  </p>\n<p>我们再回头看看String a=”abc”;，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为”abc”的这么一个对象，它的判断依据是String类equals(Object obj)方法的返回值。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。因此，我们不难理解前面三个例子中头两个例子为什么是这个答案了。</p>\n<p>只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中，对此我们不再赘述。因此我们提倡大家用引号包含文本的方式来创建String对象以提高效率，实际上这也是我们在编程中常采用的。</p>\n<p>栈（stack）：主要保存基本类型（或者叫内置类型）（char、byte、short、int、long、float、double、boolean）和对象的引用，数据可以共享，速度仅次于寄存器（register），快于堆。<br>堆（heap）：用于存储对象</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\" data-title=\"String_Original\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-String_Original/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"synchronized浅析","date":"2016-05-19T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## 关于synchronized\n\n### 一\n\n### 1、synchronized关键字的作用域有二种： \n\n#### 1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法； \n\n#### 2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。\n\n### 2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/*区块*/}，它的作用域是当前对象；\n\n### 3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；\nJava语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。\n     一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n     二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n     三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n     四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n     五、以上规则对其它对象锁同样适用.\n\n### 二\n\nsynchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。  \n1. synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如：  \npublic synchronized void accessVal(int newVal);  \nsynchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能\n\n执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行\n\n状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有\n\n一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）\n\n。  \n在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成\n\n员变量的访问。  \nsynchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为\n\nsynchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可\n\n以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供\n\n了更好的解决办法，那就是 synchronized 块。  \n2. synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：  \nsynchronized(syncObject) {  \n//允许访问控制的代码  \n}  \nsynchronized 块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机\n\n制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。  \n对synchronized(this)的一些理解 \n一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线\n\n程必须等待当前线程执行完这个代码块以后才能执行该代码块。  \n二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized\n\n(this)同步代码块。  \n三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)\n\n同步代码块的访问将被阻塞。  \n四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个\n\nobject的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。  \n五、以上规则对其它对象锁同样适用\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\" data-title=\"howManyTimes\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","source":"_posts/2016-06-16-kongzheng1993-synchronized.md","raw":"---\nlayout: post\ntitle:  \"synchronized浅析\"\ndate:   2016-05-20\nexcerpt: \"synchronized\"\ntag:\n- oop\ncomments: true\n---\n\n\n## 关于synchronized\n\n### 一\n\n### 1、synchronized关键字的作用域有二种： \n\n#### 1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法； \n\n#### 2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。\n\n### 2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/*区块*/}，它的作用域是当前对象；\n\n### 3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；\nJava语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。\n     一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。\n     二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。\n     三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。\n     四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n     五、以上规则对其它对象锁同样适用.\n\n### 二\n\nsynchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。  \n1. synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如：  \npublic synchronized void accessVal(int newVal);  \nsynchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能\n\n执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行\n\n状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有\n\n一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）\n\n。  \n在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成\n\n员变量的访问。  \nsynchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为\n\nsynchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可\n\n以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供\n\n了更好的解决办法，那就是 synchronized 块。  \n2. synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：  \nsynchronized(syncObject) {  \n//允许访问控制的代码  \n}  \nsynchronized 块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机\n\n制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。  \n对synchronized(this)的一些理解 \n一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线\n\n程必须等待当前线程执行完这个代码块以后才能执行该代码块。  \n二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized\n\n(this)同步代码块。  \n三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)\n\n同步代码块的访问将被阻塞。  \n四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个\n\nobject的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。  \n五、以上规则对其它对象锁同样适用\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\" data-title=\"howManyTimes\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","slug":"kongzheng1993-synchronized","published":1,"updated":"2019-01-26T09:37:47.570Z","photos":[],"link":"","_id":"cjwaviv6q000j41xn0grrplii","content":"<h2 id=\"关于synchronized\"><a href=\"#关于synchronized\" class=\"headerlink\" title=\"关于synchronized\"></a>关于synchronized</h2><h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><h3 id=\"1、synchronized关键字的作用域有二种：\"><a href=\"#1、synchronized关键字的作用域有二种：\" class=\"headerlink\" title=\"1、synchronized关键字的作用域有二种：\"></a>1、synchronized关键字的作用域有二种：</h3><h4 id=\"1）是某个对象实例内，synchronized-aMethod-可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；\"><a href=\"#1）是某个对象实例内，synchronized-aMethod-可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；\" class=\"headerlink\" title=\"1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；\"></a>1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；</h4><h4 id=\"2）是某个类的范围，synchronized-static-aStaticMethod-防止多个线程同时访问这个类中的synchronized-static-方法。它可以对类的所有对象实例起作用。\"><a href=\"#2）是某个类的范围，synchronized-static-aStaticMethod-防止多个线程同时访问这个类中的synchronized-static-方法。它可以对类的所有对象实例起作用。\" class=\"headerlink\" title=\"2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。\"></a>2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。</h4><h3 id=\"2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是-synchronized-this-区块-，它的作用域是当前对象；\"><a href=\"#2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是-synchronized-this-区块-，它的作用域是当前对象；\" class=\"headerlink\" title=\"2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/区块/}，它的作用域是当前对象；\"></a>2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/<em>区块</em>/}，它的作用域是当前对象；</h3><h3 id=\"3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized-f-在继承类中并不自动是synchronized-f-，而是变成了f-。继承类需要你显式的指定它的某个方法为synchronized方法；\"><a href=\"#3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized-f-在继承类中并不自动是synchronized-f-，而是变成了f-。继承类需要你显式的指定它的某个方法为synchronized方法；\" class=\"headerlink\" title=\"3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；\"></a>3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；</h3><p>Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。<br>     一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>     二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。<br>     三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。<br>     四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br>     五、以上规则对其它对象锁同样适用.</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>synchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。  </p>\n<ol>\n<li>synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如：<br>public synchronized void accessVal(int newVal);<br>synchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能</li>\n</ol>\n<p>执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行</p>\n<p>状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有</p>\n<p>一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）</p>\n<p>。  \n在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成</p>\n<p>员变量的访问。<br>synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为</p>\n<p>synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可</p>\n<p>以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供</p>\n<p>了更好的解决办法，那就是 synchronized 块。  </p>\n<ol start=\"2\">\n<li>synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：<br>synchronized(syncObject) {<br>//允许访问控制的代码<br>}  \nsynchronized 块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机</li>\n</ol>\n<p>制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。<br>对synchronized(this)的一些理解<br>一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线</p>\n<p>程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized</p>\n<p>(this)同步代码块。<br>三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)</p>\n<p>同步代码块的访问将被阻塞。<br>四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个</p>\n<p>object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br>五、以上规则对其它对象锁同样适用</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\" data-title=\"howManyTimes\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<h2 id=\"关于synchronized\"><a href=\"#关于synchronized\" class=\"headerlink\" title=\"关于synchronized\"></a>关于synchronized</h2><h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><h3 id=\"1、synchronized关键字的作用域有二种：\"><a href=\"#1、synchronized关键字的作用域有二种：\" class=\"headerlink\" title=\"1、synchronized关键字的作用域有二种：\"></a>1、synchronized关键字的作用域有二种：</h3><h4 id=\"1）是某个对象实例内，synchronized-aMethod-可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；\"><a href=\"#1）是某个对象实例内，synchronized-aMethod-可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；\" class=\"headerlink\" title=\"1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；\"></a>1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；</h4><h4 id=\"2）是某个类的范围，synchronized-static-aStaticMethod-防止多个线程同时访问这个类中的synchronized-static-方法。它可以对类的所有对象实例起作用。\"><a href=\"#2）是某个类的范围，synchronized-static-aStaticMethod-防止多个线程同时访问这个类中的synchronized-static-方法。它可以对类的所有对象实例起作用。\" class=\"headerlink\" title=\"2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。\"></a>2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。</h4><h3 id=\"2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是-synchronized-this-区块-，它的作用域是当前对象；\"><a href=\"#2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是-synchronized-this-区块-，它的作用域是当前对象；\" class=\"headerlink\" title=\"2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/区块/}，它的作用域是当前对象；\"></a>2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/<em>区块</em>/}，它的作用域是当前对象；</h3><h3 id=\"3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized-f-在继承类中并不自动是synchronized-f-，而是变成了f-。继承类需要你显式的指定它的某个方法为synchronized方法；\"><a href=\"#3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized-f-在继承类中并不自动是synchronized-f-，而是变成了f-。继承类需要你显式的指定它的某个方法为synchronized方法；\" class=\"headerlink\" title=\"3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；\"></a>3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；</h3><p>Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。<br>     一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>     二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。<br>     三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。<br>     四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br>     五、以上规则对其它对象锁同样适用.</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>synchronized 关键字，它包括两种用法：synchronized 方法和 synchronized 块。  </p>\n<ol>\n<li>synchronized 方法：通过在方法声明中加入 synchronized关键字来声明 synchronized 方法。如：<br>public synchronized void accessVal(int newVal);<br>synchronized 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 synchronized 方法都必须获得调用该方法的类实例的锁方能</li>\n</ol>\n<p>执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行</p>\n<p>状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 synchronized 的成员函数中至多只有一个处于可执行状态（因为至多只有</p>\n<p>一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 synchronized）</p>\n<p>。  \n在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 synchronized ，以控制其对类的静态成</p>\n<p>员变量的访问。<br>synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为</p>\n<p>synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。当然我们可</p>\n<p>以通过将访问类成员变量的代码放到专门的方法中，将其声明为 synchronized ，并在主方法中调用来解决这一问题，但是 Java 为我们提供</p>\n<p>了更好的解决办法，那就是 synchronized 块。  </p>\n<ol start=\"2\">\n<li>synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：<br>synchronized(syncObject) {<br>//允许访问控制的代码<br>}  \nsynchronized 块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行，具体机</li>\n</ol>\n<p>制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。<br>对synchronized(this)的一些理解<br>一、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线</p>\n<p>程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>二、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized</p>\n<p>(this)同步代码块。<br>三、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)</p>\n<p>同步代码块的访问将被阻塞。<br>四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个</p>\n<p>object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br>五、以上规则对其它对象锁同样适用</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\" data-title=\"howManyTimes\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-howManyTimes/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"PreparedStatement的优点","date":"2016-07-04T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n### 在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement\n\n#### 一.代码的可读性和可维护性\n\n虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用Statement的代码高很多档次:\n\n```\n\nstmt.executeUpdate(\"insert into tb_name (col1,col2,col2,col4) values ('\"+var1+\"','\"+var2+\"',\"+var3+\",'\"+var4+\"')\");\n\nperstmt = con.prepareStatement(\"insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)\");\nperstmt.setString(1,var1);\nperstmt.setString(2,var2);\nperstmt.setString(3,var3);\nperstmt.setString(4,var4);\nperstmt.executeUpdate();\n\n```\n\n\n哪一种更好，一目了然。\n\n#### 二.PreparedStatement尽最大可能提高性能.\n\n每一种数据库都会尽最大努力对预编译语句提供最大的性能优化.因为预编译语句有可能被重复调用.所以语句在被DB的编译器编译后的执行代码被缓存下来,那么下次调用时只要是相同的预编译语句就不需要编译,只要将参数直接传入编译过的语句执行代码中(相当于一个涵数)就会得到执行.这并不是说只有一个Connection中多次执行的预编译语句被缓存,而是对于整个DB中,只要预编译的语句语法和缓存中匹配.那么在任何时候就可以不需要再次编译而可以直接执行.而statement的语句中,即使是相同一操作,而由于每次操作的数据不同所以使整个语句相匹配的机会极小,几乎不太可能匹配.比如:\ninsert into tb_name (col1,col2) values ('11','22');\ninsert into tb_name (col1,col2) values ('11','23');\n即使是相同操作但因为数据内容不一样,所以整个个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存.这样每执行一次都要对传入的语句编译一次.\n\n当然并不是所以预编译语句都一定会被缓存,数据库本身会用一种策略,比如使用频度等因素来决定什么时候不再缓存已有的预编译结果.以保存有更多的空间存储新的预编译语句.\n\n\n#### 三.最重要的一点是极大地提高了安全性.\n\n即使到目前为止,仍有一些人连基本的恶义SQL语法都不知道.\n\n```\n\nString sql = \"select * from tb_name where name= '\"+varname+\"' and passwd='\"+varpasswd+\"'\";\n\n```\n\n如果我们把[' or '1' = '1]作为varpasswd传入进来.用户名随意,看看会成为什么?\n\nselect * from tb_name = '随意' and passwd = '' or '1' = '1';\n因为'1'='1'肯定成立,所以可以任何通过验证.更有甚者:\n把[';drop table tb_name;]作为varpasswd传入进来,则:\nselect * from tb_name = '随意' and passwd = '';drop table tb_name;有些数据库是不会让你成功的,但也有很多数据库就可以使这些语句得到执行.\n\n而如果你使用预编译语句.你传入的任何内容就不会和原来的语句发生任何匹配的关系.(前提是数据库本身支持预编译,但上前可能没有什么服务端数据库不支持编译了,只有少数的桌面数据库,就是直接文件访问的那些)只要全使用预编译语句,你就用不着对传入的数据做任何过虑.而如果使用普通的statement,有可能要对drop,;等做费尽心机的判断和过虑.\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\" data-title=\"PreparedStatement\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","source":"_posts/2016-07-05-kongzheng1993-PreparedStatement&Statement.md","raw":"---\nlayout: post\ntitle:  \"PreparedStatement的优点\"\ndate:   2016-07-5\nexcerpt: \"PreparedStatement和Statement对比\"\ntag:\n- oop\ncomments: true\n---\n\n### 在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement\n\n#### 一.代码的可读性和可维护性\n\n虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用Statement的代码高很多档次:\n\n```\n\nstmt.executeUpdate(\"insert into tb_name (col1,col2,col2,col4) values ('\"+var1+\"','\"+var2+\"',\"+var3+\",'\"+var4+\"')\");\n\nperstmt = con.prepareStatement(\"insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)\");\nperstmt.setString(1,var1);\nperstmt.setString(2,var2);\nperstmt.setString(3,var3);\nperstmt.setString(4,var4);\nperstmt.executeUpdate();\n\n```\n\n\n哪一种更好，一目了然。\n\n#### 二.PreparedStatement尽最大可能提高性能.\n\n每一种数据库都会尽最大努力对预编译语句提供最大的性能优化.因为预编译语句有可能被重复调用.所以语句在被DB的编译器编译后的执行代码被缓存下来,那么下次调用时只要是相同的预编译语句就不需要编译,只要将参数直接传入编译过的语句执行代码中(相当于一个涵数)就会得到执行.这并不是说只有一个Connection中多次执行的预编译语句被缓存,而是对于整个DB中,只要预编译的语句语法和缓存中匹配.那么在任何时候就可以不需要再次编译而可以直接执行.而statement的语句中,即使是相同一操作,而由于每次操作的数据不同所以使整个语句相匹配的机会极小,几乎不太可能匹配.比如:\ninsert into tb_name (col1,col2) values ('11','22');\ninsert into tb_name (col1,col2) values ('11','23');\n即使是相同操作但因为数据内容不一样,所以整个个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存.这样每执行一次都要对传入的语句编译一次.\n\n当然并不是所以预编译语句都一定会被缓存,数据库本身会用一种策略,比如使用频度等因素来决定什么时候不再缓存已有的预编译结果.以保存有更多的空间存储新的预编译语句.\n\n\n#### 三.最重要的一点是极大地提高了安全性.\n\n即使到目前为止,仍有一些人连基本的恶义SQL语法都不知道.\n\n```\n\nString sql = \"select * from tb_name where name= '\"+varname+\"' and passwd='\"+varpasswd+\"'\";\n\n```\n\n如果我们把[' or '1' = '1]作为varpasswd传入进来.用户名随意,看看会成为什么?\n\nselect * from tb_name = '随意' and passwd = '' or '1' = '1';\n因为'1'='1'肯定成立,所以可以任何通过验证.更有甚者:\n把[';drop table tb_name;]作为varpasswd传入进来,则:\nselect * from tb_name = '随意' and passwd = '';drop table tb_name;有些数据库是不会让你成功的,但也有很多数据库就可以使这些语句得到执行.\n\n而如果你使用预编译语句.你传入的任何内容就不会和原来的语句发生任何匹配的关系.(前提是数据库本身支持预编译,但上前可能没有什么服务端数据库不支持编译了,只有少数的桌面数据库,就是直接文件访问的那些)只要全使用预编译语句,你就用不着对传入的数据做任何过虑.而如果使用普通的statement,有可能要对drop,;等做费尽心机的判断和过虑.\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\" data-title=\"PreparedStatement\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","slug":"kongzheng1993-PreparedStatement&Statement","published":1,"updated":"2019-01-26T09:37:47.570Z","photos":[],"link":"","_id":"cjwaviv6s000l41xnmfsornnz","content":"<h3 id=\"在JDBC应用中-如果你已经是稍有水平开发者-你就应该始终以PreparedStatement代替Statement-也就是说-在任何时候都不要使用Statement\"><a href=\"#在JDBC应用中-如果你已经是稍有水平开发者-你就应该始终以PreparedStatement代替Statement-也就是说-在任何时候都不要使用Statement\" class=\"headerlink\" title=\"在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement\"></a>在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement</h3><h4 id=\"一-代码的可读性和可维护性\"><a href=\"#一-代码的可读性和可维护性\" class=\"headerlink\" title=\"一.代码的可读性和可维护性\"></a>一.代码的可读性和可维护性</h4><p>虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用Statement的代码高很多档次:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">stmt.executeUpdate(&quot;insert into tb_name (col1,col2,col2,col4) values (&apos;&quot;+var1+&quot;&apos;,&apos;&quot;+var2+&quot;&apos;,&quot;+var3+&quot;,&apos;&quot;+var4+&quot;&apos;)&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">perstmt = con.prepareStatement(&quot;insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)&quot;);</span><br><span class=\"line\">perstmt.setString(1,var1);</span><br><span class=\"line\">perstmt.setString(2,var2);</span><br><span class=\"line\">perstmt.setString(3,var3);</span><br><span class=\"line\">perstmt.setString(4,var4);</span><br><span class=\"line\">perstmt.executeUpdate();</span><br></pre></td></tr></table></figure>\n\n<p>哪一种更好，一目了然。</p>\n<h4 id=\"二-PreparedStatement尽最大可能提高性能\"><a href=\"#二-PreparedStatement尽最大可能提高性能\" class=\"headerlink\" title=\"二.PreparedStatement尽最大可能提高性能.\"></a>二.PreparedStatement尽最大可能提高性能.</h4><p>每一种数据库都会尽最大努力对预编译语句提供最大的性能优化.因为预编译语句有可能被重复调用.所以语句在被DB的编译器编译后的执行代码被缓存下来,那么下次调用时只要是相同的预编译语句就不需要编译,只要将参数直接传入编译过的语句执行代码中(相当于一个涵数)就会得到执行.这并不是说只有一个Connection中多次执行的预编译语句被缓存,而是对于整个DB中,只要预编译的语句语法和缓存中匹配.那么在任何时候就可以不需要再次编译而可以直接执行.而statement的语句中,即使是相同一操作,而由于每次操作的数据不同所以使整个语句相匹配的机会极小,几乎不太可能匹配.比如:<br>insert into tb_name (col1,col2) values (‘11’,’22’);<br>insert into tb_name (col1,col2) values (‘11’,’23’);<br>即使是相同操作但因为数据内容不一样,所以整个个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存.这样每执行一次都要对传入的语句编译一次.</p>\n<p>当然并不是所以预编译语句都一定会被缓存,数据库本身会用一种策略,比如使用频度等因素来决定什么时候不再缓存已有的预编译结果.以保存有更多的空间存储新的预编译语句.</p>\n<h4 id=\"三-最重要的一点是极大地提高了安全性\"><a href=\"#三-最重要的一点是极大地提高了安全性\" class=\"headerlink\" title=\"三.最重要的一点是极大地提高了安全性.\"></a>三.最重要的一点是极大地提高了安全性.</h4><p>即使到目前为止,仍有一些人连基本的恶义SQL语法都不知道.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String sql = &quot;select * from tb_name where name= &apos;&quot;+varname+&quot;&apos; and passwd=&apos;&quot;+varpasswd+&quot;&apos;&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们把[‘ or ‘1’ = ‘1]作为varpasswd传入进来.用户名随意,看看会成为什么?</p>\n<p>select * from tb_name = ‘随意’ and passwd = ‘’ or ‘1’ = ‘1’;<br>因为’1’=’1’肯定成立,所以可以任何通过验证.更有甚者:<br>把[‘;drop table tb_name;]作为varpasswd传入进来,则:<br>select * from tb_name = ‘随意’ and passwd = ‘’;drop table tb_name;有些数据库是不会让你成功的,但也有很多数据库就可以使这些语句得到执行.</p>\n<p>而如果你使用预编译语句.你传入的任何内容就不会和原来的语句发生任何匹配的关系.(前提是数据库本身支持预编译,但上前可能没有什么服务端数据库不支持编译了,只有少数的桌面数据库,就是直接文件访问的那些)只要全使用预编译语句,你就用不着对传入的数据做任何过虑.而如果使用普通的statement,有可能要对drop,;等做费尽心机的判断和过虑.</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\" data-title=\"PreparedStatement\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<h3 id=\"在JDBC应用中-如果你已经是稍有水平开发者-你就应该始终以PreparedStatement代替Statement-也就是说-在任何时候都不要使用Statement\"><a href=\"#在JDBC应用中-如果你已经是稍有水平开发者-你就应该始终以PreparedStatement代替Statement-也就是说-在任何时候都不要使用Statement\" class=\"headerlink\" title=\"在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement\"></a>在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement</h3><h4 id=\"一-代码的可读性和可维护性\"><a href=\"#一-代码的可读性和可维护性\" class=\"headerlink\" title=\"一.代码的可读性和可维护性\"></a>一.代码的可读性和可维护性</h4><p>虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用Statement的代码高很多档次:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">stmt.executeUpdate(&quot;insert into tb_name (col1,col2,col2,col4) values (&apos;&quot;+var1+&quot;&apos;,&apos;&quot;+var2+&quot;&apos;,&quot;+var3+&quot;,&apos;&quot;+var4+&quot;&apos;)&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">perstmt = con.prepareStatement(&quot;insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)&quot;);</span><br><span class=\"line\">perstmt.setString(1,var1);</span><br><span class=\"line\">perstmt.setString(2,var2);</span><br><span class=\"line\">perstmt.setString(3,var3);</span><br><span class=\"line\">perstmt.setString(4,var4);</span><br><span class=\"line\">perstmt.executeUpdate();</span><br></pre></td></tr></table></figure>\n\n<p>哪一种更好，一目了然。</p>\n<h4 id=\"二-PreparedStatement尽最大可能提高性能\"><a href=\"#二-PreparedStatement尽最大可能提高性能\" class=\"headerlink\" title=\"二.PreparedStatement尽最大可能提高性能.\"></a>二.PreparedStatement尽最大可能提高性能.</h4><p>每一种数据库都会尽最大努力对预编译语句提供最大的性能优化.因为预编译语句有可能被重复调用.所以语句在被DB的编译器编译后的执行代码被缓存下来,那么下次调用时只要是相同的预编译语句就不需要编译,只要将参数直接传入编译过的语句执行代码中(相当于一个涵数)就会得到执行.这并不是说只有一个Connection中多次执行的预编译语句被缓存,而是对于整个DB中,只要预编译的语句语法和缓存中匹配.那么在任何时候就可以不需要再次编译而可以直接执行.而statement的语句中,即使是相同一操作,而由于每次操作的数据不同所以使整个语句相匹配的机会极小,几乎不太可能匹配.比如:<br>insert into tb_name (col1,col2) values (‘11’,’22’);<br>insert into tb_name (col1,col2) values (‘11’,’23’);<br>即使是相同操作但因为数据内容不一样,所以整个个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存.这样每执行一次都要对传入的语句编译一次.</p>\n<p>当然并不是所以预编译语句都一定会被缓存,数据库本身会用一种策略,比如使用频度等因素来决定什么时候不再缓存已有的预编译结果.以保存有更多的空间存储新的预编译语句.</p>\n<h4 id=\"三-最重要的一点是极大地提高了安全性\"><a href=\"#三-最重要的一点是极大地提高了安全性\" class=\"headerlink\" title=\"三.最重要的一点是极大地提高了安全性.\"></a>三.最重要的一点是极大地提高了安全性.</h4><p>即使到目前为止,仍有一些人连基本的恶义SQL语法都不知道.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String sql = &quot;select * from tb_name where name= &apos;&quot;+varname+&quot;&apos; and passwd=&apos;&quot;+varpasswd+&quot;&apos;&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们把[‘ or ‘1’ = ‘1]作为varpasswd传入进来.用户名随意,看看会成为什么?</p>\n<p>select * from tb_name = ‘随意’ and passwd = ‘’ or ‘1’ = ‘1’;<br>因为’1’=’1’肯定成立,所以可以任何通过验证.更有甚者:<br>把[‘;drop table tb_name;]作为varpasswd传入进来,则:<br>select * from tb_name = ‘随意’ and passwd = ‘’;drop table tb_name;有些数据库是不会让你成功的,但也有很多数据库就可以使这些语句得到执行.</p>\n<p>而如果你使用预编译语句.你传入的任何内容就不会和原来的语句发生任何匹配的关系.(前提是数据库本身支持预编译,但上前可能没有什么服务端数据库不支持编译了,只有少数的桌面数据库,就是直接文件访问的那些)只要全使用预编译语句,你就用不着对传入的数据做任何过虑.而如果使用普通的statement,有可能要对drop,;等做费尽心机的判断和过虑.</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\" data-title=\"PreparedStatement\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-PreparedStatement/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"关于try-catch","date":"2016-07-10T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n```\n\nimport java.io.IOException;  \npublic class ExceptionTryCatchTest {  \n    public void doSomething() throws IOException{  \n        System.out.println(\"do somthing\");  \n    }  \n    public static void main(String[] args){  \n        ExceptionTryCatchTest etct = new ExceptionTryCatchTest();  \n        try {  \n            etct.doSomething();  \n        } catch (Exception e) {                \n        } catch (IOException e) {                \n        }  \n    }   \n}\n\n```\n\n以上并不能通过编译。\n因为编译的时候会报错:已捕捉到异常 java.io.IOException。  catch(IOException e)这句有错误。 \n分析：对于try..catch捕获异常的形式来说，对于异常的捕获，可以有多个catch。对于try里面发生的异常，他会根据发生的异常和catch里面的进行匹配(怎么匹配，按照catch块从上往下匹配)，当它匹配某一个catch块的时候，他就直接进入到这个catch块里面去了，后面在再有catch块的话，它不做任何处理，直接跳过去，全部忽略掉。如果有finally的话进入到finally里面继续执行。换句话说，如果有匹配的catch，它就会忽略掉这个catch后面所有的catch。对我们这个方法来说，抛出的是IOException，当执行etct.doSomething();时，可能会抛出IOException，一但抛出IOException，它首先进入到catch (Exception e) {}里面，先和Exception匹配，由于IOException extends Exception,根据多态的原则，IOException是匹配Exception的，所以程序就会进入到catch (Exception e) {}里面，进入到第一个catch后，后面的catch都不会执行了，所以catch (IOException e) {}永远都执行不到，就给我们报出了前面的错误:已捕捉到异常 java.io.IOException。 \n\n#### 【总结】\n\n在写异常处理的时候，一定要把异常范围小的放在前面，范围大的放在后面，Exception这个异常的根类一定要放在最后一个catch里面，如果放在前面或者中间，任何异常都会和Exception匹配的，就会报已捕获到...异常的错误。 \n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-abouttrycatch/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","source":"_posts/2016-07-11-kongzheng1993-ablout_try_catch.md","raw":"---\nlayout: post\ntitle: \"关于try-catch\"\ndate: 2016-07-11\nexcerpt: \"如果catch到一个异常，后面的catch还运行吗？\"\ntags: [catch，try]\ncomments: true\n---\n\n```\n\nimport java.io.IOException;  \npublic class ExceptionTryCatchTest {  \n    public void doSomething() throws IOException{  \n        System.out.println(\"do somthing\");  \n    }  \n    public static void main(String[] args){  \n        ExceptionTryCatchTest etct = new ExceptionTryCatchTest();  \n        try {  \n            etct.doSomething();  \n        } catch (Exception e) {                \n        } catch (IOException e) {                \n        }  \n    }   \n}\n\n```\n\n以上并不能通过编译。\n因为编译的时候会报错:已捕捉到异常 java.io.IOException。  catch(IOException e)这句有错误。 \n分析：对于try..catch捕获异常的形式来说，对于异常的捕获，可以有多个catch。对于try里面发生的异常，他会根据发生的异常和catch里面的进行匹配(怎么匹配，按照catch块从上往下匹配)，当它匹配某一个catch块的时候，他就直接进入到这个catch块里面去了，后面在再有catch块的话，它不做任何处理，直接跳过去，全部忽略掉。如果有finally的话进入到finally里面继续执行。换句话说，如果有匹配的catch，它就会忽略掉这个catch后面所有的catch。对我们这个方法来说，抛出的是IOException，当执行etct.doSomething();时，可能会抛出IOException，一但抛出IOException，它首先进入到catch (Exception e) {}里面，先和Exception匹配，由于IOException extends Exception,根据多态的原则，IOException是匹配Exception的，所以程序就会进入到catch (Exception e) {}里面，进入到第一个catch后，后面的catch都不会执行了，所以catch (IOException e) {}永远都执行不到，就给我们报出了前面的错误:已捕捉到异常 java.io.IOException。 \n\n#### 【总结】\n\n在写异常处理的时候，一定要把异常范围小的放在前面，范围大的放在后面，Exception这个异常的根类一定要放在最后一个catch里面，如果放在前面或者中间，任何异常都会和Exception匹配的，就会报已捕获到...异常的错误。 \n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-abouttrycatch/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","slug":"kongzheng1993-ablout_try_catch","published":1,"updated":"2019-01-26T09:37:47.570Z","photos":[],"link":"","_id":"cjwaviv6u000n41xn3dbrs6hd","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;  </span><br><span class=\"line\">public class ExceptionTryCatchTest &#123;  </span><br><span class=\"line\">    public void doSomething() throws IOException&#123;  </span><br><span class=\"line\">        System.out.println(&quot;do somthing&quot;);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    public static void main(String[] args)&#123;  </span><br><span class=\"line\">        ExceptionTryCatchTest etct = new ExceptionTryCatchTest();  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            etct.doSomething();  </span><br><span class=\"line\">        &#125; catch (Exception e) &#123;                </span><br><span class=\"line\">        &#125; catch (IOException e) &#123;                </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上并不能通过编译。<br>因为编译的时候会报错:已捕捉到异常 java.io.IOException。  catch(IOException e)这句有错误。<br>分析：对于try..catch捕获异常的形式来说，对于异常的捕获，可以有多个catch。对于try里面发生的异常，他会根据发生的异常和catch里面的进行匹配(怎么匹配，按照catch块从上往下匹配)，当它匹配某一个catch块的时候，他就直接进入到这个catch块里面去了，后面在再有catch块的话，它不做任何处理，直接跳过去，全部忽略掉。如果有finally的话进入到finally里面继续执行。换句话说，如果有匹配的catch，它就会忽略掉这个catch后面所有的catch。对我们这个方法来说，抛出的是IOException，当执行etct.doSomething();时，可能会抛出IOException，一但抛出IOException，它首先进入到catch (Exception e) {}里面，先和Exception匹配，由于IOException extends Exception,根据多态的原则，IOException是匹配Exception的，所以程序就会进入到catch (Exception e) {}里面，进入到第一个catch后，后面的catch都不会执行了，所以catch (IOException e) {}永远都执行不到，就给我们报出了前面的错误:已捕捉到异常 java.io.IOException。 </p>\n<h4 id=\"【总结】\"><a href=\"#【总结】\" class=\"headerlink\" title=\"【总结】\"></a>【总结】</h4><p>在写异常处理的时候，一定要把异常范围小的放在前面，范围大的放在后面，Exception这个异常的根类一定要放在最后一个catch里面，如果放在前面或者中间，任何异常都会和Exception匹配的，就会报已捕获到…异常的错误。 </p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-abouttrycatch/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;  </span><br><span class=\"line\">public class ExceptionTryCatchTest &#123;  </span><br><span class=\"line\">    public void doSomething() throws IOException&#123;  </span><br><span class=\"line\">        System.out.println(&quot;do somthing&quot;);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    public static void main(String[] args)&#123;  </span><br><span class=\"line\">        ExceptionTryCatchTest etct = new ExceptionTryCatchTest();  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            etct.doSomething();  </span><br><span class=\"line\">        &#125; catch (Exception e) &#123;                </span><br><span class=\"line\">        &#125; catch (IOException e) &#123;                </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上并不能通过编译。<br>因为编译的时候会报错:已捕捉到异常 java.io.IOException。  catch(IOException e)这句有错误。<br>分析：对于try..catch捕获异常的形式来说，对于异常的捕获，可以有多个catch。对于try里面发生的异常，他会根据发生的异常和catch里面的进行匹配(怎么匹配，按照catch块从上往下匹配)，当它匹配某一个catch块的时候，他就直接进入到这个catch块里面去了，后面在再有catch块的话，它不做任何处理，直接跳过去，全部忽略掉。如果有finally的话进入到finally里面继续执行。换句话说，如果有匹配的catch，它就会忽略掉这个catch后面所有的catch。对我们这个方法来说，抛出的是IOException，当执行etct.doSomething();时，可能会抛出IOException，一但抛出IOException，它首先进入到catch (Exception e) {}里面，先和Exception匹配，由于IOException extends Exception,根据多态的原则，IOException是匹配Exception的，所以程序就会进入到catch (Exception e) {}里面，进入到第一个catch后，后面的catch都不会执行了，所以catch (IOException e) {}永远都执行不到，就给我们报出了前面的错误:已捕捉到异常 java.io.IOException。 </p>\n<h4 id=\"【总结】\"><a href=\"#【总结】\" class=\"headerlink\" title=\"【总结】\"></a>【总结】</h4><p>在写异常处理的时候，一定要把异常范围小的放在前面，范围大的放在后面，Exception这个异常的根类一定要放在最后一个catch里面，如果放在前面或者中间，任何异常都会和Exception匹配的，就会报已捕获到…异常的错误。 </p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-abouttrycatch/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"sql学习笔记","date":"2016-06-09T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## sql学习笔记\n\n### 关于DISTINCT\n\nDISTINCT可以去除重复的内容，但是，如果查询的数据是多个列，那么只有在这多个列的数据都相同的时候才可以消除。如果一个列重复，另一个列不重复，那么这一行也不会被消除。\n\n### 四则运算可以作为SELECT参数\n\n### 给计算结果设计别名\n\nSELECT empno，ename，sal*12 income FROM emp;\n\n这里打印出来的结果中sal*12那一列的列名就是income。\n\n### 常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\n\n### 两列内容的连接使用||\n\nselect empno||ename from emp;\n\n这里的使用方法很像java里面的“+”：\n\n<font face=\"黑体\">例如：</font>\n\n\tselect '雇员编号：'|| empno ||',姓名：'|| ename ||',收入：'|| income from student;\n\n\n### BETWEEN 最小值 AND 最大值;\n\n<font color=\"red\">这里一定要注意是闭区间！！！</font>\n\n### 空判断 IS NULL和IS NOT NULL\n\n### IN和NOT IN\n\nBETWEEN AND 给了一个大的可选范围，IN也用来规定一个范围，不过用起来更灵活。\n\n<font face=\"黑体\">例如：</font>\n\nSELECT * FROM emp WHERE empno=1 OR empno=2 OR empno=3;\n这句代码使用IN来做就是：\nSELECT * FROM emp WHERE empno IN (1,2,3);\n\n指定值查找使用IN会比较方便\n\n\n### 关于NOT IN和NULL的问题\n\n使用NOT IN进行范围判断的时候，如果范围里面包括NULL，那么就不会有任何结果。\n\n<font face=\"黑体\">例如：</font>\nSELECT * FROM emp WHERE empno NOT IN(1,2,3,NULL);\n\n之所以使用WHERE，就是要抓取有用信息，没有限制，显示所有行，对于大型数据库根本没有意义。\n\n使用NOT IN的目的是为了查询部分数据行，但是如果有了NULL（某些数据永远不可能为NULL）,就成了查询全部了。\n\n\n\n为什么sql里面NOT IN后面的子查询如果有记录为NULL的，主查询就查不到记录？？？原因很简单：\nSELECT *\nFROM dbo.TableA AS a\nWHERE a.id NOT IN ( 2, NULL )\n\n等同于：\nSELECT *\nFROM Table_A AS a\nWHERE a.id <> 2\nAND a.ID <> NULL\n\n\n\n<font color=\"red\">于NULL值不能参与比较运算符，导致条件不成立，查询不出来数据。</font>\n\n\n### LIKE\n\n\"_\":匹配任意以为字符；\n\"%\":匹配任意的零位，多位字符。\n\n<font face=\"黑体\">注意：</font>\nLIKE 可以应用在各种数据类型上，不一定是字符串；\nLIKE 如果不设置关键字，那么表示查询全部信息，就像LIKE '%%'。虽然这样可以查询全部数据，但是与不使用WHERE子句相比，不使用WHERE子句的效率更高。\n\n### ORDER BY\n\n排序方式有两种ASC(默认)和DESC。\n\n\n### COUNT(),MAX(),MIN(),SUM(),AVG()\n\ncount是统计个数，里面可以跟上<font color=\"red\">distinct</font>字段。\nmax和min也可以用于<font color=\"red\">日期</font>类型的数据。\n\n<font face=\"黑体\">注意：</font>\n\nCOUNT(*),COUNT(字段),COUNT(DISTINCT 字段)的区别？\n\n* COUNT(*):明确的返回表中的数据个数，是最准确的；\n* COUNT(字段):不统计为null的数据个数，如果某一列的数据不可能为null，那么结果与COUNT(*)相同；\n* COUNT(DISTINCT 字段):统计消除掉重复数据后的数据个数。\n\n\n\n### GROUP BY\n\n```\n\nSELECT job,COUNT(empno),AVG(sal)\nFROM emp\nGROUP BY job;\n\n```\n\n\n```\n\nSELECT DEPTNO,COUNT(empno),MAX(SAL),MIN(SAL)\nFROM EMP\nGROUP BY DEPTNO;\n\n\n```\n* 没有编写group by子句的时候（全表作为一组），那么select子句之中只允许出现统计函数，不允许出现其他字段。\n例如：\nselect count(empno),ename from emp;\n这里查询结果里面第一列已经显示了empno的数目了，这肯定只有一行，所以第二列不可能列出很多行ename的数据了，因为这不符合数据库的表达形式。\n\n\n* 在使用group by子句分组的时候，select子句之中只允许出现分组字段与统计函数，其他字段不允许出现。\n\n正确代码：\n```\nselect job,count(empno) from emp group by job;\n```\n\n错误代码：\n```\nselect job,count(empno),ename from group by job; \n```\n\n* 统计函数允许嵌套查询，但是嵌套后的统计查询中，select子句中不允许再出现任何的字段，包括分组字段，只能够使用嵌套的统计函数。\n\n正确代码：\n\n```\n\nSELECT deptno,AVG(sal)\nFROM emp \nGROUP BY deptno;\n\n```\n\n错误代码：\n\n```\nSELECT deptno,MAX(AVG(sal))\nFROM emp\nGROUP BY deptno;\n```\n这里已经有了嵌套的统计函数，就不能再有deptno了。\n\n\n修改：\n\n```\nSELECT MAX(AVG(sal))\nFROM emp\nGROUP BY deptno;\n\n```\n\n### 多表查询\n\n<font face=\"黑体\">示例：</font>\n\n查询出每个部门的名称、人数、平均工资：\n\n分析：\n1.确定要使用的表：\n（1）dept:部门名称\n（2）emp:统计出人数，平均工资\n2.确定已知的关联字段：\n雇员与部门：emp.deptno=dept.deptno\n\n\n#### 第一步：查询每个雇员的编号，部门名称，工资\n```\n\nSELECT e.empno,d.dnama,e.sal\nFROM emp e,dept d\nWHERE e.deptno=d.deptno;\n\n```\n\n#### 第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\n\n```\n\nSELECT e.empno,d.dnama,e.sal\nFROM emp e,dept d\nWHERE e.deptno=d.deptno\nGROUP BY d.name;\n\n```\n\n#### 第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\n\n```\n\nSELECT e.empno,d.dnama,e.sal\nFROM emp e,dept d\nWHERE e.deptno(+)=d.deptno\nGROUP BY d.name;\n\n```\n\n#### 查询成功。\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sql/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","source":"_posts/2016-07-13-kongzheng1993-oracle.md","raw":"---\nlayout: post\ntitle: \"sql学习笔记\"\ndate: 2016-06-10\nexcerpt: \"love you forever\"\ntags: [sql,select,distinct,group by,order by]\ncomments: true\n---\n\n\n## sql学习笔记\n\n### 关于DISTINCT\n\nDISTINCT可以去除重复的内容，但是，如果查询的数据是多个列，那么只有在这多个列的数据都相同的时候才可以消除。如果一个列重复，另一个列不重复，那么这一行也不会被消除。\n\n### 四则运算可以作为SELECT参数\n\n### 给计算结果设计别名\n\nSELECT empno，ename，sal*12 income FROM emp;\n\n这里打印出来的结果中sal*12那一列的列名就是income。\n\n### 常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\n\n### 两列内容的连接使用||\n\nselect empno||ename from emp;\n\n这里的使用方法很像java里面的“+”：\n\n<font face=\"黑体\">例如：</font>\n\n\tselect '雇员编号：'|| empno ||',姓名：'|| ename ||',收入：'|| income from student;\n\n\n### BETWEEN 最小值 AND 最大值;\n\n<font color=\"red\">这里一定要注意是闭区间！！！</font>\n\n### 空判断 IS NULL和IS NOT NULL\n\n### IN和NOT IN\n\nBETWEEN AND 给了一个大的可选范围，IN也用来规定一个范围，不过用起来更灵活。\n\n<font face=\"黑体\">例如：</font>\n\nSELECT * FROM emp WHERE empno=1 OR empno=2 OR empno=3;\n这句代码使用IN来做就是：\nSELECT * FROM emp WHERE empno IN (1,2,3);\n\n指定值查找使用IN会比较方便\n\n\n### 关于NOT IN和NULL的问题\n\n使用NOT IN进行范围判断的时候，如果范围里面包括NULL，那么就不会有任何结果。\n\n<font face=\"黑体\">例如：</font>\nSELECT * FROM emp WHERE empno NOT IN(1,2,3,NULL);\n\n之所以使用WHERE，就是要抓取有用信息，没有限制，显示所有行，对于大型数据库根本没有意义。\n\n使用NOT IN的目的是为了查询部分数据行，但是如果有了NULL（某些数据永远不可能为NULL）,就成了查询全部了。\n\n\n\n为什么sql里面NOT IN后面的子查询如果有记录为NULL的，主查询就查不到记录？？？原因很简单：\nSELECT *\nFROM dbo.TableA AS a\nWHERE a.id NOT IN ( 2, NULL )\n\n等同于：\nSELECT *\nFROM Table_A AS a\nWHERE a.id <> 2\nAND a.ID <> NULL\n\n\n\n<font color=\"red\">于NULL值不能参与比较运算符，导致条件不成立，查询不出来数据。</font>\n\n\n### LIKE\n\n\"_\":匹配任意以为字符；\n\"%\":匹配任意的零位，多位字符。\n\n<font face=\"黑体\">注意：</font>\nLIKE 可以应用在各种数据类型上，不一定是字符串；\nLIKE 如果不设置关键字，那么表示查询全部信息，就像LIKE '%%'。虽然这样可以查询全部数据，但是与不使用WHERE子句相比，不使用WHERE子句的效率更高。\n\n### ORDER BY\n\n排序方式有两种ASC(默认)和DESC。\n\n\n### COUNT(),MAX(),MIN(),SUM(),AVG()\n\ncount是统计个数，里面可以跟上<font color=\"red\">distinct</font>字段。\nmax和min也可以用于<font color=\"red\">日期</font>类型的数据。\n\n<font face=\"黑体\">注意：</font>\n\nCOUNT(*),COUNT(字段),COUNT(DISTINCT 字段)的区别？\n\n* COUNT(*):明确的返回表中的数据个数，是最准确的；\n* COUNT(字段):不统计为null的数据个数，如果某一列的数据不可能为null，那么结果与COUNT(*)相同；\n* COUNT(DISTINCT 字段):统计消除掉重复数据后的数据个数。\n\n\n\n### GROUP BY\n\n```\n\nSELECT job,COUNT(empno),AVG(sal)\nFROM emp\nGROUP BY job;\n\n```\n\n\n```\n\nSELECT DEPTNO,COUNT(empno),MAX(SAL),MIN(SAL)\nFROM EMP\nGROUP BY DEPTNO;\n\n\n```\n* 没有编写group by子句的时候（全表作为一组），那么select子句之中只允许出现统计函数，不允许出现其他字段。\n例如：\nselect count(empno),ename from emp;\n这里查询结果里面第一列已经显示了empno的数目了，这肯定只有一行，所以第二列不可能列出很多行ename的数据了，因为这不符合数据库的表达形式。\n\n\n* 在使用group by子句分组的时候，select子句之中只允许出现分组字段与统计函数，其他字段不允许出现。\n\n正确代码：\n```\nselect job,count(empno) from emp group by job;\n```\n\n错误代码：\n```\nselect job,count(empno),ename from group by job; \n```\n\n* 统计函数允许嵌套查询，但是嵌套后的统计查询中，select子句中不允许再出现任何的字段，包括分组字段，只能够使用嵌套的统计函数。\n\n正确代码：\n\n```\n\nSELECT deptno,AVG(sal)\nFROM emp \nGROUP BY deptno;\n\n```\n\n错误代码：\n\n```\nSELECT deptno,MAX(AVG(sal))\nFROM emp\nGROUP BY deptno;\n```\n这里已经有了嵌套的统计函数，就不能再有deptno了。\n\n\n修改：\n\n```\nSELECT MAX(AVG(sal))\nFROM emp\nGROUP BY deptno;\n\n```\n\n### 多表查询\n\n<font face=\"黑体\">示例：</font>\n\n查询出每个部门的名称、人数、平均工资：\n\n分析：\n1.确定要使用的表：\n（1）dept:部门名称\n（2）emp:统计出人数，平均工资\n2.确定已知的关联字段：\n雇员与部门：emp.deptno=dept.deptno\n\n\n#### 第一步：查询每个雇员的编号，部门名称，工资\n```\n\nSELECT e.empno,d.dnama,e.sal\nFROM emp e,dept d\nWHERE e.deptno=d.deptno;\n\n```\n\n#### 第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\n\n```\n\nSELECT e.empno,d.dnama,e.sal\nFROM emp e,dept d\nWHERE e.deptno=d.deptno\nGROUP BY d.name;\n\n```\n\n#### 第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\n\n```\n\nSELECT e.empno,d.dnama,e.sal\nFROM emp e,dept d\nWHERE e.deptno(+)=d.deptno\nGROUP BY d.name;\n\n```\n\n#### 查询成功。\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sql/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","slug":"kongzheng1993-oracle","published":1,"updated":"2019-01-26T09:37:47.570Z","photos":[],"link":"","_id":"cjwaviv6w000q41xnoez29ldl","content":"<h2 id=\"sql学习笔记\"><a href=\"#sql学习笔记\" class=\"headerlink\" title=\"sql学习笔记\"></a>sql学习笔记</h2><h3 id=\"关于DISTINCT\"><a href=\"#关于DISTINCT\" class=\"headerlink\" title=\"关于DISTINCT\"></a>关于DISTINCT</h3><p>DISTINCT可以去除重复的内容，但是，如果查询的数据是多个列，那么只有在这多个列的数据都相同的时候才可以消除。如果一个列重复，另一个列不重复，那么这一行也不会被消除。</p>\n<h3 id=\"四则运算可以作为SELECT参数\"><a href=\"#四则运算可以作为SELECT参数\" class=\"headerlink\" title=\"四则运算可以作为SELECT参数\"></a>四则运算可以作为SELECT参数</h3><h3 id=\"给计算结果设计别名\"><a href=\"#给计算结果设计别名\" class=\"headerlink\" title=\"给计算结果设计别名\"></a>给计算结果设计别名</h3><p>SELECT empno，ename，sal*12 income FROM emp;</p>\n<p>这里打印出来的结果中sal*12那一列的列名就是income。</p>\n<h3 id=\"常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\"><a href=\"#常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\" class=\"headerlink\" title=\"常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\"></a>常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。</h3><h3 id=\"两列内容的连接使用\"><a href=\"#两列内容的连接使用\" class=\"headerlink\" title=\"两列内容的连接使用||\"></a>两列内容的连接使用||</h3><p>select empno||ename from emp;</p>\n<p>这里的使用方法很像java里面的“+”：</p>\n<p><font face=\"黑体\">例如：</font></p>\n<pre><code>select &apos;雇员编号：&apos;|| empno ||&apos;,姓名：&apos;|| ename ||&apos;,收入：&apos;|| income from student;</code></pre><h3 id=\"BETWEEN-最小值-AND-最大值\"><a href=\"#BETWEEN-最小值-AND-最大值\" class=\"headerlink\" title=\"BETWEEN 最小值 AND 最大值;\"></a>BETWEEN 最小值 AND 最大值;</h3><p><font color=\"red\">这里一定要注意是闭区间！！！</font></p>\n<h3 id=\"空判断-IS-NULL和IS-NOT-NULL\"><a href=\"#空判断-IS-NULL和IS-NOT-NULL\" class=\"headerlink\" title=\"空判断 IS NULL和IS NOT NULL\"></a>空判断 IS NULL和IS NOT NULL</h3><h3 id=\"IN和NOT-IN\"><a href=\"#IN和NOT-IN\" class=\"headerlink\" title=\"IN和NOT IN\"></a>IN和NOT IN</h3><p>BETWEEN AND 给了一个大的可选范围，IN也用来规定一个范围，不过用起来更灵活。</p>\n<p><font face=\"黑体\">例如：</font></p>\n<p>SELECT * FROM emp WHERE empno=1 OR empno=2 OR empno=3;<br>这句代码使用IN来做就是：<br>SELECT * FROM emp WHERE empno IN (1,2,3);</p>\n<p>指定值查找使用IN会比较方便</p>\n<h3 id=\"关于NOT-IN和NULL的问题\"><a href=\"#关于NOT-IN和NULL的问题\" class=\"headerlink\" title=\"关于NOT IN和NULL的问题\"></a>关于NOT IN和NULL的问题</h3><p>使用NOT IN进行范围判断的时候，如果范围里面包括NULL，那么就不会有任何结果。</p>\n<p><font face=\"黑体\">例如：</font><br>SELECT * FROM emp WHERE empno NOT IN(1,2,3,NULL);</p>\n<p>之所以使用WHERE，就是要抓取有用信息，没有限制，显示所有行，对于大型数据库根本没有意义。</p>\n<p>使用NOT IN的目的是为了查询部分数据行，但是如果有了NULL（某些数据永远不可能为NULL）,就成了查询全部了。</p>\n<p>为什么sql里面NOT IN后面的子查询如果有记录为NULL的，主查询就查不到记录？？？原因很简单：<br>SELECT *\nFROM dbo.TableA AS a<br>WHERE a.id NOT IN ( 2, NULL )</p>\n<p>等同于：<br>SELECT *\nFROM Table_A AS a<br>WHERE a.id &lt;&gt; 2<br>AND a.ID &lt;&gt; NULL</p>\n<p><font color=\"red\">于NULL值不能参与比较运算符，导致条件不成立，查询不出来数据。</font></p>\n<h3 id=\"LIKE\"><a href=\"#LIKE\" class=\"headerlink\" title=\"LIKE\"></a>LIKE</h3><p>“_”:匹配任意以为字符；<br>“%”:匹配任意的零位，多位字符。</p>\n<p><font face=\"黑体\">注意：</font><br>LIKE 可以应用在各种数据类型上，不一定是字符串；<br>LIKE 如果不设置关键字，那么表示查询全部信息，就像LIKE ‘%%’。虽然这样可以查询全部数据，但是与不使用WHERE子句相比，不使用WHERE子句的效率更高。</p>\n<h3 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h3><p>排序方式有两种ASC(默认)和DESC。</p>\n<h3 id=\"COUNT-MAX-MIN-SUM-AVG\"><a href=\"#COUNT-MAX-MIN-SUM-AVG\" class=\"headerlink\" title=\"COUNT(),MAX(),MIN(),SUM(),AVG()\"></a>COUNT(),MAX(),MIN(),SUM(),AVG()</h3><p>count是统计个数，里面可以跟上<font color=\"red\">distinct</font>字段。<br>max和min也可以用于<font color=\"red\">日期</font>类型的数据。</p>\n<p><font face=\"黑体\">注意：</font></p>\n<p>COUNT(*),COUNT(字段),COUNT(DISTINCT 字段)的区别？</p>\n<ul>\n<li>COUNT(*):明确的返回表中的数据个数，是最准确的；</li>\n<li>COUNT(字段):不统计为null的数据个数，如果某一列的数据不可能为null，那么结果与COUNT(*)相同；</li>\n<li>COUNT(DISTINCT 字段):统计消除掉重复数据后的数据个数。</li>\n</ul>\n<h3 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT job,COUNT(empno),AVG(sal)</span><br><span class=\"line\">FROM emp</span><br><span class=\"line\">GROUP BY job;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT DEPTNO,COUNT(empno),MAX(SAL),MIN(SAL)</span><br><span class=\"line\">FROM EMP</span><br><span class=\"line\">GROUP BY DEPTNO;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有编写group by子句的时候（全表作为一组），那么select子句之中只允许出现统计函数，不允许出现其他字段。<br>例如：<br>select count(empno),ename from emp;<br>这里查询结果里面第一列已经显示了empno的数目了，这肯定只有一行，所以第二列不可能列出很多行ename的数据了，因为这不符合数据库的表达形式。</li>\n</ul>\n<ul>\n<li>在使用group by子句分组的时候，select子句之中只允许出现分组字段与统计函数，其他字段不允许出现。</li>\n</ul>\n<p>正确代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select job,count(empno) from emp group by job;</span><br></pre></td></tr></table></figure>\n\n<p>错误代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select job,count(empno),ename from group by job;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>统计函数允许嵌套查询，但是嵌套后的统计查询中，select子句中不允许再出现任何的字段，包括分组字段，只能够使用嵌套的统计函数。</li>\n</ul>\n<p>正确代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT deptno,AVG(sal)</span><br><span class=\"line\">FROM emp </span><br><span class=\"line\">GROUP BY deptno;</span><br></pre></td></tr></table></figure>\n\n<p>错误代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT deptno,MAX(AVG(sal))</span><br><span class=\"line\">FROM emp</span><br><span class=\"line\">GROUP BY deptno;</span><br></pre></td></tr></table></figure>\n\n<p>这里已经有了嵌套的统计函数，就不能再有deptno了。</p>\n<p>修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT MAX(AVG(sal))</span><br><span class=\"line\">FROM emp</span><br><span class=\"line\">GROUP BY deptno;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><p><font face=\"黑体\">示例：</font></p>\n<p>查询出每个部门的名称、人数、平均工资：</p>\n<p>分析：<br>1.确定要使用的表：<br>（1）dept:部门名称<br>（2）emp:统计出人数，平均工资<br>2.确定已知的关联字段：<br>雇员与部门：emp.deptno=dept.deptno</p>\n<h4 id=\"第一步：查询每个雇员的编号，部门名称，工资\"><a href=\"#第一步：查询每个雇员的编号，部门名称，工资\" class=\"headerlink\" title=\"第一步：查询每个雇员的编号，部门名称，工资\"></a>第一步：查询每个雇员的编号，部门名称，工资</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT e.empno,d.dnama,e.sal</span><br><span class=\"line\">FROM emp e,dept d</span><br><span class=\"line\">WHERE e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\"><a href=\"#第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\" class=\"headerlink\" title=\"第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\"></a>第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT e.empno,d.dnama,e.sal</span><br><span class=\"line\">FROM emp e,dept d</span><br><span class=\"line\">WHERE e.deptno=d.deptno</span><br><span class=\"line\">GROUP BY d.name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\"><a href=\"#第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\" class=\"headerlink\" title=\"第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\"></a>第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT e.empno,d.dnama,e.sal</span><br><span class=\"line\">FROM emp e,dept d</span><br><span class=\"line\">WHERE e.deptno(+)=d.deptno</span><br><span class=\"line\">GROUP BY d.name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询成功。\"><a href=\"#查询成功。\" class=\"headerlink\" title=\"查询成功。\"></a>查询成功。</h4><html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sql/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h2 id=\"sql学习笔记\"><a href=\"#sql学习笔记\" class=\"headerlink\" title=\"sql学习笔记\"></a>sql学习笔记</h2><h3 id=\"关于DISTINCT\"><a href=\"#关于DISTINCT\" class=\"headerlink\" title=\"关于DISTINCT\"></a>关于DISTINCT</h3><p>DISTINCT可以去除重复的内容，但是，如果查询的数据是多个列，那么只有在这多个列的数据都相同的时候才可以消除。如果一个列重复，另一个列不重复，那么这一行也不会被消除。</p>\n<h3 id=\"四则运算可以作为SELECT参数\"><a href=\"#四则运算可以作为SELECT参数\" class=\"headerlink\" title=\"四则运算可以作为SELECT参数\"></a>四则运算可以作为SELECT参数</h3><h3 id=\"给计算结果设计别名\"><a href=\"#给计算结果设计别名\" class=\"headerlink\" title=\"给计算结果设计别名\"></a>给计算结果设计别名</h3><p>SELECT empno，ename，sal*12 income FROM emp;</p>\n<p>这里打印出来的结果中sal*12那一列的列名就是income。</p>\n<h3 id=\"常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\"><a href=\"#常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\" class=\"headerlink\" title=\"常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。\"></a>常量如果是字符串要使用单引号而不是双引号，如果是数字不用加引号，如果是日期，就要按照日期格式编写。</h3><h3 id=\"两列内容的连接使用\"><a href=\"#两列内容的连接使用\" class=\"headerlink\" title=\"两列内容的连接使用||\"></a>两列内容的连接使用||</h3><p>select empno||ename from emp;</p>\n<p>这里的使用方法很像java里面的“+”：</p>\n<p><font face=\"黑体\">例如：</font></p>\n<pre><code>select &apos;雇员编号：&apos;|| empno ||&apos;,姓名：&apos;|| ename ||&apos;,收入：&apos;|| income from student;</code></pre><h3 id=\"BETWEEN-最小值-AND-最大值\"><a href=\"#BETWEEN-最小值-AND-最大值\" class=\"headerlink\" title=\"BETWEEN 最小值 AND 最大值;\"></a>BETWEEN 最小值 AND 最大值;</h3><p><font color=\"red\">这里一定要注意是闭区间！！！</font></p>\n<h3 id=\"空判断-IS-NULL和IS-NOT-NULL\"><a href=\"#空判断-IS-NULL和IS-NOT-NULL\" class=\"headerlink\" title=\"空判断 IS NULL和IS NOT NULL\"></a>空判断 IS NULL和IS NOT NULL</h3><h3 id=\"IN和NOT-IN\"><a href=\"#IN和NOT-IN\" class=\"headerlink\" title=\"IN和NOT IN\"></a>IN和NOT IN</h3><p>BETWEEN AND 给了一个大的可选范围，IN也用来规定一个范围，不过用起来更灵活。</p>\n<p><font face=\"黑体\">例如：</font></p>\n<p>SELECT * FROM emp WHERE empno=1 OR empno=2 OR empno=3;<br>这句代码使用IN来做就是：<br>SELECT * FROM emp WHERE empno IN (1,2,3);</p>\n<p>指定值查找使用IN会比较方便</p>\n<h3 id=\"关于NOT-IN和NULL的问题\"><a href=\"#关于NOT-IN和NULL的问题\" class=\"headerlink\" title=\"关于NOT IN和NULL的问题\"></a>关于NOT IN和NULL的问题</h3><p>使用NOT IN进行范围判断的时候，如果范围里面包括NULL，那么就不会有任何结果。</p>\n<p><font face=\"黑体\">例如：</font><br>SELECT * FROM emp WHERE empno NOT IN(1,2,3,NULL);</p>\n<p>之所以使用WHERE，就是要抓取有用信息，没有限制，显示所有行，对于大型数据库根本没有意义。</p>\n<p>使用NOT IN的目的是为了查询部分数据行，但是如果有了NULL（某些数据永远不可能为NULL）,就成了查询全部了。</p>\n<p>为什么sql里面NOT IN后面的子查询如果有记录为NULL的，主查询就查不到记录？？？原因很简单：<br>SELECT *\nFROM dbo.TableA AS a<br>WHERE a.id NOT IN ( 2, NULL )</p>\n<p>等同于：<br>SELECT *\nFROM Table_A AS a<br>WHERE a.id &lt;&gt; 2<br>AND a.ID &lt;&gt; NULL</p>\n<p><font color=\"red\">于NULL值不能参与比较运算符，导致条件不成立，查询不出来数据。</font></p>\n<h3 id=\"LIKE\"><a href=\"#LIKE\" class=\"headerlink\" title=\"LIKE\"></a>LIKE</h3><p>“_”:匹配任意以为字符；<br>“%”:匹配任意的零位，多位字符。</p>\n<p><font face=\"黑体\">注意：</font><br>LIKE 可以应用在各种数据类型上，不一定是字符串；<br>LIKE 如果不设置关键字，那么表示查询全部信息，就像LIKE ‘%%’。虽然这样可以查询全部数据，但是与不使用WHERE子句相比，不使用WHERE子句的效率更高。</p>\n<h3 id=\"ORDER-BY\"><a href=\"#ORDER-BY\" class=\"headerlink\" title=\"ORDER BY\"></a>ORDER BY</h3><p>排序方式有两种ASC(默认)和DESC。</p>\n<h3 id=\"COUNT-MAX-MIN-SUM-AVG\"><a href=\"#COUNT-MAX-MIN-SUM-AVG\" class=\"headerlink\" title=\"COUNT(),MAX(),MIN(),SUM(),AVG()\"></a>COUNT(),MAX(),MIN(),SUM(),AVG()</h3><p>count是统计个数，里面可以跟上<font color=\"red\">distinct</font>字段。<br>max和min也可以用于<font color=\"red\">日期</font>类型的数据。</p>\n<p><font face=\"黑体\">注意：</font></p>\n<p>COUNT(*),COUNT(字段),COUNT(DISTINCT 字段)的区别？</p>\n<ul>\n<li>COUNT(*):明确的返回表中的数据个数，是最准确的；</li>\n<li>COUNT(字段):不统计为null的数据个数，如果某一列的数据不可能为null，那么结果与COUNT(*)相同；</li>\n<li>COUNT(DISTINCT 字段):统计消除掉重复数据后的数据个数。</li>\n</ul>\n<h3 id=\"GROUP-BY\"><a href=\"#GROUP-BY\" class=\"headerlink\" title=\"GROUP BY\"></a>GROUP BY</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT job,COUNT(empno),AVG(sal)</span><br><span class=\"line\">FROM emp</span><br><span class=\"line\">GROUP BY job;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT DEPTNO,COUNT(empno),MAX(SAL),MIN(SAL)</span><br><span class=\"line\">FROM EMP</span><br><span class=\"line\">GROUP BY DEPTNO;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有编写group by子句的时候（全表作为一组），那么select子句之中只允许出现统计函数，不允许出现其他字段。<br>例如：<br>select count(empno),ename from emp;<br>这里查询结果里面第一列已经显示了empno的数目了，这肯定只有一行，所以第二列不可能列出很多行ename的数据了，因为这不符合数据库的表达形式。</li>\n</ul>\n<ul>\n<li>在使用group by子句分组的时候，select子句之中只允许出现分组字段与统计函数，其他字段不允许出现。</li>\n</ul>\n<p>正确代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select job,count(empno) from emp group by job;</span><br></pre></td></tr></table></figure>\n\n<p>错误代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select job,count(empno),ename from group by job;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>统计函数允许嵌套查询，但是嵌套后的统计查询中，select子句中不允许再出现任何的字段，包括分组字段，只能够使用嵌套的统计函数。</li>\n</ul>\n<p>正确代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT deptno,AVG(sal)</span><br><span class=\"line\">FROM emp </span><br><span class=\"line\">GROUP BY deptno;</span><br></pre></td></tr></table></figure>\n\n<p>错误代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT deptno,MAX(AVG(sal))</span><br><span class=\"line\">FROM emp</span><br><span class=\"line\">GROUP BY deptno;</span><br></pre></td></tr></table></figure>\n\n<p>这里已经有了嵌套的统计函数，就不能再有deptno了。</p>\n<p>修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT MAX(AVG(sal))</span><br><span class=\"line\">FROM emp</span><br><span class=\"line\">GROUP BY deptno;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h3><p><font face=\"黑体\">示例：</font></p>\n<p>查询出每个部门的名称、人数、平均工资：</p>\n<p>分析：<br>1.确定要使用的表：<br>（1）dept:部门名称<br>（2）emp:统计出人数，平均工资<br>2.确定已知的关联字段：<br>雇员与部门：emp.deptno=dept.deptno</p>\n<h4 id=\"第一步：查询每个雇员的编号，部门名称，工资\"><a href=\"#第一步：查询每个雇员的编号，部门名称，工资\" class=\"headerlink\" title=\"第一步：查询每个雇员的编号，部门名称，工资\"></a>第一步：查询每个雇员的编号，部门名称，工资</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT e.empno,d.dnama,e.sal</span><br><span class=\"line\">FROM emp e,dept d</span><br><span class=\"line\">WHERE e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\"><a href=\"#第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\" class=\"headerlink\" title=\"第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）\"></a>第二步：通过以上的查询可以发现dname字段上出现了重复查询，有重复数据才可以分组。另外我们的查询明确要求是根据部门名称分组，现在对查询结果分组。（上面查询出来的结果可以看作是一张临时数据表）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT e.empno,d.dnama,e.sal</span><br><span class=\"line\">FROM emp e,dept d</span><br><span class=\"line\">WHERE e.deptno=d.deptno</span><br><span class=\"line\">GROUP BY d.name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\"><a href=\"#第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\" class=\"headerlink\" title=\"第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制\"></a>第三步：部门一共有三个，但是我们现在只出现了三个，加入外连接控制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT e.empno,d.dnama,e.sal</span><br><span class=\"line\">FROM emp e,dept d</span><br><span class=\"line\">WHERE e.deptno(+)=d.deptno</span><br><span class=\"line\">GROUP BY d.name;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询成功。\"><a href=\"#查询成功。\" class=\"headerlink\" title=\"查询成功。\"></a>查询成功。</h4><html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sql/\" data-title=\"lover\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"Mysql to Oracle","date":"2016-07-18T16:00:00.000Z","excerpt":"","project":true,"comments":1,"_content":"\n通过这次实验，我了解了连接oracle和mysql的区别，详情请访问我的[github](https://github.com/kongzheng1993/MysqlToOracle)\n\n这里我只谈在编写中遇到的问题：\n\n#### 连接方法：\n+ Mysql\n\n```\n\npackage com.isoft.mto.util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\npublic class Mcon {\t\n\tConnection con=null;\t\n\tpublic void getConnection(){\t\t\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tcon=DriverManager.getConnection(\"jdbc:mysql://127.0.0.1:3306/sakila\",\"root\",\"root\");\t\t\t\t\t\t\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t}\n\tpublic Connection getCon(){\n\t\treturn con;\n\t}\n\tpublic void close(Connection con,PreparedStatement pre,ResultSet re){\n\t\tif(re!=null){\n\t\t\ttry {\n\t\t\t\tre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\t\t\t\n\t\t}if(pre!=null){\n\t\t\ttry {\n\t\t\t\tpre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}if(con!=null){\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\t\n\t}\t\n}\n\n```\n\n+ Oracle\n\n```\n\npackage com.isoft.mto.util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\npublic class Ocon {\n\tprivate Connection con=null;\t\t\n\tpublic Connection getCon(){\n\t\treturn con;\n\t}\n\tpublic void close(Connection con,PreparedStatement pre,ResultSet re){\n\t\tif(re!=null){\n\t\t\ttry {\n\t\t\t\tre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\t\t\t\n\t\t}if(pre!=null){\n\t\t\ttry {\n\t\t\t\tpre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}if(con!=null){\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\t\t\n\t}\t\n\tpublic void getConnection(){\n\t\ttry {\n\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\t\t\t\n\t\t\tcon=DriverManager.getConnection(\"jdbc:oracle:thin:@127.0.0.1:1521:XE\",\"hr\",\"root\");\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\tSystem.out.println(\"数据库连接出错！！！\");\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\n\t}\t\n}\n\n```\n\n\n#### Mysql和Oracle在jdbc中sql语句的区别\n\n+ mysql可以传入“；”（可有可无，不影响）；\n+ oracle不可以传入“；”（在sql字符串中加上“；”会导致sql语法错误）。\n\n#### 关于两种DriverManager.getConnection();\n\n+ mysql:\"jdbc:mysql://127.0.0.1:3306/sakila\",\"root\",\"root\"\n+ oracle:\"jdbc:oracle:thin:@127.0.0.1:1521:XE\",\"hr\",\"root\"\n\n\n#### 不足\n\n这次试验数据库的信息都是已知的，并没有使用getTypeName(),getCollumName()等方法，所以有很多可以改进的地方。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","source":"_posts/2016-07-19-kongzheng1993-MysqlToOracle.md","raw":"---\nlayout: post\ntitle:  \"Mysql to Oracle\"\ndate:   2016-07-19\nexcerpt: \"实现mysql到oracle的转换\"\nproject: true\ntag:\n- oop\ncomments: true\n---\n\n通过这次实验，我了解了连接oracle和mysql的区别，详情请访问我的[github](https://github.com/kongzheng1993/MysqlToOracle)\n\n这里我只谈在编写中遇到的问题：\n\n#### 连接方法：\n+ Mysql\n\n```\n\npackage com.isoft.mto.util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\npublic class Mcon {\t\n\tConnection con=null;\t\n\tpublic void getConnection(){\t\t\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\tcon=DriverManager.getConnection(\"jdbc:mysql://127.0.0.1:3306/sakila\",\"root\",\"root\");\t\t\t\t\t\t\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t}\n\tpublic Connection getCon(){\n\t\treturn con;\n\t}\n\tpublic void close(Connection con,PreparedStatement pre,ResultSet re){\n\t\tif(re!=null){\n\t\t\ttry {\n\t\t\t\tre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\t\t\t\n\t\t}if(pre!=null){\n\t\t\ttry {\n\t\t\t\tpre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}if(con!=null){\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\t\n\t}\t\n}\n\n```\n\n+ Oracle\n\n```\n\npackage com.isoft.mto.util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\npublic class Ocon {\n\tprivate Connection con=null;\t\t\n\tpublic Connection getCon(){\n\t\treturn con;\n\t}\n\tpublic void close(Connection con,PreparedStatement pre,ResultSet re){\n\t\tif(re!=null){\n\t\t\ttry {\n\t\t\t\tre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\t\t\t\n\t\t}if(pre!=null){\n\t\t\ttry {\n\t\t\t\tpre.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}if(con!=null){\n\t\t\ttry {\n\t\t\t\tcon.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\t\t\n\t}\t\n\tpublic void getConnection(){\n\t\ttry {\n\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\t\t\t\n\t\t\tcon=DriverManager.getConnection(\"jdbc:oracle:thin:@127.0.0.1:1521:XE\",\"hr\",\"root\");\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\tSystem.out.println(\"数据库连接出错！！！\");\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\n\t}\t\n}\n\n```\n\n\n#### Mysql和Oracle在jdbc中sql语句的区别\n\n+ mysql可以传入“；”（可有可无，不影响）；\n+ oracle不可以传入“；”（在sql字符串中加上“；”会导致sql语法错误）。\n\n#### 关于两种DriverManager.getConnection();\n\n+ mysql:\"jdbc:mysql://127.0.0.1:3306/sakila\",\"root\",\"root\"\n+ oracle:\"jdbc:oracle:thin:@127.0.0.1:1521:XE\",\"hr\",\"root\"\n\n\n#### 不足\n\n这次试验数据库的信息都是已知的，并没有使用getTypeName(),getCollumName()等方法，所以有很多可以改进的地方。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","slug":"kongzheng1993-MysqlToOracle","published":1,"updated":"2019-01-26T09:37:47.570Z","photos":[],"link":"","_id":"cjwaviv6x000s41xn24fesoi5","content":"<p>通过这次实验，我了解了连接oracle和mysql的区别，详情请访问我的<a href=\"https://github.com/kongzheng1993/MysqlToOracle\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>这里我只谈在编写中遇到的问题：</p>\n<h4 id=\"连接方法：\"><a href=\"#连接方法：\" class=\"headerlink\" title=\"连接方法：\"></a>连接方法：</h4><ul>\n<li>Mysql</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.isoft.mto.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">public class Mcon &#123;\t</span><br><span class=\"line\">\tConnection con=null;\t</span><br><span class=\"line\">\tpublic void getConnection()&#123;\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t\tcon=DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/sakila&quot;,&quot;root&quot;,&quot;root&quot;);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException | SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Connection getCon()&#123;</span><br><span class=\"line\">\t\treturn con;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void close(Connection con,PreparedStatement pre,ResultSet re)&#123;</span><br><span class=\"line\">\t\tif(re!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;if(pre!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tpre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;if(con!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcon.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Oracle</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.isoft.mto.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">public class Ocon &#123;</span><br><span class=\"line\">\tprivate Connection con=null;\t\t</span><br><span class=\"line\">\tpublic Connection getCon()&#123;</span><br><span class=\"line\">\t\treturn con;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void close(Connection con,PreparedStatement pre,ResultSet re)&#123;</span><br><span class=\"line\">\t\tif(re!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;if(pre!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tpre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;if(con!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcon.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void getConnection()&#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClass.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);\t\t\t</span><br><span class=\"line\">\t\t\tcon=DriverManager.getConnection(&quot;jdbc:oracle:thin:@127.0.0.1:1521:XE&quot;,&quot;hr&quot;,&quot;root&quot;);\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;数据库连接出错！！！&quot;);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mysql和Oracle在jdbc中sql语句的区别\"><a href=\"#Mysql和Oracle在jdbc中sql语句的区别\" class=\"headerlink\" title=\"Mysql和Oracle在jdbc中sql语句的区别\"></a>Mysql和Oracle在jdbc中sql语句的区别</h4><ul>\n<li>mysql可以传入“；”（可有可无，不影响）；</li>\n<li>oracle不可以传入“；”（在sql字符串中加上“；”会导致sql语法错误）。</li>\n</ul>\n<h4 id=\"关于两种DriverManager-getConnection\"><a href=\"#关于两种DriverManager-getConnection\" class=\"headerlink\" title=\"关于两种DriverManager.getConnection();\"></a>关于两种DriverManager.getConnection();</h4><ul>\n<li>mysql:”jdbc:mysql://127.0.0.1:3306/sakila”,”root”,”root”</li>\n<li>oracle:”jdbc:oracle:thin:@127.0.0.1:1521:XE”,”hr”,”root”</li>\n</ul>\n<h4 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h4><p>这次试验数据库的信息都是已知的，并没有使用getTypeName(),getCollumName()等方法，所以有很多可以改进的地方。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<p>通过这次实验，我了解了连接oracle和mysql的区别，详情请访问我的<a href=\"https://github.com/kongzheng1993/MysqlToOracle\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<p>这里我只谈在编写中遇到的问题：</p>\n<h4 id=\"连接方法：\"><a href=\"#连接方法：\" class=\"headerlink\" title=\"连接方法：\"></a>连接方法：</h4><ul>\n<li>Mysql</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.isoft.mto.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">public class Mcon &#123;\t</span><br><span class=\"line\">\tConnection con=null;\t</span><br><span class=\"line\">\tpublic void getConnection()&#123;\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t\tcon=DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/sakila&quot;,&quot;root&quot;,&quot;root&quot;);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException | SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Connection getCon()&#123;</span><br><span class=\"line\">\t\treturn con;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void close(Connection con,PreparedStatement pre,ResultSet re)&#123;</span><br><span class=\"line\">\t\tif(re!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;if(pre!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tpre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;if(con!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcon.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Oracle</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.isoft.mto.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">public class Ocon &#123;</span><br><span class=\"line\">\tprivate Connection con=null;\t\t</span><br><span class=\"line\">\tpublic Connection getCon()&#123;</span><br><span class=\"line\">\t\treturn con;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void close(Connection con,PreparedStatement pre,ResultSet re)&#123;</span><br><span class=\"line\">\t\tif(re!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t&#125;if(pre!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tpre.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;if(con!=null)&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcon.close();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tpublic void getConnection()&#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClass.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);\t\t\t</span><br><span class=\"line\">\t\t\tcon=DriverManager.getConnection(&quot;jdbc:oracle:thin:@127.0.0.1:1521:XE&quot;,&quot;hr&quot;,&quot;root&quot;);\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;数据库连接出错！！！&quot;);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t\t\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mysql和Oracle在jdbc中sql语句的区别\"><a href=\"#Mysql和Oracle在jdbc中sql语句的区别\" class=\"headerlink\" title=\"Mysql和Oracle在jdbc中sql语句的区别\"></a>Mysql和Oracle在jdbc中sql语句的区别</h4><ul>\n<li>mysql可以传入“；”（可有可无，不影响）；</li>\n<li>oracle不可以传入“；”（在sql字符串中加上“；”会导致sql语法错误）。</li>\n</ul>\n<h4 id=\"关于两种DriverManager-getConnection\"><a href=\"#关于两种DriverManager-getConnection\" class=\"headerlink\" title=\"关于两种DriverManager.getConnection();\"></a>关于两种DriverManager.getConnection();</h4><ul>\n<li>mysql:”jdbc:mysql://127.0.0.1:3306/sakila”,”root”,”root”</li>\n<li>oracle:”jdbc:oracle:thin:@127.0.0.1:1521:XE”,”hr”,”root”</li>\n</ul>\n<h4 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h4><p>这次试验数据库的信息都是已知的，并没有使用getTypeName(),getCollumName()等方法，所以有很多可以改进的地方。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"修改主机名oracle无法正常启动","date":"2016-07-19T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n在刚开始学习Oracle时，安装完Oracle后，我发现我的主机名不是很炫酷，就去计算机管理把电脑的名字改成了EvilRat，然后我的Oracle就连不上了，因为listener服务一直启动不了，显示类似下面的情况：（图是从网上找的，不好在弄回去截图了，大家知道是什么情况能解决问题就行）。\n<center>\n<img src=\"/assets/img/oracle_listener.bmp\">\n</center>\n然后我从网上查了资料，发现是因为listener的配置文件里面的主机名还没有改过来，于是我就是手动改过来了。\n<center>\n<img src=\"/assets/img/listener.bmp\">\n</center>\n将箭头指的地方修改后，应该就没问题了，这是我真是遇到的问题，希望可以帮助到大家。\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\" data-title=\"oraclepcname\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","source":"_posts/2016-07-21-kongzheng1993-OracleAfterChangetheNameofComputer.md","raw":"---\nlayout: post\ntitle: \"修改主机名oracle无法正常启动\"\ndate: 2016-07-20\nexcerpt: \"oracle\"\ntags: [oracle]\ncomments: true\n---\n\n在刚开始学习Oracle时，安装完Oracle后，我发现我的主机名不是很炫酷，就去计算机管理把电脑的名字改成了EvilRat，然后我的Oracle就连不上了，因为listener服务一直启动不了，显示类似下面的情况：（图是从网上找的，不好在弄回去截图了，大家知道是什么情况能解决问题就行）。\n<center>\n<img src=\"/assets/img/oracle_listener.bmp\">\n</center>\n然后我从网上查了资料，发现是因为listener的配置文件里面的主机名还没有改过来，于是我就是手动改过来了。\n<center>\n<img src=\"/assets/img/listener.bmp\">\n</center>\n将箭头指的地方修改后，应该就没问题了，这是我真是遇到的问题，希望可以帮助到大家。\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\" data-title=\"oraclepcname\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","slug":"kongzheng1993-OracleAfterChangetheNameofComputer","published":1,"updated":"2019-05-30T15:27:43.573Z","photos":[],"link":"","_id":"cjwaviv6z000v41xnocb1qy4a","content":"<p>在刚开始学习Oracle时，安装完Oracle后，我发现我的主机名不是很炫酷，就去计算机管理把电脑的名字改成了EvilRat，然后我的Oracle就连不上了，因为listener服务一直启动不了，显示类似下面的情况：（图是从网上找的，不好在弄回去截图了，大家知道是什么情况能解决问题就行）。</p>\n<center>\n<img src=\"/2016/07/20/kongzheng1993-OracleAfterChangetheNameofComputer/assets/img/oracle_listener.bmp\">\n</center>\n然后我从网上查了资料，发现是因为listener的配置文件里面的主机名还没有改过来，于是我就是手动改过来了。\n<center>\n<img src=\"/2016/07/20/kongzheng1993-OracleAfterChangetheNameofComputer/assets/img/listener.bmp\">\n</center>\n将箭头指的地方修改后，应该就没问题了，这是我真是遇到的问题，希望可以帮助到大家。\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\" data-title=\"oraclepcname\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<p>在刚开始学习Oracle时，安装完Oracle后，我发现我的主机名不是很炫酷，就去计算机管理把电脑的名字改成了EvilRat，然后我的Oracle就连不上了，因为listener服务一直启动不了，显示类似下面的情况：（图是从网上找的，不好在弄回去截图了，大家知道是什么情况能解决问题就行）。</p>\n<center>\n<img src=\"/2016/07/20/kongzheng1993-OracleAfterChangetheNameofComputer/assets/img/oracle_listener.bmp\">\n</center>\n然后我从网上查了资料，发现是因为listener的配置文件里面的主机名还没有改过来，于是我就是手动改过来了。\n<center>\n<img src=\"/2016/07/20/kongzheng1993-OracleAfterChangetheNameofComputer/assets/img/listener.bmp\">\n</center>\n将箭头指的地方修改后，应该就没问题了，这是我真是遇到的问题，希望可以帮助到大家。\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\" data-title=\"oraclepcname\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-oraclepcname/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"使用sys登陆sqlplus的问题","date":"2016-06-09T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n### 使用sys/root登陆sqlplus\n\n我们用sys/root的账号密码正常登陆sqlplus会出现以下问题：\n\n<img src=\"/assets/img/sqlplus.bmp\">\n\n\n但是我们如果在输入password时不输入我们的密码（root），而是输入sys as sysdba,就可以顺利登陆，我也不知道什么原理，如果有知道的朋友，可以给我留言。\n\n\n如果我们先用其他用户登陆比如learner/learner,然后断开，再使用connect sys/root as sysdba就可以登陆。\n\n<img src=\"/assets/img/sqlplusloginsuccess.bmp\">\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\" data-title=\"sqlplusloginsys\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","source":"_posts/2016-07-23-kongzheng1993-about_sqlplus_sys.md","raw":"---\nlayout: post\ntitle: \"使用sys登陆sqlplus的问题\"\ndate: 2016-06-10\nexcerpt: \"use user sys login sqlplus\"\ntags: [sys,sqlplus,sql]\ncomments: true\n---\n\n\n### 使用sys/root登陆sqlplus\n\n我们用sys/root的账号密码正常登陆sqlplus会出现以下问题：\n\n<img src=\"/assets/img/sqlplus.bmp\">\n\n\n但是我们如果在输入password时不输入我们的密码（root），而是输入sys as sysdba,就可以顺利登陆，我也不知道什么原理，如果有知道的朋友，可以给我留言。\n\n\n如果我们先用其他用户登陆比如learner/learner,然后断开，再使用connect sys/root as sysdba就可以登陆。\n\n<img src=\"/assets/img/sqlplusloginsuccess.bmp\">\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\" data-title=\"sqlplusloginsys\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>","slug":"kongzheng1993-about_sqlplus_sys","published":1,"updated":"2019-01-26T09:37:47.571Z","photos":[],"link":"","_id":"cjwaviv71000x41xnaky4ec8t","content":"<h3 id=\"使用sys-root登陆sqlplus\"><a href=\"#使用sys-root登陆sqlplus\" class=\"headerlink\" title=\"使用sys/root登陆sqlplus\"></a>使用sys/root登陆sqlplus</h3><p>我们用sys/root的账号密码正常登陆sqlplus会出现以下问题：</p>\n<img src=\"/2016/06/10/kongzheng1993-about_sqlplus_sys/assets/img/sqlplus.bmp\">\n\n\n<p>但是我们如果在输入password时不输入我们的密码（root），而是输入sys as sysdba,就可以顺利登陆，我也不知道什么原理，如果有知道的朋友，可以给我留言。</p>\n<p>如果我们先用其他用户登陆比如learner/learner,然后断开，再使用connect sys/root as sysdba就可以登陆。</p>\n<img src=\"/2016/06/10/kongzheng1993-about_sqlplus_sys/assets/img/sqlplusloginsuccess.bmp\">\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\" data-title=\"sqlplusloginsys\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>","site":{"data":{}},"more":"<h3 id=\"使用sys-root登陆sqlplus\"><a href=\"#使用sys-root登陆sqlplus\" class=\"headerlink\" title=\"使用sys/root登陆sqlplus\"></a>使用sys/root登陆sqlplus</h3><p>我们用sys/root的账号密码正常登陆sqlplus会出现以下问题：</p>\n<img src=\"/2016/06/10/kongzheng1993-about_sqlplus_sys/assets/img/sqlplus.bmp\">\n\n\n<p>但是我们如果在输入password时不输入我们的密码（root），而是输入sys as sysdba,就可以顺利登陆，我也不知道什么原理，如果有知道的朋友，可以给我留言。</p>\n<p>如果我们先用其他用户登陆比如learner/learner,然后断开，再使用connect sys/root as sysdba就可以登陆。</p>\n<img src=\"/2016/06/10/kongzheng1993-about_sqlplus_sys/assets/img/sqlplusloginsuccess.bmp\">\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\" data-title=\"sqlplusloginsys\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-sqlplusloginsys/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>"},{"layout":"post","title":"java反射的学习笔记","date":"2017-03-07T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## java反射学习笔记\n\n#### 重新投入java的怀抱，我要改变我的生活，做自己想做的。\n\n复习java反射机制，发现我一直没理解Class的对象这个含义，Class是一个类名\n\n```\n\nimport java.lang.reflect.Method;\n\n/**\n * Created by evilrat on 3/8/17.\n */\npublic class GetMethods {\n\n    public static void main(String [] args){\n\n        Students s = new Students();\n        Class c = s.getClass();\n        Method m = null;\n        try{\n            m = s.getClass().getDeclaredMethod(\"getSex\",null);\n            System.out.println(\"Students类中有方法：\"+m);\n\n        }catch (Exception e){\n            System.out.println(e);\n        }\n    }\n}\n\n\n```\n\n这里先声明了一个Students类的对象，然后调用s.getClass()获得了s的类的对象。这个类的对象是Class类型的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n\n\n","source":"_posts/2017-03-08-kongzheng1993-JavaReflect.md","raw":"---\nlayout: post\ntitle: \"java反射的学习笔记\"\ndate: 2017-03-08\nexcerpt: \"java reflect\"\ntags: [java,reflect,Class,对象，Class对象]\ncomments: true\n---\n\n\n## java反射学习笔记\n\n#### 重新投入java的怀抱，我要改变我的生活，做自己想做的。\n\n复习java反射机制，发现我一直没理解Class的对象这个含义，Class是一个类名\n\n```\n\nimport java.lang.reflect.Method;\n\n/**\n * Created by evilrat on 3/8/17.\n */\npublic class GetMethods {\n\n    public static void main(String [] args){\n\n        Students s = new Students();\n        Class c = s.getClass();\n        Method m = null;\n        try{\n            m = s.getClass().getDeclaredMethod(\"getSex\",null);\n            System.out.println(\"Students类中有方法：\"+m);\n\n        }catch (Exception e){\n            System.out.println(e);\n        }\n    }\n}\n\n\n```\n\n这里先声明了一个Students类的对象，然后调用s.getClass()获得了s的类的对象。这个类的对象是Class类型的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n\n\n","slug":"kongzheng1993-JavaReflect","published":1,"updated":"2019-01-26T09:37:47.571Z","photos":[],"link":"","_id":"cjwaviv74000y41xnvapxeat7","content":"<h2 id=\"java反射学习笔记\"><a href=\"#java反射学习笔记\" class=\"headerlink\" title=\"java反射学习笔记\"></a>java反射学习笔记</h2><h4 id=\"重新投入java的怀抱，我要改变我的生活，做自己想做的。\"><a href=\"#重新投入java的怀抱，我要改变我的生活，做自己想做的。\" class=\"headerlink\" title=\"重新投入java的怀抱，我要改变我的生活，做自己想做的。\"></a>重新投入java的怀抱，我要改变我的生活，做自己想做的。</h4><p>复习java反射机制，发现我一直没理解Class的对象这个含义，Class是一个类名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/8/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class GetMethods &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String [] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Students s = new Students();</span><br><span class=\"line\">        Class c = s.getClass();</span><br><span class=\"line\">        Method m = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            m = s.getClass().getDeclaredMethod(&quot;getSex&quot;,null);</span><br><span class=\"line\">            System.out.println(&quot;Students类中有方法：&quot;+m);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里先声明了一个Students类的对象，然后调用s.getClass()获得了s的类的对象。这个类的对象是Class类型的。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n\n","site":{"data":{}},"more":"<h2 id=\"java反射学习笔记\"><a href=\"#java反射学习笔记\" class=\"headerlink\" title=\"java反射学习笔记\"></a>java反射学习笔记</h2><h4 id=\"重新投入java的怀抱，我要改变我的生活，做自己想做的。\"><a href=\"#重新投入java的怀抱，我要改变我的生活，做自己想做的。\" class=\"headerlink\" title=\"重新投入java的怀抱，我要改变我的生活，做自己想做的。\"></a>重新投入java的怀抱，我要改变我的生活，做自己想做的。</h4><p>复习java反射机制，发现我一直没理解Class的对象这个含义，Class是一个类名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/8/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class GetMethods &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String [] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Students s = new Students();</span><br><span class=\"line\">        Class c = s.getClass();</span><br><span class=\"line\">        Method m = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            m = s.getClass().getDeclaredMethod(&quot;getSex&quot;,null);</span><br><span class=\"line\">            System.out.println(&quot;Students类中有方法：&quot;+m);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里先声明了一个Students类的对象，然后调用s.getClass()获得了s的类的对象。这个类的对象是Class类型的。</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-mto/\" data-title=\"mto\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-mto/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n\n"},{"layout":"post","title":"关于comparator和comparable","date":"2016-07-25T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## 关于comparator和comparable\n\n### comparator\n\nComparator强行对某个对象collection进行整体排序的比较函数，可以将Comparator传递给Collections.sort或Arrays.sort。\n也就是说Comeparator是需要用sort方法调用的。\n\n```\n\n\nimport java.util.*;\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class CollectionTest {\n\n    static List<Demo> d = new ArrayList<Demo>();\n    static Random random = new Random();\n    static CompareterTool ct= new CompareterTool();\n    public static void main(String [] args){\n        for (int i = 0; i < 10;i ++){\n            d.add(new Demo(random.nextInt(10)));\n        }\n        //排序前输出\n        for (Iterator<Demo> it = d.iterator(); it.hasNext();){\n            System.out.print(it.next().getAge()+\"\\t\");\n        }\n        System.out.print(\"\\n\");\n        //排序\n        Collections.sort(d,ct);\n        //排序后输出\n        for (Iterator<Demo> it = d.iterator(); it.hasNext();){\n            System.out.print(it.next().getAge()+\"\\t\");\n        }\n    }\n}\n\n\n```\n\n\n这里是使用Collections.sort方法调用了我们预先写好的比较器。以下是比较器的定义：\n\n```\n\n\nimport java.util.Comparator;\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class CompareterTool implements Comparator<Demo> {\n        @Override\n        public int compare(Demo o1, Demo o2) {\n            if (o1.age > o2.age){\n                return 1;\n            }else\n                return -1;\n\n        }\n}\n\n\n\n```\n\n\n在编写比较器的时候我无意中这样写了：\n\n\n```\n\nimport java.util.Comparator;\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class CompareterTool {\n\n    public Comparator<Demo> comparator = new Comparator<Demo>() {\n        @Override\n        public int compare(Demo o1, Demo o2) {\n            if (o1.age > o2.age){\n                return 1;\n            }else\n                return -1;\n\n        }\n    };\n}\n\n\n\n```\n\n请注意这种写法，直接声明一个Comparator<Demo>对象，然后紧跟这一段大括号重写了他的compare（）方法，然后在大括号外写了分号。\n反正我是没这么写过，可能是我还没见过的原因吧，记录以下，感觉这样很炫酷。但是随之main方法中的排序代码要改为:\n\n\n```\n\nCollections.sort(d,ct.comparator);\n\n```\n\n\nct是ComparatorTool类的对象，但是从编码来看，compare方法是在Comparator的对象comparator中啊，疑惑？为什么这里是调用ct.comparator，这是一个对象啊，难道说是comparator对象声明时直接写了一个方法？Comparator有这么一种特殊的写法。\n\n\n\n\n\n\n\n### Comparable\n\n对于Comparable来说，需要在编写想要进行排序的类的时候实现Comparable接口，然后在需要排序的时候调用Arrays或者Collections的sort方法就可以直接调用到这个比较器了。\n\n```\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class Demo implements Comparable<Demo>{\n\n    String name;\n    int age;\n\n    @Override\n    public int compareTo(Demo o) {\n        return this.getAge()-o.getAge();\n    }\n\n    public Demo(int age){\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n\n\n\n```\n\n\n调用方法,这里会自动对应到实现Comparable接口而产生的比较器：\n\n\n\n```\n\nCollections.sort(d);\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\" data-title=\"about_comparator_and_comparable\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n","source":"_posts/2017-03-09-kongzheng1993-about_comparator_and_comparable.md","raw":"---\nlayout: post\ntitle: \"关于comparator和comparable\"\ndate: 2016-07-26\nexcerpt: \"getRequestDispatcher,forword,sendRedirect\"\ntags: [re]\ncomments: true\n---\n\n\n## 关于comparator和comparable\n\n### comparator\n\nComparator强行对某个对象collection进行整体排序的比较函数，可以将Comparator传递给Collections.sort或Arrays.sort。\n也就是说Comeparator是需要用sort方法调用的。\n\n```\n\n\nimport java.util.*;\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class CollectionTest {\n\n    static List<Demo> d = new ArrayList<Demo>();\n    static Random random = new Random();\n    static CompareterTool ct= new CompareterTool();\n    public static void main(String [] args){\n        for (int i = 0; i < 10;i ++){\n            d.add(new Demo(random.nextInt(10)));\n        }\n        //排序前输出\n        for (Iterator<Demo> it = d.iterator(); it.hasNext();){\n            System.out.print(it.next().getAge()+\"\\t\");\n        }\n        System.out.print(\"\\n\");\n        //排序\n        Collections.sort(d,ct);\n        //排序后输出\n        for (Iterator<Demo> it = d.iterator(); it.hasNext();){\n            System.out.print(it.next().getAge()+\"\\t\");\n        }\n    }\n}\n\n\n```\n\n\n这里是使用Collections.sort方法调用了我们预先写好的比较器。以下是比较器的定义：\n\n```\n\n\nimport java.util.Comparator;\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class CompareterTool implements Comparator<Demo> {\n        @Override\n        public int compare(Demo o1, Demo o2) {\n            if (o1.age > o2.age){\n                return 1;\n            }else\n                return -1;\n\n        }\n}\n\n\n\n```\n\n\n在编写比较器的时候我无意中这样写了：\n\n\n```\n\nimport java.util.Comparator;\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class CompareterTool {\n\n    public Comparator<Demo> comparator = new Comparator<Demo>() {\n        @Override\n        public int compare(Demo o1, Demo o2) {\n            if (o1.age > o2.age){\n                return 1;\n            }else\n                return -1;\n\n        }\n    };\n}\n\n\n\n```\n\n请注意这种写法，直接声明一个Comparator<Demo>对象，然后紧跟这一段大括号重写了他的compare（）方法，然后在大括号外写了分号。\n反正我是没这么写过，可能是我还没见过的原因吧，记录以下，感觉这样很炫酷。但是随之main方法中的排序代码要改为:\n\n\n```\n\nCollections.sort(d,ct.comparator);\n\n```\n\n\nct是ComparatorTool类的对象，但是从编码来看，compare方法是在Comparator的对象comparator中啊，疑惑？为什么这里是调用ct.comparator，这是一个对象啊，难道说是comparator对象声明时直接写了一个方法？Comparator有这么一种特殊的写法。\n\n\n\n\n\n\n\n### Comparable\n\n对于Comparable来说，需要在编写想要进行排序的类的时候实现Comparable接口，然后在需要排序的时候调用Arrays或者Collections的sort方法就可以直接调用到这个比较器了。\n\n```\n\n/**\n * Created by evilrat on 3/9/17.\n */\npublic class Demo implements Comparable<Demo>{\n\n    String name;\n    int age;\n\n    @Override\n    public int compareTo(Demo o) {\n        return this.getAge()-o.getAge();\n    }\n\n    public Demo(int age){\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n\n\n\n```\n\n\n调用方法,这里会自动对应到实现Comparable接口而产生的比较器：\n\n\n\n```\n\nCollections.sort(d);\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\" data-title=\"about_comparator_and_comparable\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n","slug":"kongzheng1993-about_comparator_and_comparable","published":1,"updated":"2019-01-26T09:37:47.572Z","photos":[],"link":"","_id":"cjwaviv76001041xn4pu52hw8","content":"<h2 id=\"关于comparator和comparable\"><a href=\"#关于comparator和comparable\" class=\"headerlink\" title=\"关于comparator和comparable\"></a>关于comparator和comparable</h2><h3 id=\"comparator\"><a href=\"#comparator\" class=\"headerlink\" title=\"comparator\"></a>comparator</h3><p>Comparator强行对某个对象collection进行整体排序的比较函数，可以将Comparator传递给Collections.sort或Arrays.sort。<br>也就是说Comeparator是需要用sort方法调用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CollectionTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static List&lt;Demo&gt; d = new ArrayList&lt;Demo&gt;();</span><br><span class=\"line\">    static Random random = new Random();</span><br><span class=\"line\">    static CompareterTool ct= new CompareterTool();</span><br><span class=\"line\">    public static void main(String [] args)&#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; 10;i ++)&#123;</span><br><span class=\"line\">            d.add(new Demo(random.nextInt(10)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //排序前输出</span><br><span class=\"line\">        for (Iterator&lt;Demo&gt; it = d.iterator(); it.hasNext();)&#123;</span><br><span class=\"line\">            System.out.print(it.next().getAge()+&quot;\\t&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(&quot;\\n&quot;);</span><br><span class=\"line\">        //排序</span><br><span class=\"line\">        Collections.sort(d,ct);</span><br><span class=\"line\">        //排序后输出</span><br><span class=\"line\">        for (Iterator&lt;Demo&gt; it = d.iterator(); it.hasNext();)&#123;</span><br><span class=\"line\">            System.out.print(it.next().getAge()+&quot;\\t&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里是使用Collections.sort方法调用了我们预先写好的比较器。以下是比较器的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CompareterTool implements Comparator&lt;Demo&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int compare(Demo o1, Demo o2) &#123;</span><br><span class=\"line\">            if (o1.age &gt; o2.age)&#123;</span><br><span class=\"line\">                return 1;</span><br><span class=\"line\">            &#125;else</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在编写比较器的时候我无意中这样写了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CompareterTool &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Comparator&lt;Demo&gt; comparator = new Comparator&lt;Demo&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int compare(Demo o1, Demo o2) &#123;</span><br><span class=\"line\">            if (o1.age &gt; o2.age)&#123;</span><br><span class=\"line\">                return 1;</span><br><span class=\"line\">            &#125;else</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意这种写法，直接声明一个Comparator<demo>对象，然后紧跟这一段大括号重写了他的compare（）方法，然后在大括号外写了分号。<br>反正我是没这么写过，可能是我还没见过的原因吧，记录以下，感觉这样很炫酷。但是随之main方法中的排序代码要改为:</demo></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Collections.sort(d,ct.comparator);</span><br></pre></td></tr></table></figure>\n\n<p>ct是ComparatorTool类的对象，但是从编码来看，compare方法是在Comparator的对象comparator中啊，疑惑？为什么这里是调用ct.comparator，这是一个对象啊，难道说是comparator对象声明时直接写了一个方法？Comparator有这么一种特殊的写法。</p>\n<h3 id=\"Comparable\"><a href=\"#Comparable\" class=\"headerlink\" title=\"Comparable\"></a>Comparable</h3><p>对于Comparable来说，需要在编写想要进行排序的类的时候实现Comparable接口，然后在需要排序的时候调用Arrays或者Collections的sort方法就可以直接调用到这个比较器了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Demo implements Comparable&lt;Demo&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Demo o) &#123;</span><br><span class=\"line\">        return this.getAge()-o.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Demo(int age)&#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用方法,这里会自动对应到实现Comparable接口而产生的比较器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Collections.sort(d);</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\" data-title=\"about_comparator_and_comparable\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n","site":{"data":{}},"more":"<h2 id=\"关于comparator和comparable\"><a href=\"#关于comparator和comparable\" class=\"headerlink\" title=\"关于comparator和comparable\"></a>关于comparator和comparable</h2><h3 id=\"comparator\"><a href=\"#comparator\" class=\"headerlink\" title=\"comparator\"></a>comparator</h3><p>Comparator强行对某个对象collection进行整体排序的比较函数，可以将Comparator传递给Collections.sort或Arrays.sort。<br>也就是说Comeparator是需要用sort方法调用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CollectionTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static List&lt;Demo&gt; d = new ArrayList&lt;Demo&gt;();</span><br><span class=\"line\">    static Random random = new Random();</span><br><span class=\"line\">    static CompareterTool ct= new CompareterTool();</span><br><span class=\"line\">    public static void main(String [] args)&#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; 10;i ++)&#123;</span><br><span class=\"line\">            d.add(new Demo(random.nextInt(10)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //排序前输出</span><br><span class=\"line\">        for (Iterator&lt;Demo&gt; it = d.iterator(); it.hasNext();)&#123;</span><br><span class=\"line\">            System.out.print(it.next().getAge()+&quot;\\t&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(&quot;\\n&quot;);</span><br><span class=\"line\">        //排序</span><br><span class=\"line\">        Collections.sort(d,ct);</span><br><span class=\"line\">        //排序后输出</span><br><span class=\"line\">        for (Iterator&lt;Demo&gt; it = d.iterator(); it.hasNext();)&#123;</span><br><span class=\"line\">            System.out.print(it.next().getAge()+&quot;\\t&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里是使用Collections.sort方法调用了我们预先写好的比较器。以下是比较器的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CompareterTool implements Comparator&lt;Demo&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int compare(Demo o1, Demo o2) &#123;</span><br><span class=\"line\">            if (o1.age &gt; o2.age)&#123;</span><br><span class=\"line\">                return 1;</span><br><span class=\"line\">            &#125;else</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在编写比较器的时候我无意中这样写了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CompareterTool &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Comparator&lt;Demo&gt; comparator = new Comparator&lt;Demo&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int compare(Demo o1, Demo o2) &#123;</span><br><span class=\"line\">            if (o1.age &gt; o2.age)&#123;</span><br><span class=\"line\">                return 1;</span><br><span class=\"line\">            &#125;else</span><br><span class=\"line\">                return -1;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意这种写法，直接声明一个Comparator<demo>对象，然后紧跟这一段大括号重写了他的compare（）方法，然后在大括号外写了分号。<br>反正我是没这么写过，可能是我还没见过的原因吧，记录以下，感觉这样很炫酷。但是随之main方法中的排序代码要改为:</demo></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Collections.sort(d,ct.comparator);</span><br></pre></td></tr></table></figure>\n\n<p>ct是ComparatorTool类的对象，但是从编码来看，compare方法是在Comparator的对象comparator中啊，疑惑？为什么这里是调用ct.comparator，这是一个对象啊，难道说是comparator对象声明时直接写了一个方法？Comparator有这么一种特殊的写法。</p>\n<h3 id=\"Comparable\"><a href=\"#Comparable\" class=\"headerlink\" title=\"Comparable\"></a>Comparable</h3><p>对于Comparable来说，需要在编写想要进行排序的类的时候实现Comparable接口，然后在需要排序的时候调用Arrays或者Collections的sort方法就可以直接调用到这个比较器了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by evilrat on 3/9/17.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Demo implements Comparable&lt;Demo&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compareTo(Demo o) &#123;</span><br><span class=\"line\">        return this.getAge()-o.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Demo(int age)&#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getName() &#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用方法,这里会自动对应到实现Comparable接口而产生的比较器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Collections.sort(d);</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\" data-title=\"about_comparator_and_comparable\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-about_comparator_and_comparable/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n"},{"layout":"post","title":"Hexo+github搭建个人博客遇到的问题","date":"2018-01-31T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n### hexo+github搭建个人博客遇到的问题\n\n1. hexo博客_config.yml中的配置\n 1. Site配置网站相关的信息，比如网站标题、子标题、描述和作者等。\n 2. URL配置博客在网站的目录，这里需要注意一些问题。如果是在根目录，url就配置为https://githubID.github.io，root就配置为/，但是如果有二级目录，比如blog，就要对应的设置为url:https://githubID.github.io/blog root:/blog/。但是github pages有这么个问题，你访问的时候看起来是一级目录，其实是二级目录。所以我在设置为一记目录时，在本地hexo -s debug的时候是正常的，但是发布后网站是没有样式的，也就是说静态资源是访问不到的。所以我又尝试配置为二级目录url:https://githubID.github.io/blog root:/githubID.github.io/，然后样式就正常了。\n 3. 我的博客是从jekyll迁移过来的，所以要把所有的_posts中的博文复制到source/_posts文件夹，然后修改_config.yml中的new_post_name参数，也就是让新的hexo生成的新博文符合原来jekyll博文的命名规则。\n2. 相关的建站的方法这里不再说明，可以到`hexo.io`跟着做。\n3. 安装服务器hexo-server\n```\nnpm install hexo-server --save\n```\n  这个命令是安装hexo服务器，下面的命令是启动服务器，而且启动后修改文件无需重启，-p选项可以制定端口来运行server\n```\nhexo server\n```\n  运行成功后可以在命令行看到访问http://localhost:4000可以预览网站。\n4. 我是在用github pages来建站，所以需要使用git来部署我的博客到github pages。\n  所以要使用下面的命令安装git的部署器。\n```\nnpm install hexo-deployer-git --save\n```\n  然后还需要修改配置_config.yml\n```\ndeploy:\n  type: git\n  repo: https://github.com/githubID/githubID.github.io.git\n  branch: #github会自动检测\n  message: #自定义的提交信息。\n```\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-web_xml/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","source":"_posts/2018-02-01-kongzheng1993-hexo搭建githubPages.md","raw":"---\nlayout: post\ntitle: \"Hexo+github搭建个人博客遇到的问题\"\ndate: 2018-02-01\nexcerpt: \"Hexo+github\"\ntags: [github,hexo,git]\ncategories: [blog,github,git]\ncomments: true\n---\n\n### hexo+github搭建个人博客遇到的问题\n\n1. hexo博客_config.yml中的配置\n 1. Site配置网站相关的信息，比如网站标题、子标题、描述和作者等。\n 2. URL配置博客在网站的目录，这里需要注意一些问题。如果是在根目录，url就配置为https://githubID.github.io，root就配置为/，但是如果有二级目录，比如blog，就要对应的设置为url:https://githubID.github.io/blog root:/blog/。但是github pages有这么个问题，你访问的时候看起来是一级目录，其实是二级目录。所以我在设置为一记目录时，在本地hexo -s debug的时候是正常的，但是发布后网站是没有样式的，也就是说静态资源是访问不到的。所以我又尝试配置为二级目录url:https://githubID.github.io/blog root:/githubID.github.io/，然后样式就正常了。\n 3. 我的博客是从jekyll迁移过来的，所以要把所有的_posts中的博文复制到source/_posts文件夹，然后修改_config.yml中的new_post_name参数，也就是让新的hexo生成的新博文符合原来jekyll博文的命名规则。\n2. 相关的建站的方法这里不再说明，可以到`hexo.io`跟着做。\n3. 安装服务器hexo-server\n```\nnpm install hexo-server --save\n```\n  这个命令是安装hexo服务器，下面的命令是启动服务器，而且启动后修改文件无需重启，-p选项可以制定端口来运行server\n```\nhexo server\n```\n  运行成功后可以在命令行看到访问http://localhost:4000可以预览网站。\n4. 我是在用github pages来建站，所以需要使用git来部署我的博客到github pages。\n  所以要使用下面的命令安装git的部署器。\n```\nnpm install hexo-deployer-git --save\n```\n  然后还需要修改配置_config.yml\n```\ndeploy:\n  type: git\n  repo: https://github.com/githubID/githubID.github.io.git\n  branch: #github会自动检测\n  message: #自定义的提交信息。\n```\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-web_xml/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","slug":"kongzheng1993-hexo搭建githubPages","published":1,"updated":"2019-05-30T16:29:58.154Z","_id":"cjwaviv78001141xn57dqqhe0","photos":[],"link":"","content":"<h3 id=\"hexo-github搭建个人博客遇到的问题\"><a href=\"#hexo-github搭建个人博客遇到的问题\" class=\"headerlink\" title=\"hexo+github搭建个人博客遇到的问题\"></a>hexo+github搭建个人博客遇到的问题</h3><ol>\n<li><p>hexo博客_config.yml中的配置</p>\n<ol>\n<li>Site配置网站相关的信息，比如网站标题、子标题、描述和作者等。</li>\n<li>URL配置博客在网站的目录，这里需要注意一些问题。如果是在根目录，url就配置为<a href=\"https://githubID.github.io，root就配置为/，但是如果有二级目录，比如blog，就要对应的设置为url:https://githubID.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://githubID.github.io，root就配置为/，但是如果有二级目录，比如blog，就要对应的设置为url:https://githubID.github.io/blog</a> root:/blog/。但是github pages有这么个问题，你访问的时候看起来是一级目录，其实是二级目录。所以我在设置为一记目录时，在本地hexo -s debug的时候是正常的，但是发布后网站是没有样式的，也就是说静态资源是访问不到的。所以我又尝试配置为二级目录url:<a href=\"https://githubID.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://githubID.github.io/blog</a> root:/githubID.github.io/，然后样式就正常了。</li>\n<li>我的博客是从jekyll迁移过来的，所以要把所有的_posts中的博文复制到source/_posts文件夹，然后修改_config.yml中的new_post_name参数，也就是让新的hexo生成的新博文符合原来jekyll博文的命名规则。</li>\n</ol>\n</li>\n<li><p>相关的建站的方法这里不再说明，可以到<code>hexo.io</code>跟着做。</p>\n</li>\n<li><p>安装服务器hexo-server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>这个命令是安装hexo服务器，下面的命令是启动服务器，而且启动后修改文件无需重启，-p选项可以制定端口来运行server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>运行成功后可以在命令行看到访问<a href=\"http://localhost:4000可以预览网站。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000可以预览网站。</a></p>\n</li>\n<li><p>我是在用github pages来建站，所以需要使用git来部署我的博客到github pages。<br>所以要使用下面的命令安装git的部署器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>然后还需要修改配置_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/githubID/githubID.github.io.git</span><br><span class=\"line\">  branch: #github会自动检测</span><br><span class=\"line\">  message: #自定义的提交信息。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-web_xml/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h3 id=\"hexo-github搭建个人博客遇到的问题\"><a href=\"#hexo-github搭建个人博客遇到的问题\" class=\"headerlink\" title=\"hexo+github搭建个人博客遇到的问题\"></a>hexo+github搭建个人博客遇到的问题</h3><ol>\n<li><p>hexo博客_config.yml中的配置</p>\n<ol>\n<li>Site配置网站相关的信息，比如网站标题、子标题、描述和作者等。</li>\n<li>URL配置博客在网站的目录，这里需要注意一些问题。如果是在根目录，url就配置为<a href=\"https://githubID.github.io，root就配置为/，但是如果有二级目录，比如blog，就要对应的设置为url:https://githubID.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://githubID.github.io，root就配置为/，但是如果有二级目录，比如blog，就要对应的设置为url:https://githubID.github.io/blog</a> root:/blog/。但是github pages有这么个问题，你访问的时候看起来是一级目录，其实是二级目录。所以我在设置为一记目录时，在本地hexo -s debug的时候是正常的，但是发布后网站是没有样式的，也就是说静态资源是访问不到的。所以我又尝试配置为二级目录url:<a href=\"https://githubID.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://githubID.github.io/blog</a> root:/githubID.github.io/，然后样式就正常了。</li>\n<li>我的博客是从jekyll迁移过来的，所以要把所有的_posts中的博文复制到source/_posts文件夹，然后修改_config.yml中的new_post_name参数，也就是让新的hexo生成的新博文符合原来jekyll博文的命名规则。</li>\n</ol>\n</li>\n<li><p>相关的建站的方法这里不再说明，可以到<code>hexo.io</code>跟着做。</p>\n</li>\n<li><p>安装服务器hexo-server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>这个命令是安装hexo服务器，下面的命令是启动服务器，而且启动后修改文件无需重启，-p选项可以制定端口来运行server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>运行成功后可以在命令行看到访问<a href=\"http://localhost:4000可以预览网站。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000可以预览网站。</a></p>\n</li>\n<li><p>我是在用github pages来建站，所以需要使用git来部署我的博客到github pages。<br>所以要使用下面的命令安装git的部署器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>然后还需要修改配置_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/githubID/githubID.github.io.git</span><br><span class=\"line\">  branch: #github会自动检测</span><br><span class=\"line\">  message: #自定义的提交信息。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-web_xml/\" data-title=\"About trycatch\" data-url=\"http://kongzheng1993.github.io/kongzheng1993\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"SUSE server FTP配置","date":"2018-01-31T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n## SUSE FTP配置\n\n建议使用vsftp，如果使用了pure-ftpd，需要屏蔽掉pure-ftpd服务。\n\n1. Root用户执行yast2--->network services-->network services （inetd）\n\n将/usr/sbin/pure-ftpd 和/usr/sbin/vsftpd\n\n分别将pure-ftp的状态置为off，vsftpd的状态置为on，然后单击按钮，修改完成。\n\n2. vi /etc/vsftpd.conf 去掉下面几项的注视：\n\n```bash\n#write_enable=YES\n\n#local_enable=YES\n\n#ascii_upload_enable=YES\n\n#ascii_download_enable=YES\n\n#listen=YES\n\n#anonymous_enable=NO\n```\n\n(3)vi /etc/ftpuser 将root用户注释掉\n\n(4)service vsftpd restart  重启ftp服务\n","source":"_posts/2018-02-07-kongzheng1993-suse_ftp服务配置.md","raw":"---\nlayout: post\ntitle: \"SUSE server FTP配置\"\ndate: 2018-02-01\nexcerpt: \"suse server FTP\"\ntags: [suse,server,FTP]\ncategories: [suse,server,FTP]\ncomments: true\n---\n\n## SUSE FTP配置\n\n建议使用vsftp，如果使用了pure-ftpd，需要屏蔽掉pure-ftpd服务。\n\n1. Root用户执行yast2--->network services-->network services （inetd）\n\n将/usr/sbin/pure-ftpd 和/usr/sbin/vsftpd\n\n分别将pure-ftp的状态置为off，vsftpd的状态置为on，然后单击按钮，修改完成。\n\n2. vi /etc/vsftpd.conf 去掉下面几项的注视：\n\n```bash\n#write_enable=YES\n\n#local_enable=YES\n\n#ascii_upload_enable=YES\n\n#ascii_download_enable=YES\n\n#listen=YES\n\n#anonymous_enable=NO\n```\n\n(3)vi /etc/ftpuser 将root用户注释掉\n\n(4)service vsftpd restart  重启ftp服务\n","slug":"kongzheng1993-suse_ftp服务配置","published":1,"updated":"2019-01-26T09:37:47.573Z","photos":[],"link":"","_id":"cjwaviv7b001441xnsjcr3uz2","content":"<h2 id=\"SUSE-FTP配置\"><a href=\"#SUSE-FTP配置\" class=\"headerlink\" title=\"SUSE FTP配置\"></a>SUSE FTP配置</h2><p>建议使用vsftp，如果使用了pure-ftpd，需要屏蔽掉pure-ftpd服务。</p>\n<ol>\n<li>Root用户执行yast2—&gt;network services–&gt;network services （inetd）</li>\n</ol>\n<p>将/usr/sbin/pure-ftpd 和/usr/sbin/vsftpd</p>\n<p>分别将pure-ftp的状态置为off，vsftpd的状态置为on，然后单击按钮，修改完成。</p>\n<ol start=\"2\">\n<li>vi /etc/vsftpd.conf 去掉下面几项的注视：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#write_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#local_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#listen=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#anonymous_enable=NO</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)vi /etc/ftpuser 将root用户注释掉</p>\n<p>(4)service vsftpd restart  重启ftp服务</p>\n","site":{"data":{}},"more":"<h2 id=\"SUSE-FTP配置\"><a href=\"#SUSE-FTP配置\" class=\"headerlink\" title=\"SUSE FTP配置\"></a>SUSE FTP配置</h2><p>建议使用vsftp，如果使用了pure-ftpd，需要屏蔽掉pure-ftpd服务。</p>\n<ol>\n<li>Root用户执行yast2—&gt;network services–&gt;network services （inetd）</li>\n</ol>\n<p>将/usr/sbin/pure-ftpd 和/usr/sbin/vsftpd</p>\n<p>分别将pure-ftp的状态置为off，vsftpd的状态置为on，然后单击按钮，修改完成。</p>\n<ol start=\"2\">\n<li>vi /etc/vsftpd.conf 去掉下面几项的注视：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#write_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#local_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ascii_upload_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ascii_download_enable=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#listen=YES</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#anonymous_enable=NO</span></span><br></pre></td></tr></table></figure>\n\n<p>(3)vi /etc/ftpuser 将root用户注释掉</p>\n<p>(4)service vsftpd restart  重启ftp服务</p>\n"},{"layout":"post","title":"mysql数据库导出导入","date":"2018-08-04T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n一直在用oracle，今天学习了一下mysql如何导库。\n\n## mysqldump\n\nmysqldump一般在/usr/bin/目录下，装晚mysql后就可以使用了。\n\n## 导出\n\n1. 一般形式：mysqldump -h IP -u 用户名 -p 数据库名 > 导出的文件名\n\nmysqldump和mysql登陆数据库的格式差不多，-h指定ip，-u指定登陆用户，-p指定输入密码。后面加上输出重定向到文件名。\n\n这种一般形式是导出此数据库中的所有表和数据。\n\n2. 导出数据库所有表结构，但不导出数据。\n\n```bash\nmysqldump -h localhost -u root -p -d test > /home/evilrat/dbbak/test.sql\n```\n\n3. 导出某张表的表结构，不含数据。\n\n```bash\nmysqldump -h localhost -u root -p -d test t_user > /home/evilrat/dbbak/tuser.sql\n```\n\n4. 备份多个数据库\n\n```bash\nmysqldump -h localhost -u root -p --databases test1 test2 > /home/evilrat/dbbak/test1_test2.sql\n```\n\n5. 备份所有数据库的方法\n\n```bash\nmysqldump -h localhost -u root -p --all-databases > /home/evilrat/dbbak/localhost.sql\n```\n\n## 导入\n\n```bash\nmysql -h localhost -u root -p\n*******\ncreate database test;\nshow databases;\nuse test;\nshow tables;\nsource /home/evilrat/dbbak/test.sql;\nshow tables;\nexit;\n```","source":"_posts/2018-08-05-kongzheng1993-mysql数据库导出导入.md","raw":"---\nlayout: post\ntitle: \"mysql数据库导出导入\"\ndate: 2018-08-05\nexcerpt: \"mysql 导库\"\ntags: [mysql,备份]\ncategories: [mysql]\ncomments: true\n---\n\n一直在用oracle，今天学习了一下mysql如何导库。\n\n## mysqldump\n\nmysqldump一般在/usr/bin/目录下，装晚mysql后就可以使用了。\n\n## 导出\n\n1. 一般形式：mysqldump -h IP -u 用户名 -p 数据库名 > 导出的文件名\n\nmysqldump和mysql登陆数据库的格式差不多，-h指定ip，-u指定登陆用户，-p指定输入密码。后面加上输出重定向到文件名。\n\n这种一般形式是导出此数据库中的所有表和数据。\n\n2. 导出数据库所有表结构，但不导出数据。\n\n```bash\nmysqldump -h localhost -u root -p -d test > /home/evilrat/dbbak/test.sql\n```\n\n3. 导出某张表的表结构，不含数据。\n\n```bash\nmysqldump -h localhost -u root -p -d test t_user > /home/evilrat/dbbak/tuser.sql\n```\n\n4. 备份多个数据库\n\n```bash\nmysqldump -h localhost -u root -p --databases test1 test2 > /home/evilrat/dbbak/test1_test2.sql\n```\n\n5. 备份所有数据库的方法\n\n```bash\nmysqldump -h localhost -u root -p --all-databases > /home/evilrat/dbbak/localhost.sql\n```\n\n## 导入\n\n```bash\nmysql -h localhost -u root -p\n*******\ncreate database test;\nshow databases;\nuse test;\nshow tables;\nsource /home/evilrat/dbbak/test.sql;\nshow tables;\nexit;\n```","slug":"kongzheng1993-mysql数据库导出导入","published":1,"updated":"2019-01-26T09:37:47.575Z","photos":[],"link":"","_id":"cjwaviv7e001741xn4ndl2z03","content":"<p>一直在用oracle，今天学习了一下mysql如何导库。</p>\n<h2 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h2><p>mysqldump一般在/usr/bin/目录下，装晚mysql后就可以使用了。</p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><ol>\n<li>一般形式：mysqldump -h IP -u 用户名 -p 数据库名 &gt; 导出的文件名</li>\n</ol>\n<p>mysqldump和mysql登陆数据库的格式差不多，-h指定ip，-u指定登陆用户，-p指定输入密码。后面加上输出重定向到文件名。</p>\n<p>这种一般形式是导出此数据库中的所有表和数据。</p>\n<ol start=\"2\">\n<li>导出数据库所有表结构，但不导出数据。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p -d <span class=\"built_in\">test</span> &gt; /home/evilrat/dbbak/test.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>导出某张表的表结构，不含数据。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p -d <span class=\"built_in\">test</span> t_user &gt; /home/evilrat/dbbak/tuser.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>备份多个数据库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p --databases test1 test2 &gt; /home/evilrat/dbbak/test1_test2.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>备份所有数据库的方法</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p --all-databases &gt; /home/evilrat/dbbak/localhost.sql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -u root -p</span><br><span class=\"line\">*******</span><br><span class=\"line\">create database <span class=\"built_in\">test</span>;</span><br><span class=\"line\">show databases;</span><br><span class=\"line\">use <span class=\"built_in\">test</span>;</span><br><span class=\"line\">show tables;</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/evilrat/dbbak/test.sql;</span><br><span class=\"line\">show tables;</span><br><span class=\"line\"><span class=\"built_in\">exit</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p>一直在用oracle，今天学习了一下mysql如何导库。</p>\n<h2 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h2><p>mysqldump一般在/usr/bin/目录下，装晚mysql后就可以使用了。</p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><ol>\n<li>一般形式：mysqldump -h IP -u 用户名 -p 数据库名 &gt; 导出的文件名</li>\n</ol>\n<p>mysqldump和mysql登陆数据库的格式差不多，-h指定ip，-u指定登陆用户，-p指定输入密码。后面加上输出重定向到文件名。</p>\n<p>这种一般形式是导出此数据库中的所有表和数据。</p>\n<ol start=\"2\">\n<li>导出数据库所有表结构，但不导出数据。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p -d <span class=\"built_in\">test</span> &gt; /home/evilrat/dbbak/test.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>导出某张表的表结构，不含数据。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p -d <span class=\"built_in\">test</span> t_user &gt; /home/evilrat/dbbak/tuser.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>备份多个数据库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p --databases test1 test2 &gt; /home/evilrat/dbbak/test1_test2.sql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>备份所有数据库的方法</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -u root -p --all-databases &gt; /home/evilrat/dbbak/localhost.sql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -u root -p</span><br><span class=\"line\">*******</span><br><span class=\"line\">create database <span class=\"built_in\">test</span>;</span><br><span class=\"line\">show databases;</span><br><span class=\"line\">use <span class=\"built_in\">test</span>;</span><br><span class=\"line\">show tables;</span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/evilrat/dbbak/test.sql;</span><br><span class=\"line\">show tables;</span><br><span class=\"line\"><span class=\"built_in\">exit</span>;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"java多线程总结","date":"2018-06-07T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n最近面试两场，都是银行保险类的项目，面试官都问了我多线程的一些问题。今天抽空总结一下。\n\n## 相关概念\n\n1. 进程：一段程序的执行过程。是操作系统动态执行的基本单元，也是资源分配的基本单元。进程可以理解为是“进行中的程序”，处理器赋予时，程序才变成活动的，也就是进程。\n2. 程序：指令和数据的有序集合。本身是静态的概念。\n3. 线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。\n4. 多线程：在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，<font color=red>不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。</font>线程是在同一时间需要完成多项任务的时候实现的。\n5. 进程和线程的相同与不同：<br>\n&ensp;不同点：<br>\n&ensp;&ensp;&ensp;进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）。多进程是指操作系统能同时运行多个任务（程序）。<br>\n&ensp;&ensp;&ensp;线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）。多线程是指在同一程序中有多个顺序流在执行。<br>\n&ensp;相同点：<br>\n&ensp;&ensp;&ensp;线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。\n\n## 实现多线程\n在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口。(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用）。\n#### 实现Runnable接口比继承Thread类所具有的优势：\n1. 适合多个相同的程序代码的线程去处理同一个资源\n2. 可以避免java中的单继承的限制\n3. 增加程序的健壮性，代码可以被多个线程共享，代码和数据独立\n4. 线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类\n\n## 线程状态转换\n<img src='20150309140927553.jpeg'>\n\n1. 新建状态（New）：新创建了一个线程对象。\n2. 就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n3. 运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。\n4. 阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n    1.  等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)\n    2. 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n    3. 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）\n5. 死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n\n","source":"_posts/2018-06-08-kongzheng1993-java多线程总结.md","raw":"---\nlayout: post\ntitle: \"java多线程总结\"\ndate: 2018-06-08\nexcerpt: \"java 多线程\"\ntags: [java,多线程,安全]\ncategories: [java]\ncomments: true\n---\n\n最近面试两场，都是银行保险类的项目，面试官都问了我多线程的一些问题。今天抽空总结一下。\n\n## 相关概念\n\n1. 进程：一段程序的执行过程。是操作系统动态执行的基本单元，也是资源分配的基本单元。进程可以理解为是“进行中的程序”，处理器赋予时，程序才变成活动的，也就是进程。\n2. 程序：指令和数据的有序集合。本身是静态的概念。\n3. 线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。\n4. 多线程：在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，<font color=red>不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。</font>线程是在同一时间需要完成多项任务的时候实现的。\n5. 进程和线程的相同与不同：<br>\n&ensp;不同点：<br>\n&ensp;&ensp;&ensp;进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）。多进程是指操作系统能同时运行多个任务（程序）。<br>\n&ensp;&ensp;&ensp;线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）。多线程是指在同一程序中有多个顺序流在执行。<br>\n&ensp;相同点：<br>\n&ensp;&ensp;&ensp;线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。\n\n## 实现多线程\n在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口。(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用）。\n#### 实现Runnable接口比继承Thread类所具有的优势：\n1. 适合多个相同的程序代码的线程去处理同一个资源\n2. 可以避免java中的单继承的限制\n3. 增加程序的健壮性，代码可以被多个线程共享，代码和数据独立\n4. 线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类\n\n## 线程状态转换\n<img src='20150309140927553.jpeg'>\n\n1. 新建状态（New）：新创建了一个线程对象。\n2. 就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。\n3. 运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。\n4. 阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：\n    1.  等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)\n    2. 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。\n    3. 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）\n5. 死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。\n\n","slug":"kongzheng1993-java多线程总结","published":1,"updated":"2019-01-26T09:37:47.574Z","photos":[],"link":"","_id":"cjwaviv7h001a41xn8dz2vo6t","content":"<p>最近面试两场，都是银行保险类的项目，面试官都问了我多线程的一些问题。今天抽空总结一下。</p>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><ol>\n<li>进程：一段程序的执行过程。是操作系统动态执行的基本单元，也是资源分配的基本单元。进程可以理解为是“进行中的程序”，处理器赋予时，程序才变成活动的，也就是进程。</li>\n<li>程序：指令和数据的有序集合。本身是静态的概念。</li>\n<li>线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</li>\n<li>多线程：在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，<font color=\"red\">不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。</font>线程是在同一时间需要完成多项任务的时候实现的。</li>\n<li>进程和线程的相同与不同：<br><br>&ensp;不同点：<br><br>&ensp;&ensp;&ensp;进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n个线程。（进程是资源分配的最小单位）。多进程是指操作系统能同时运行多个任务（程序）。<br><br>&ensp;&ensp;&ensp;线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）。多线程是指在同一程序中有多个顺序流在执行。<br><br>&ensp;相同点：<br><br>&ensp;&ensp;&ensp;线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。</li>\n</ol>\n<h2 id=\"实现多线程\"><a href=\"#实现多线程\" class=\"headerlink\" title=\"实现多线程\"></a>实现多线程</h2><p>在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口。(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用）。</p>\n<h4 id=\"实现Runnable接口比继承Thread类所具有的优势：\"><a href=\"#实现Runnable接口比继承Thread类所具有的优势：\" class=\"headerlink\" title=\"实现Runnable接口比继承Thread类所具有的优势：\"></a>实现Runnable接口比继承Thread类所具有的优势：</h4><ol>\n<li>适合多个相同的程序代码的线程去处理同一个资源</li>\n<li>可以避免java中的单继承的限制</li>\n<li>增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</li>\n<li>线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</li>\n</ol>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><img src=\"/2018/06/08/kongzheng1993-java多线程总结/20150309140927553.jpeg\">\n\n<ol>\n<li>新建状态（New）：新创建了一个线程对象。</li>\n<li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li>\n<li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。</li>\n<li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ol>\n<li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li>\n<li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li>\n<li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</li>\n</ol>\n</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>\n</ol>\n","site":{"data":{}},"more":"<p>最近面试两场，都是银行保险类的项目，面试官都问了我多线程的一些问题。今天抽空总结一下。</p>\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><ol>\n<li>进程：一段程序的执行过程。是操作系统动态执行的基本单元，也是资源分配的基本单元。进程可以理解为是“进行中的程序”，处理器赋予时，程序才变成活动的，也就是进程。</li>\n<li>程序：指令和数据的有序集合。本身是静态的概念。</li>\n<li>线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</li>\n<li>多线程：在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，<font color=\"red\">不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。</font>线程是在同一时间需要完成多项任务的时候实现的。</li>\n<li>进程和线程的相同与不同：<br><br>&ensp;不同点：<br><br>&ensp;&ensp;&ensp;进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n个线程。（进程是资源分配的最小单位）。多进程是指操作系统能同时运行多个任务（程序）。<br><br>&ensp;&ensp;&ensp;线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）。多线程是指在同一程序中有多个顺序流在执行。<br><br>&ensp;相同点：<br><br>&ensp;&ensp;&ensp;线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。</li>\n</ol>\n<h2 id=\"实现多线程\"><a href=\"#实现多线程\" class=\"headerlink\" title=\"实现多线程\"></a>实现多线程</h2><p>在java中要想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口。(其实准确来讲，应该有三种，还有一种是实现Callable接口，并与Future、线程池结合使用）。</p>\n<h4 id=\"实现Runnable接口比继承Thread类所具有的优势：\"><a href=\"#实现Runnable接口比继承Thread类所具有的优势：\" class=\"headerlink\" title=\"实现Runnable接口比继承Thread类所具有的优势：\"></a>实现Runnable接口比继承Thread类所具有的优势：</h4><ol>\n<li>适合多个相同的程序代码的线程去处理同一个资源</li>\n<li>可以避免java中的单继承的限制</li>\n<li>增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</li>\n<li>线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</li>\n</ol>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><img src=\"/2018/06/08/kongzheng1993-java多线程总结/20150309140927553.jpeg\">\n\n<ol>\n<li>新建状态（New）：新创建了一个线程对象。</li>\n<li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li>\n<li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。</li>\n<li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ol>\n<li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li>\n<li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li>\n<li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</li>\n</ol>\n</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>\n</ol>\n"},{"layout":"post","title":"linux命令行下的ss","date":"2018-05-01T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n## 为什么不用shadowsocks-qt5\n\n我的pop! os基于ubuntu，因为装了图形界面，所以在用shadowsocks-qt5，而且很好用，只需要打开软件，就会自动连接朋友的ss-server。但是我的chromebook的fq问题一直存在，一度让我产生了卖掉它的想法。昨天开始我准备好好搞一下在shell运行ss客户端，然后了解到了有sslocal和ssserver这样的东西，简直是欣喜若狂，看到了随身携带我的cb的希望。\n\n## 开始搞\n\nsslocal和ssserver都依赖python，所以要先安装python。\n\n```bash\nsudo apt-get update\nsudo apt-get install python python-pip\n```\n之后开始安装shadowsocks\n\n```bash\npip install shadowsocks\n```\n\n运行ss\nsslocal -s server_ip -p server_port -k \"password\" -l local_port -t 600 -m aes-256-cfb\n\n可以通过新建一个配置文件来省去这些参数\n比如我们在/etc下新建一个shadowsock.json\n\n```bash\n{\n\"server\":\"server_ip\",\n\"server_port\":server_port,\n\"local_ip\":\"127.0.0.1\"\n\"local_port\":1080,\n\"password\":\"password\",\n\"timeout\":600,\n\"method\":\"aes-256-cfb\"\n}\n```\n\n然后就可以直接sslocal -c /etc/shadowsock.json来启动sslocal\n\n因为我的设备是chromebook，所以要配置一下chrom代理，我使用的是SwitchyOmega，可以去google商店下载，但是如果环境允许，可以从github下载，然后托到chrome插件里。然后配置一下SwitchyOmega，新建个情景模式，选择代理服务器，用socks5，地址和端口就是sslocal的配置中的local_ip和local_port，然后设置一下自动切换，在按照规则列表匹配请求后面选择刚才新建的SS，默认情景模式选择直接连接。点击应用选项保存。再往下规则列表设置选择AutoProxy 然后将“https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt”填进去，点击下面的立即更新情景模式，会有提示更新成功！这样就配置完了。\n\n在启动sslocal之后，点击chrome右上角的SwitchyOmega图表，选择自动切换，工具会根据gfwlist.txt的配置自动切换是否将请求转发到你的local_ip的local_port。可以节省ss服务器的流量。\n\n## 总结\n\n总体来说还是比较顺利的，以后遇到什么问题要学会思考，不要盲目的尝试。要了解原理，像这次我遇到了很多报错，我都`more sslocal`看了脚本代码了，而且前面尝试了一个自动安装配置ss的脚本，wget一个脚本shadowsocks.sh，然后`./shadowsocks.sh install`就可以，但是我遇到了很多问题，也是进去好好研究了一下人家的代码。虽然最后这个方法没有研究透，不过能看一下大神们写的脚本也很好啊！！！","source":"_posts/2018-05-02-kongzheng1993-linux命令行下的ss.md","raw":"---\nlayout: post\ntitle: \"linux命令行下的ss\"\ndate: 2018-05-02\nexcerpt: \"linux ss\"\ntags: [linux,ss,console]\ncategories: [linux,ss]\ncomments: true\n---\n\n## 为什么不用shadowsocks-qt5\n\n我的pop! os基于ubuntu，因为装了图形界面，所以在用shadowsocks-qt5，而且很好用，只需要打开软件，就会自动连接朋友的ss-server。但是我的chromebook的fq问题一直存在，一度让我产生了卖掉它的想法。昨天开始我准备好好搞一下在shell运行ss客户端，然后了解到了有sslocal和ssserver这样的东西，简直是欣喜若狂，看到了随身携带我的cb的希望。\n\n## 开始搞\n\nsslocal和ssserver都依赖python，所以要先安装python。\n\n```bash\nsudo apt-get update\nsudo apt-get install python python-pip\n```\n之后开始安装shadowsocks\n\n```bash\npip install shadowsocks\n```\n\n运行ss\nsslocal -s server_ip -p server_port -k \"password\" -l local_port -t 600 -m aes-256-cfb\n\n可以通过新建一个配置文件来省去这些参数\n比如我们在/etc下新建一个shadowsock.json\n\n```bash\n{\n\"server\":\"server_ip\",\n\"server_port\":server_port,\n\"local_ip\":\"127.0.0.1\"\n\"local_port\":1080,\n\"password\":\"password\",\n\"timeout\":600,\n\"method\":\"aes-256-cfb\"\n}\n```\n\n然后就可以直接sslocal -c /etc/shadowsock.json来启动sslocal\n\n因为我的设备是chromebook，所以要配置一下chrom代理，我使用的是SwitchyOmega，可以去google商店下载，但是如果环境允许，可以从github下载，然后托到chrome插件里。然后配置一下SwitchyOmega，新建个情景模式，选择代理服务器，用socks5，地址和端口就是sslocal的配置中的local_ip和local_port，然后设置一下自动切换，在按照规则列表匹配请求后面选择刚才新建的SS，默认情景模式选择直接连接。点击应用选项保存。再往下规则列表设置选择AutoProxy 然后将“https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt”填进去，点击下面的立即更新情景模式，会有提示更新成功！这样就配置完了。\n\n在启动sslocal之后，点击chrome右上角的SwitchyOmega图表，选择自动切换，工具会根据gfwlist.txt的配置自动切换是否将请求转发到你的local_ip的local_port。可以节省ss服务器的流量。\n\n## 总结\n\n总体来说还是比较顺利的，以后遇到什么问题要学会思考，不要盲目的尝试。要了解原理，像这次我遇到了很多报错，我都`more sslocal`看了脚本代码了，而且前面尝试了一个自动安装配置ss的脚本，wget一个脚本shadowsocks.sh，然后`./shadowsocks.sh install`就可以，但是我遇到了很多问题，也是进去好好研究了一下人家的代码。虽然最后这个方法没有研究透，不过能看一下大神们写的脚本也很好啊！！！","slug":"kongzheng1993-linux命令行下的ss","published":1,"updated":"2019-01-26T09:37:47.574Z","photos":[],"link":"","_id":"cjwaviv7j001c41xnvmc1hebc","content":"<h2 id=\"为什么不用shadowsocks-qt5\"><a href=\"#为什么不用shadowsocks-qt5\" class=\"headerlink\" title=\"为什么不用shadowsocks-qt5\"></a>为什么不用shadowsocks-qt5</h2><p>我的pop! os基于ubuntu，因为装了图形界面，所以在用shadowsocks-qt5，而且很好用，只需要打开软件，就会自动连接朋友的ss-server。但是我的chromebook的fq问题一直存在，一度让我产生了卖掉它的想法。昨天开始我准备好好搞一下在shell运行ss客户端，然后了解到了有sslocal和ssserver这样的东西，简直是欣喜若狂，看到了随身携带我的cb的希望。</p>\n<h2 id=\"开始搞\"><a href=\"#开始搞\" class=\"headerlink\" title=\"开始搞\"></a>开始搞</h2><p>sslocal和ssserver都依赖python，所以要先安装python。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python python-pip</span><br></pre></td></tr></table></figure>\n\n<p>之后开始安装shadowsocks</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>运行ss<br>sslocal -s server_ip -p server_port -k “password” -l local_port -t 600 -m aes-256-cfb</p>\n<p>可以通过新建一个配置文件来省去这些参数<br>比如我们在/etc下新建一个shadowsock.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"server_ip\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:server_port,</span><br><span class=\"line\"><span class=\"string\">\"local_ip\"</span>:<span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"password\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:600,</span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以直接sslocal -c /etc/shadowsock.json来启动sslocal</p>\n<p>因为我的设备是chromebook，所以要配置一下chrom代理，我使用的是SwitchyOmega，可以去google商店下载，但是如果环境允许，可以从github下载，然后托到chrome插件里。然后配置一下SwitchyOmega，新建个情景模式，选择代理服务器，用socks5，地址和端口就是sslocal的配置中的local_ip和local_port，然后设置一下自动切换，在按照规则列表匹配请求后面选择刚才新建的SS，默认情景模式选择直接连接。点击应用选项保存。再往下规则列表设置选择AutoProxy 然后将“<a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt”填进去，点击下面的立即更新情景模式，会有提示更新成功！这样就配置完了。\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt”填进去，点击下面的立即更新情景模式，会有提示更新成功！这样就配置完了。</a></p>\n<p>在启动sslocal之后，点击chrome右上角的SwitchyOmega图表，选择自动切换，工具会根据gfwlist.txt的配置自动切换是否将请求转发到你的local_ip的local_port。可以节省ss服务器的流量。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来说还是比较顺利的，以后遇到什么问题要学会思考，不要盲目的尝试。要了解原理，像这次我遇到了很多报错，我都<code>more sslocal</code>看了脚本代码了，而且前面尝试了一个自动安装配置ss的脚本，wget一个脚本shadowsocks.sh，然后<code>./shadowsocks.sh install</code>就可以，但是我遇到了很多问题，也是进去好好研究了一下人家的代码。虽然最后这个方法没有研究透，不过能看一下大神们写的脚本也很好啊！！！</p>\n","site":{"data":{}},"more":"<h2 id=\"为什么不用shadowsocks-qt5\"><a href=\"#为什么不用shadowsocks-qt5\" class=\"headerlink\" title=\"为什么不用shadowsocks-qt5\"></a>为什么不用shadowsocks-qt5</h2><p>我的pop! os基于ubuntu，因为装了图形界面，所以在用shadowsocks-qt5，而且很好用，只需要打开软件，就会自动连接朋友的ss-server。但是我的chromebook的fq问题一直存在，一度让我产生了卖掉它的想法。昨天开始我准备好好搞一下在shell运行ss客户端，然后了解到了有sslocal和ssserver这样的东西，简直是欣喜若狂，看到了随身携带我的cb的希望。</p>\n<h2 id=\"开始搞\"><a href=\"#开始搞\" class=\"headerlink\" title=\"开始搞\"></a>开始搞</h2><p>sslocal和ssserver都依赖python，所以要先安装python。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python python-pip</span><br></pre></td></tr></table></figure>\n\n<p>之后开始安装shadowsocks</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>运行ss<br>sslocal -s server_ip -p server_port -k “password” -l local_port -t 600 -m aes-256-cfb</p>\n<p>可以通过新建一个配置文件来省去这些参数<br>比如我们在/etc下新建一个shadowsock.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"server\"</span>:<span class=\"string\">\"server_ip\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"server_port\"</span>:server_port,</span><br><span class=\"line\"><span class=\"string\">\"local_ip\"</span>:<span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"string\">\"local_port\"</span>:1080,</span><br><span class=\"line\"><span class=\"string\">\"password\"</span>:<span class=\"string\">\"password\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"timeout\"</span>:600,</span><br><span class=\"line\"><span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以直接sslocal -c /etc/shadowsock.json来启动sslocal</p>\n<p>因为我的设备是chromebook，所以要配置一下chrom代理，我使用的是SwitchyOmega，可以去google商店下载，但是如果环境允许，可以从github下载，然后托到chrome插件里。然后配置一下SwitchyOmega，新建个情景模式，选择代理服务器，用socks5，地址和端口就是sslocal的配置中的local_ip和local_port，然后设置一下自动切换，在按照规则列表匹配请求后面选择刚才新建的SS，默认情景模式选择直接连接。点击应用选项保存。再往下规则列表设置选择AutoProxy 然后将“<a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt”填进去，点击下面的立即更新情景模式，会有提示更新成功！这样就配置完了。\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt”填进去，点击下面的立即更新情景模式，会有提示更新成功！这样就配置完了。</a></p>\n<p>在启动sslocal之后，点击chrome右上角的SwitchyOmega图表，选择自动切换，工具会根据gfwlist.txt的配置自动切换是否将请求转发到你的local_ip的local_port。可以节省ss服务器的流量。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来说还是比较顺利的，以后遇到什么问题要学会思考，不要盲目的尝试。要了解原理，像这次我遇到了很多报错，我都<code>more sslocal</code>看了脚本代码了，而且前面尝试了一个自动安装配置ss的脚本，wget一个脚本shadowsocks.sh，然后<code>./shadowsocks.sh install</code>就可以，但是我遇到了很多问题，也是进去好好研究了一下人家的代码。虽然最后这个方法没有研究透，不过能看一下大神们写的脚本也很好啊！！！</p>\n"},{"layout":"post","title":"Java IO","date":"2016-07-21T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## 有关字符串的笔记\n\n\n最近学习到StringBuffer，心中有好些疑问，搜索了一些关于String，StringBuffer，StringBuilder的东西，现在整理一下。\n\n关于这三个类在字符串处理中的位置不言而喻，那么他们到底有什么优缺点，到底什么时候该用谁呢？下面我们从以下几点说明一下：\n\n### 三者在执行速度方面的比较：StringBuilder >  StringBuffer  >  String\n\n### String <（StringBuffer，StringBuilder）的原因\n\n　　　　String：字符串常量\n\n　　　　StringBuffer：字符串变量\n\n　　　　StringBuilder：字符串变量\n\n从上面的名字可以看到，String是“字符串常量”，也就是不可改变的对象。对于这句话的理解你可能会产生这样一个疑问  ，比如这段代码：\n\n```\n\n\n String s = \"abcd\";\n s = s+1;\n System.out.print(s);// result : abcd1\n\n\n```\n\n我们明明就是改变了String型的变量s的，为什么说是没有改变呢? 其实这是一种欺骗，JVM是这样解析这段代码的：首先创建对象s，赋予一个abcd，然后再创建一个新的对象s用来　　　　执行第二行代码，也就是说我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，由于这种机制，每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会变为垃圾被ＧＣ回收掉，可想而知这样执行效率会有多底。\n\n而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。\n\n### 一个特殊的例子：\n\n```\n\n String str = “This is only a” + “ simple” + “ test”;\n StringBuffer builder = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);\n\n \n```\n　　\n\n你会很惊讶的发现，生成str对象的速度简直太快了，而这个时候StringBuffer居然速度上根本一点都不占优势。其实这是JVM的一个把戏，实际上：\n\n\n```\n\n　　　　String str = “This is only a” + “ simple” + “test”;\n\n```\n\n\n其实就是：\n\n```\n\n　　　　String str = “This is only a simple test”;\n\n\n```\n\n所以不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的String对象的话，速度就没那么快了，譬如：\n\n```\n\n\n　　　　String str2 = “This is only a”;\n\n　　　　String str3 = “ simple”;\n\n　　　　String str4 = “ test”;\n\n　　　　String str1 = str2 +str3 + str4;\n\n\n```\n\n\n\n这时候JVM会规规矩矩的按照原来的方式去做。\n\n### StringBuilder与 StringBuffer\n\n　　　　StringBuilder：线程非安全的\n\n　　　　StringBuffer：线程安全的\n\n当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。\n\n \n\n### 对于三者使用的总结： \n\n1.如果要操作少量的数据用 = String\n2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder\n3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\" data-title=\"String\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","source":"_posts/2017-03-08-kongzheng1993-有关字符串的笔记.md","raw":"---\nlayout: post\ntitle:  \"Java IO\"\ndate:   2016-07-22\nexcerpt: \"Java IO\"\ntag:\n- oop\ncomments: true\n---\n\n\n## 有关字符串的笔记\n\n\n最近学习到StringBuffer，心中有好些疑问，搜索了一些关于String，StringBuffer，StringBuilder的东西，现在整理一下。\n\n关于这三个类在字符串处理中的位置不言而喻，那么他们到底有什么优缺点，到底什么时候该用谁呢？下面我们从以下几点说明一下：\n\n### 三者在执行速度方面的比较：StringBuilder >  StringBuffer  >  String\n\n### String <（StringBuffer，StringBuilder）的原因\n\n　　　　String：字符串常量\n\n　　　　StringBuffer：字符串变量\n\n　　　　StringBuilder：字符串变量\n\n从上面的名字可以看到，String是“字符串常量”，也就是不可改变的对象。对于这句话的理解你可能会产生这样一个疑问  ，比如这段代码：\n\n```\n\n\n String s = \"abcd\";\n s = s+1;\n System.out.print(s);// result : abcd1\n\n\n```\n\n我们明明就是改变了String型的变量s的，为什么说是没有改变呢? 其实这是一种欺骗，JVM是这样解析这段代码的：首先创建对象s，赋予一个abcd，然后再创建一个新的对象s用来　　　　执行第二行代码，也就是说我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，由于这种机制，每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会变为垃圾被ＧＣ回收掉，可想而知这样执行效率会有多底。\n\n而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。\n\n### 一个特殊的例子：\n\n```\n\n String str = “This is only a” + “ simple” + “ test”;\n StringBuffer builder = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);\n\n \n```\n　　\n\n你会很惊讶的发现，生成str对象的速度简直太快了，而这个时候StringBuffer居然速度上根本一点都不占优势。其实这是JVM的一个把戏，实际上：\n\n\n```\n\n　　　　String str = “This is only a” + “ simple” + “test”;\n\n```\n\n\n其实就是：\n\n```\n\n　　　　String str = “This is only a simple test”;\n\n\n```\n\n所以不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的String对象的话，速度就没那么快了，譬如：\n\n```\n\n\n　　　　String str2 = “This is only a”;\n\n　　　　String str3 = “ simple”;\n\n　　　　String str4 = “ test”;\n\n　　　　String str1 = str2 +str3 + str4;\n\n\n```\n\n\n\n这时候JVM会规规矩矩的按照原来的方式去做。\n\n### StringBuilder与 StringBuffer\n\n　　　　StringBuilder：线程非安全的\n\n　　　　StringBuffer：线程安全的\n\n当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。\n\n \n\n### 对于三者使用的总结： \n\n1.如果要操作少量的数据用 = String\n2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder\n3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer\n\n\n\n\n\n\n\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\" data-title=\"String\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>\n</html>\n","slug":"kongzheng1993-有关字符串的笔记","published":1,"updated":"2019-01-26T09:37:47.571Z","photos":[],"link":"","_id":"cjwaviv7p001g41xnfbd2w6p9","content":"<h2 id=\"有关字符串的笔记\"><a href=\"#有关字符串的笔记\" class=\"headerlink\" title=\"有关字符串的笔记\"></a>有关字符串的笔记</h2><p>最近学习到StringBuffer，心中有好些疑问，搜索了一些关于String，StringBuffer，StringBuilder的东西，现在整理一下。</p>\n<p>关于这三个类在字符串处理中的位置不言而喻，那么他们到底有什么优缺点，到底什么时候该用谁呢？下面我们从以下几点说明一下：</p>\n<h3 id=\"三者在执行速度方面的比较：StringBuilder-gt-StringBuffer-gt-String\"><a href=\"#三者在执行速度方面的比较：StringBuilder-gt-StringBuffer-gt-String\" class=\"headerlink\" title=\"三者在执行速度方面的比较：StringBuilder &gt;  StringBuffer  &gt;  String\"></a>三者在执行速度方面的比较：StringBuilder &gt;  StringBuffer  &gt;  String</h3><h3 id=\"String-lt-（StringBuffer，StringBuilder）的原因\"><a href=\"#String-lt-（StringBuffer，StringBuilder）的原因\" class=\"headerlink\" title=\"String &lt;（StringBuffer，StringBuilder）的原因\"></a>String &lt;（StringBuffer，StringBuilder）的原因</h3><p>　　　　String：字符串常量</p>\n<p>　　　　StringBuffer：字符串变量</p>\n<p>　　　　StringBuilder：字符串变量</p>\n<p>从上面的名字可以看到，String是“字符串常量”，也就是不可改变的对象。对于这句话的理解你可能会产生这样一个疑问  ，比如这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">String s = &quot;abcd&quot;;</span><br><span class=\"line\">s = s+1;</span><br><span class=\"line\">System.out.print(s);// result : abcd1</span><br></pre></td></tr></table></figure>\n\n<p>我们明明就是改变了String型的变量s的，为什么说是没有改变呢? 其实这是一种欺骗，JVM是这样解析这段代码的：首先创建对象s，赋予一个abcd，然后再创建一个新的对象s用来　　　　执行第二行代码，也就是说我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，由于这种机制，每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会变为垃圾被ＧＣ回收掉，可想而知这样执行效率会有多底。</p>\n<p>而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。</p>\n<h3 id=\"一个特殊的例子：\"><a href=\"#一个特殊的例子：\" class=\"headerlink\" title=\"一个特殊的例子：\"></a>一个特殊的例子：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String str = “This is only a” + “ simple” + “ test”;</span><br><span class=\"line\">StringBuffer builder = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);</span><br></pre></td></tr></table></figure>\n\n<p>　　</p>\n<p>你会很惊讶的发现，生成str对象的速度简直太快了，而这个时候StringBuffer居然速度上根本一点都不占优势。其实这是JVM的一个把戏，实际上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">　　　　String str = “This is only a” + “ simple” + “test”;</span><br></pre></td></tr></table></figure>\n\n<p>其实就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">　　　　String str = “This is only a simple test”;</span><br></pre></td></tr></table></figure>\n\n<p>所以不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的String对象的话，速度就没那么快了，譬如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str2 = “This is only a”;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str3 = “ simple”;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str4 = “ test”;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str1 = str2 +str3 + str4;</span><br></pre></td></tr></table></figure>\n\n<p>这时候JVM会规规矩矩的按照原来的方式去做。</p>\n<h3 id=\"StringBuilder与-StringBuffer\"><a href=\"#StringBuilder与-StringBuffer\" class=\"headerlink\" title=\"StringBuilder与 StringBuffer\"></a>StringBuilder与 StringBuffer</h3><p>　　　　StringBuilder：线程非安全的</p>\n<p>　　　　StringBuffer：线程安全的</p>\n<p>当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。</p>\n<h3 id=\"对于三者使用的总结：\"><a href=\"#对于三者使用的总结：\" class=\"headerlink\" title=\"对于三者使用的总结：\"></a>对于三者使用的总结：</h3><p>1.如果要操作少量的数据用 = String<br>2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder<br>3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\" data-title=\"String\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h2 id=\"有关字符串的笔记\"><a href=\"#有关字符串的笔记\" class=\"headerlink\" title=\"有关字符串的笔记\"></a>有关字符串的笔记</h2><p>最近学习到StringBuffer，心中有好些疑问，搜索了一些关于String，StringBuffer，StringBuilder的东西，现在整理一下。</p>\n<p>关于这三个类在字符串处理中的位置不言而喻，那么他们到底有什么优缺点，到底什么时候该用谁呢？下面我们从以下几点说明一下：</p>\n<h3 id=\"三者在执行速度方面的比较：StringBuilder-gt-StringBuffer-gt-String\"><a href=\"#三者在执行速度方面的比较：StringBuilder-gt-StringBuffer-gt-String\" class=\"headerlink\" title=\"三者在执行速度方面的比较：StringBuilder &gt;  StringBuffer  &gt;  String\"></a>三者在执行速度方面的比较：StringBuilder &gt;  StringBuffer  &gt;  String</h3><h3 id=\"String-lt-（StringBuffer，StringBuilder）的原因\"><a href=\"#String-lt-（StringBuffer，StringBuilder）的原因\" class=\"headerlink\" title=\"String &lt;（StringBuffer，StringBuilder）的原因\"></a>String &lt;（StringBuffer，StringBuilder）的原因</h3><p>　　　　String：字符串常量</p>\n<p>　　　　StringBuffer：字符串变量</p>\n<p>　　　　StringBuilder：字符串变量</p>\n<p>从上面的名字可以看到，String是“字符串常量”，也就是不可改变的对象。对于这句话的理解你可能会产生这样一个疑问  ，比如这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">String s = &quot;abcd&quot;;</span><br><span class=\"line\">s = s+1;</span><br><span class=\"line\">System.out.print(s);// result : abcd1</span><br></pre></td></tr></table></figure>\n\n<p>我们明明就是改变了String型的变量s的，为什么说是没有改变呢? 其实这是一种欺骗，JVM是这样解析这段代码的：首先创建对象s，赋予一个abcd，然后再创建一个新的对象s用来　　　　执行第二行代码，也就是说我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，由于这种机制，每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会变为垃圾被ＧＣ回收掉，可想而知这样执行效率会有多底。</p>\n<p>而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。</p>\n<h3 id=\"一个特殊的例子：\"><a href=\"#一个特殊的例子：\" class=\"headerlink\" title=\"一个特殊的例子：\"></a>一个特殊的例子：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String str = “This is only a” + “ simple” + “ test”;</span><br><span class=\"line\">StringBuffer builder = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);</span><br></pre></td></tr></table></figure>\n\n<p>　　</p>\n<p>你会很惊讶的发现，生成str对象的速度简直太快了，而这个时候StringBuffer居然速度上根本一点都不占优势。其实这是JVM的一个把戏，实际上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">　　　　String str = “This is only a” + “ simple” + “test”;</span><br></pre></td></tr></table></figure>\n\n<p>其实就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">　　　　String str = “This is only a simple test”;</span><br></pre></td></tr></table></figure>\n\n<p>所以不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的String对象的话，速度就没那么快了，譬如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str2 = “This is only a”;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str3 = “ simple”;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str4 = “ test”;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　String str1 = str2 +str3 + str4;</span><br></pre></td></tr></table></figure>\n\n<p>这时候JVM会规规矩矩的按照原来的方式去做。</p>\n<h3 id=\"StringBuilder与-StringBuffer\"><a href=\"#StringBuilder与-StringBuffer\" class=\"headerlink\" title=\"StringBuilder与 StringBuffer\"></a>StringBuilder与 StringBuffer</h3><p>　　　　StringBuilder：线程非安全的</p>\n<p>　　　　StringBuffer：线程安全的</p>\n<p>当我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。</p>\n<h3 id=\"对于三者使用的总结：\"><a href=\"#对于三者使用的总结：\" class=\"headerlink\" title=\"对于三者使用的总结：\"></a>对于三者使用的总结：</h3><p>1.如果要操作少量的数据用 = String<br>2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder<br>3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer</p>\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\" data-title=\"String\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-有关字符串的笔记/\"></div>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"Resume","date":"2019-05-29T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n\n# 联系方式\n\n- 手机：15810692477\n- Email：kongzheng1993@hotmail.com\n- QQ/微信号：767141624/KXMISA\n\n---\n\n# 个人信息\n\n - 孔征/男/1992 \n - 本科/菏泽学院计算机与信息工程系 \n - 毕业时间：2016年7月\n - 微博：[@困成了马](http://weibo.com/kongzheng1993)\n - 技术博客：[kongzheng1993.github.io](http://kongzheng1993.github.io)\n - Github: [https://github.com/kongzheng1993](https://github.com/kongzheng1993)\n - 期望职位：Java开发工程师\n\n---\n\n# 工作经验\n\n## 软通动力信息服务有限公司北京分公司 （2016年8月-2018年10月）\n中国移动在线服务公司北京分公司10086&12580呼叫中心开发运维工作。华为项目，使用华为呼叫中心技术，为中移在线北京分公司定制开发。\n\n## 亚信科技（中国）有限公司 （2018年10月至今）\n中国移动crm项目、客服项目、中移在线北京分公司统一接口平台、接口机等项目开发。\n\n---\n\n# 项目经验\n\n## 北京移动10086&12580开发运维 （2016年8月-2018年10月）\n### 工作内容\n负责10086和12580的需求开发、测试、上线和运维工作:\n1. 流程开发\n2. 数据库开发(Oracle)，包括procedure和job等。\n3. 数据库维护，包括各种数据库对象。服务器软件维护，包括华为ivr、aplogic、dtproxy、gfep、datastation和ftp等。 \n4. 基于dtproxy和gfep的接口开发。\n5. 需求上线操作。\n6. 日常问题定位。\n\n## testIVR配置文件生成工具 （2017年10月-2017年10月）\n### 项目介绍\n来到项目后发现大家使用的调试接口的工具testIVR(模拟ivr流程调用socket和http接口工具) 总是需要手动配置，而且错误率特别高，经常因为一个小问题找半天。在熟悉了testIVR之后，我使用python-tkinter写了一个自动生成testIVR配置文件的工具，目前在项目组内广泛应用，并得到了领导和客户的好评。\n### 实现方式\n使用python的tkinter库编写gui。通过获取用户在输入控件(Entry)中输入的ivr_id、dtproxy_ip、dtproxy_id和参数配置。编写 cleanparam()函数清洗找出入参，和出参个数。编写dogenerate()函数生成ivr和dtproxy的配置，并循环生成入参、出参配置。使用python的 pyinstaller工具生成exe可执行文件。详情请查看我的[github:GuiGenerateTestIVRConfig](https://github.com/kongzheng1993/GuiGenerateTestIVRConfig)\n\n## 会员摇奖系统 （2018年5月-2018年6月）\n### 项目介绍\n本系统是提供给微信、微博等运营平台的抽奖接口，后期会做成商城。\n### 实现方式\n使用MySQL数据库，使用ssm框架。 用户在页面填写手机号码获取验证码，调用阿里短信接口，实现短信验证。用户点击抽奖，后台将用户信息入库，判断用户是否中过奖(一 个用户在一次活动中只能中将一次)，并判断用户是否今日已经参加过活动(一个用户每日只能摇奖一次)，而后判断用户是否为没十次摇 奖记录的第六次，如果是则为中奖，修改数据库，将此条数据状态更新为中奖。返回包含中奖信息的JSON，前台显示中奖信息。 用户中奖后可以点击立即兑奖兑换相应的奖品，用户选择出行日期，通过ajax调用后台controller获取此次出行的相关信息显示在页面上。用 户输入手机号码，js调用后台方法判断是否为中奖号码。用户在页面选择出行人数，计算用户在扣除中奖后公司垫付的金额后的实际付款数目。用户点击支付来调用微信支付接口付款。 如果用户没有中奖，可以点击立即购买跳转到上面的兑奖页面，然后通过自费参加活动。详情请查看我的[github:TmShop](https://github.com/kongzheng1993/TmShop)\n\n## iBet彩票微信小程序 （2018年10月-2018年12月）\n### 项目内容\niBet彩票微信小程序。父母经营一个福利彩票投注站，因为国家规定网上禁止彩票销售，很多彩民不能及时前往投注站投注，这些彩民只能通过打电话或者微信联系投注，而且容易出现描述不清导致买错号码或者账务纠纷等问题，所以决定帮他们解决这个问题。采用微信小程序开发较快，而且彩民使用比较方便。彩民可以随时去投注站进行充值，在小程序提交充值申请，投注站在收款后审批申请，彩民即可在小程序“我”tab页中查看自己的余额。彩民可以在每日19时之前使用iBet彩票微信小程序选号、下单，后台进行数据入库。投注站可以在每日19时以后通过管理系统查看本投注站所有的订单，并打印彩票，当日上传照片。彩民可以在”已购买“tab页查看已购买彩票详情，点击可查看彩票照片。本项目使用ssm框架。考虑到投注站信息调用量大且不会轻易改变，使用redis保存各投注站信息。\n### 实现方式\n前端使用微信小程序，开发较快，学习成本较低。后台使用ssm框架，redis作缓存，mysql数据库。另有一个供投注站使用对管理系统，使用ssm框架，投注站管理员登陆后可以配置本投注站数据（上架玩法等），并在此系统完成彩民管理、订单查看和充值提现等操作。redis主要用来保存投注站配置信息。\n\n## 代理商供货信息 微信小程序 （2019年2月-2019年3月）\n### 项目介绍\n代理商供货信息小程序包含供应商入驻、用户发布消息、供应商产商品管理、用户搜索、用户下单、用户评价等功能。小程序根据用户定位信息显示本区县内供应商和发布信息。用户可查看附近供应商信息，可点击发布tab进行信息发布，包含出租、出售、求购、招聘等信息。\n### 责任描述\n负责主页、搜索页和定位页的小程序和后台系统开发。包含轮播图、搜索、定位、推荐产品、可自定义tab选项（附近、优惠等）、首页主体内容（供应商列表、发布信息列表）等。\n\n\n## 中移在线统一接口平台 （2018年10月至今）\n### 项目介绍\n此项目为中国移动在线公司北京分公司统一接口平台。此系统为中间层，中移在线北京分公司等10086IVR、营业厅一体机、app、网站等都通过调用此接口平台，由接口平台转接到能力提供方，再将能力响应信息返回给调用方。大部分接口要做一些数据格式的转换和数据内容的映射，以适应各个渠道的调用。\n此系统为分布式架构（nginx、tomcat、redis、mysql），使用ssm框架，涵盖jersey、dubbo、zookeeper等技术。通过一个web项目提供接口的配置功能，在页面可以进行接入接口、转接接口、接口映射、接入参数、转接参数、参数映射、接入渠道、渠道权限和能力等的配置。当收到调用，程序会通过调用url获取到通过redis/mysql获取到此接口的相关配置，并根据获取到的参数配置进行参数校验、参数处理、参数映射，调用转接接口获取响应后处理并返回给调用方。\n### 工作内容\n根据需求完成各类接口的开发、测试、联调、发布。完成了营业厅一体机身份验证、登陆、选号、获取写卡信息、写卡结果反馈全流程接口。在工作中不断深入、了解项目架构和公司框架。\n\n## 中移在线工单接口机 （2018年10月至今）\n### 项目介绍\n此项目为ssm架构，比较简陋，基本不进行中间处理，只提供工单类接口服务。此系统作为中间层，接收调用方请求，进行参数校验、映射后调用服务提供方，获取响应后返回给调用方。\n### 工作内容\n根据客户需求完成工单接口。\n在受理预约（移动用户向客服人员预约办理业务）需求中，在项目中使用quartz框架，为系统增加了作业调度功能。此需求是客服人员在页面填写客户预约内容（客户手机号码、客服人员手机号码、受理内容简述、预约时间等），通过调用接口将数据传到接口机，数据入库，在预约到时间发送短信给客户和客服人员。整合spring和quartz，每整点到db取出本小时内所有预约数据，按分钟为key存入本分钟内所有的预约数据。每整分钟在redis取出本分钟预约数据，循环下发短信。\n通过此需求，为系统增加了作业调度功能，为以后相似需求提供了模版，收到了领导和客户的好评。\n\n## 北京移动客服系统 （2018年12月至今）\n### 项目介绍\n此系统使用亚信AppFrame（封装了ssm、jquery、html等技术）框架，提供给北京移动客服人员使用，业务比较复杂。\n主要功能：\n1. 呼叫中心，客服可以通过此系·统呼叫移动客户，帮客户转接其他坐席。\n2. 工单，新建工单、工单派发、认领等功能等\n3. 服务，提供给其他系统等网络接口。\n4. 客户关系管理，客户黑灰红白名单录入、设置等，客户信息查询、修改等\n5. 后台进程，包括task、fp、tf等。\n### 工作内容\n在原有基础上新增、修改功能。完成黑灰名单自动填充失效时间、工单流转信息查询功能、向crm提供工单流转信息查询功能接口等需求。认真了解了公司框架，熟练完成前后端开发。\n\n---\n\n# 专业技能\n1. 熟悉Java，了解Python、Shell\n2. 熟练使用SSM等开源框架\n3. 熟练使用Dubbo分布式服务框架，熟悉zookeeper\n4. 熟练使用Kafka、ActiveMQ\n5. 熟练使用Redis\n6. 熟悉微信小程序的开发\n7. 熟练使用Mysql、Oracle数据库\n8. 熟悉Jsp、JavaScrip、Ajax、CSS等web技术\n9. 熟练使用Git、SVN、\bMaven\n10. 熟练使用IDEA、Eclipse等开发工具\n11. 了解Docker容器\n\n---\n\n# 自我评价\n毕业后在华为项目，养成了较好的职业素养，对工作积极负责，有创新意识和团队合作精神。虽然在传统行业，项目技术架构较为落后，但是我一直积极学习和使用热门技术，得到了领导的好评。态度端正，积极好学，平时喜欢篮球。目前在亚信科技，项目技术过于陈旧，希望到一个新的平台发展。\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。","source":"_posts/2016-05-21-kongzheng1993-resume.md","raw":"---\nlayout: post\ntitle: \"Resume\"\ndate: 2019-05-30\nexcerpt: \"resume 简历\"\ntags: [resume，简历]\ncategories: [resume]\ncomments: true\n---\n\n\n\n# 联系方式\n\n- 手机：15810692477\n- Email：kongzheng1993@hotmail.com\n- QQ/微信号：767141624/KXMISA\n\n---\n\n# 个人信息\n\n - 孔征/男/1992 \n - 本科/菏泽学院计算机与信息工程系 \n - 毕业时间：2016年7月\n - 微博：[@困成了马](http://weibo.com/kongzheng1993)\n - 技术博客：[kongzheng1993.github.io](http://kongzheng1993.github.io)\n - Github: [https://github.com/kongzheng1993](https://github.com/kongzheng1993)\n - 期望职位：Java开发工程师\n\n---\n\n# 工作经验\n\n## 软通动力信息服务有限公司北京分公司 （2016年8月-2018年10月）\n中国移动在线服务公司北京分公司10086&12580呼叫中心开发运维工作。华为项目，使用华为呼叫中心技术，为中移在线北京分公司定制开发。\n\n## 亚信科技（中国）有限公司 （2018年10月至今）\n中国移动crm项目、客服项目、中移在线北京分公司统一接口平台、接口机等项目开发。\n\n---\n\n# 项目经验\n\n## 北京移动10086&12580开发运维 （2016年8月-2018年10月）\n### 工作内容\n负责10086和12580的需求开发、测试、上线和运维工作:\n1. 流程开发\n2. 数据库开发(Oracle)，包括procedure和job等。\n3. 数据库维护，包括各种数据库对象。服务器软件维护，包括华为ivr、aplogic、dtproxy、gfep、datastation和ftp等。 \n4. 基于dtproxy和gfep的接口开发。\n5. 需求上线操作。\n6. 日常问题定位。\n\n## testIVR配置文件生成工具 （2017年10月-2017年10月）\n### 项目介绍\n来到项目后发现大家使用的调试接口的工具testIVR(模拟ivr流程调用socket和http接口工具) 总是需要手动配置，而且错误率特别高，经常因为一个小问题找半天。在熟悉了testIVR之后，我使用python-tkinter写了一个自动生成testIVR配置文件的工具，目前在项目组内广泛应用，并得到了领导和客户的好评。\n### 实现方式\n使用python的tkinter库编写gui。通过获取用户在输入控件(Entry)中输入的ivr_id、dtproxy_ip、dtproxy_id和参数配置。编写 cleanparam()函数清洗找出入参，和出参个数。编写dogenerate()函数生成ivr和dtproxy的配置，并循环生成入参、出参配置。使用python的 pyinstaller工具生成exe可执行文件。详情请查看我的[github:GuiGenerateTestIVRConfig](https://github.com/kongzheng1993/GuiGenerateTestIVRConfig)\n\n## 会员摇奖系统 （2018年5月-2018年6月）\n### 项目介绍\n本系统是提供给微信、微博等运营平台的抽奖接口，后期会做成商城。\n### 实现方式\n使用MySQL数据库，使用ssm框架。 用户在页面填写手机号码获取验证码，调用阿里短信接口，实现短信验证。用户点击抽奖，后台将用户信息入库，判断用户是否中过奖(一 个用户在一次活动中只能中将一次)，并判断用户是否今日已经参加过活动(一个用户每日只能摇奖一次)，而后判断用户是否为没十次摇 奖记录的第六次，如果是则为中奖，修改数据库，将此条数据状态更新为中奖。返回包含中奖信息的JSON，前台显示中奖信息。 用户中奖后可以点击立即兑奖兑换相应的奖品，用户选择出行日期，通过ajax调用后台controller获取此次出行的相关信息显示在页面上。用 户输入手机号码，js调用后台方法判断是否为中奖号码。用户在页面选择出行人数，计算用户在扣除中奖后公司垫付的金额后的实际付款数目。用户点击支付来调用微信支付接口付款。 如果用户没有中奖，可以点击立即购买跳转到上面的兑奖页面，然后通过自费参加活动。详情请查看我的[github:TmShop](https://github.com/kongzheng1993/TmShop)\n\n## iBet彩票微信小程序 （2018年10月-2018年12月）\n### 项目内容\niBet彩票微信小程序。父母经营一个福利彩票投注站，因为国家规定网上禁止彩票销售，很多彩民不能及时前往投注站投注，这些彩民只能通过打电话或者微信联系投注，而且容易出现描述不清导致买错号码或者账务纠纷等问题，所以决定帮他们解决这个问题。采用微信小程序开发较快，而且彩民使用比较方便。彩民可以随时去投注站进行充值，在小程序提交充值申请，投注站在收款后审批申请，彩民即可在小程序“我”tab页中查看自己的余额。彩民可以在每日19时之前使用iBet彩票微信小程序选号、下单，后台进行数据入库。投注站可以在每日19时以后通过管理系统查看本投注站所有的订单，并打印彩票，当日上传照片。彩民可以在”已购买“tab页查看已购买彩票详情，点击可查看彩票照片。本项目使用ssm框架。考虑到投注站信息调用量大且不会轻易改变，使用redis保存各投注站信息。\n### 实现方式\n前端使用微信小程序，开发较快，学习成本较低。后台使用ssm框架，redis作缓存，mysql数据库。另有一个供投注站使用对管理系统，使用ssm框架，投注站管理员登陆后可以配置本投注站数据（上架玩法等），并在此系统完成彩民管理、订单查看和充值提现等操作。redis主要用来保存投注站配置信息。\n\n## 代理商供货信息 微信小程序 （2019年2月-2019年3月）\n### 项目介绍\n代理商供货信息小程序包含供应商入驻、用户发布消息、供应商产商品管理、用户搜索、用户下单、用户评价等功能。小程序根据用户定位信息显示本区县内供应商和发布信息。用户可查看附近供应商信息，可点击发布tab进行信息发布，包含出租、出售、求购、招聘等信息。\n### 责任描述\n负责主页、搜索页和定位页的小程序和后台系统开发。包含轮播图、搜索、定位、推荐产品、可自定义tab选项（附近、优惠等）、首页主体内容（供应商列表、发布信息列表）等。\n\n\n## 中移在线统一接口平台 （2018年10月至今）\n### 项目介绍\n此项目为中国移动在线公司北京分公司统一接口平台。此系统为中间层，中移在线北京分公司等10086IVR、营业厅一体机、app、网站等都通过调用此接口平台，由接口平台转接到能力提供方，再将能力响应信息返回给调用方。大部分接口要做一些数据格式的转换和数据内容的映射，以适应各个渠道的调用。\n此系统为分布式架构（nginx、tomcat、redis、mysql），使用ssm框架，涵盖jersey、dubbo、zookeeper等技术。通过一个web项目提供接口的配置功能，在页面可以进行接入接口、转接接口、接口映射、接入参数、转接参数、参数映射、接入渠道、渠道权限和能力等的配置。当收到调用，程序会通过调用url获取到通过redis/mysql获取到此接口的相关配置，并根据获取到的参数配置进行参数校验、参数处理、参数映射，调用转接接口获取响应后处理并返回给调用方。\n### 工作内容\n根据需求完成各类接口的开发、测试、联调、发布。完成了营业厅一体机身份验证、登陆、选号、获取写卡信息、写卡结果反馈全流程接口。在工作中不断深入、了解项目架构和公司框架。\n\n## 中移在线工单接口机 （2018年10月至今）\n### 项目介绍\n此项目为ssm架构，比较简陋，基本不进行中间处理，只提供工单类接口服务。此系统作为中间层，接收调用方请求，进行参数校验、映射后调用服务提供方，获取响应后返回给调用方。\n### 工作内容\n根据客户需求完成工单接口。\n在受理预约（移动用户向客服人员预约办理业务）需求中，在项目中使用quartz框架，为系统增加了作业调度功能。此需求是客服人员在页面填写客户预约内容（客户手机号码、客服人员手机号码、受理内容简述、预约时间等），通过调用接口将数据传到接口机，数据入库，在预约到时间发送短信给客户和客服人员。整合spring和quartz，每整点到db取出本小时内所有预约数据，按分钟为key存入本分钟内所有的预约数据。每整分钟在redis取出本分钟预约数据，循环下发短信。\n通过此需求，为系统增加了作业调度功能，为以后相似需求提供了模版，收到了领导和客户的好评。\n\n## 北京移动客服系统 （2018年12月至今）\n### 项目介绍\n此系统使用亚信AppFrame（封装了ssm、jquery、html等技术）框架，提供给北京移动客服人员使用，业务比较复杂。\n主要功能：\n1. 呼叫中心，客服可以通过此系·统呼叫移动客户，帮客户转接其他坐席。\n2. 工单，新建工单、工单派发、认领等功能等\n3. 服务，提供给其他系统等网络接口。\n4. 客户关系管理，客户黑灰红白名单录入、设置等，客户信息查询、修改等\n5. 后台进程，包括task、fp、tf等。\n### 工作内容\n在原有基础上新增、修改功能。完成黑灰名单自动填充失效时间、工单流转信息查询功能、向crm提供工单流转信息查询功能接口等需求。认真了解了公司框架，熟练完成前后端开发。\n\n---\n\n# 专业技能\n1. 熟悉Java，了解Python、Shell\n2. 熟练使用SSM等开源框架\n3. 熟练使用Dubbo分布式服务框架，熟悉zookeeper\n4. 熟练使用Kafka、ActiveMQ\n5. 熟练使用Redis\n6. 熟悉微信小程序的开发\n7. 熟练使用Mysql、Oracle数据库\n8. 熟悉Jsp、JavaScrip、Ajax、CSS等web技术\n9. 熟练使用Git、SVN、\bMaven\n10. 熟练使用IDEA、Eclipse等开发工具\n11. 了解Docker容器\n\n---\n\n# 自我评价\n毕业后在华为项目，养成了较好的职业素养，对工作积极负责，有创新意识和团队合作精神。虽然在传统行业，项目技术架构较为落后，但是我一直积极学习和使用热门技术，得到了领导的好评。态度端正，积极好学，平时喜欢篮球。目前在亚信科技，项目技术过于陈旧，希望到一个新的平台发展。\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。","slug":"kongzheng1993-resume","published":1,"updated":"2019-05-30T15:23:56.641Z","photos":[],"link":"","_id":"cjwaviv8x003x41xnz502h2ij","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：15810692477</li>\n<li>Email：<a href=\"mailto:kongzheng1993@hotmail.com\" target=\"_blank\" rel=\"noopener\">kongzheng1993@hotmail.com</a></li>\n<li>QQ/微信号：767141624/KXMISA</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>孔征/男/1992 </li>\n<li>本科/菏泽学院计算机与信息工程系 </li>\n<li>毕业时间：2016年7月</li>\n<li>微博：<a href=\"http://weibo.com/kongzheng1993\" target=\"_blank\" rel=\"noopener\">@困成了马</a></li>\n<li>技术博客：<a href=\"http://kongzheng1993.github.io\">kongzheng1993.github.io</a></li>\n<li>Github: <a href=\"https://github.com/kongzheng1993\" target=\"_blank\" rel=\"noopener\">https://github.com/kongzheng1993</a></li>\n<li>期望职位：Java开发工程师</li>\n</ul>\n<hr>\n<h1 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h1><h2 id=\"软通动力信息服务有限公司北京分公司-（2016年8月-2018年10月）\"><a href=\"#软通动力信息服务有限公司北京分公司-（2016年8月-2018年10月）\" class=\"headerlink\" title=\"软通动力信息服务有限公司北京分公司 （2016年8月-2018年10月）\"></a>软通动力信息服务有限公司北京分公司 （2016年8月-2018年10月）</h2><p>中国移动在线服务公司北京分公司10086&amp;12580呼叫中心开发运维工作。华为项目，使用华为呼叫中心技术，为中移在线北京分公司定制开发。</p>\n<h2 id=\"亚信科技（中国）有限公司-（2018年10月至今）\"><a href=\"#亚信科技（中国）有限公司-（2018年10月至今）\" class=\"headerlink\" title=\"亚信科技（中国）有限公司 （2018年10月至今）\"></a>亚信科技（中国）有限公司 （2018年10月至今）</h2><p>中国移动crm项目、客服项目、中移在线北京分公司统一接口平台、接口机等项目开发。</p>\n<hr>\n<h1 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h1><h2 id=\"北京移动10086-amp-12580开发运维-（2016年8月-2018年10月）\"><a href=\"#北京移动10086-amp-12580开发运维-（2016年8月-2018年10月）\" class=\"headerlink\" title=\"北京移动10086&amp;12580开发运维 （2016年8月-2018年10月）\"></a>北京移动10086&amp;12580开发运维 （2016年8月-2018年10月）</h2><h3 id=\"工作内容\"><a href=\"#工作内容\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3><p>负责10086和12580的需求开发、测试、上线和运维工作:</p>\n<ol>\n<li>流程开发</li>\n<li>数据库开发(Oracle)，包括procedure和job等。</li>\n<li>数据库维护，包括各种数据库对象。服务器软件维护，包括华为ivr、aplogic、dtproxy、gfep、datastation和ftp等。 </li>\n<li>基于dtproxy和gfep的接口开发。</li>\n<li>需求上线操作。</li>\n<li>日常问题定位。</li>\n</ol>\n<h2 id=\"testIVR配置文件生成工具-（2017年10月-2017年10月）\"><a href=\"#testIVR配置文件生成工具-（2017年10月-2017年10月）\" class=\"headerlink\" title=\"testIVR配置文件生成工具 （2017年10月-2017年10月）\"></a>testIVR配置文件生成工具 （2017年10月-2017年10月）</h2><h3 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>来到项目后发现大家使用的调试接口的工具testIVR(模拟ivr流程调用socket和http接口工具) 总是需要手动配置，而且错误率特别高，经常因为一个小问题找半天。在熟悉了testIVR之后，我使用python-tkinter写了一个自动生成testIVR配置文件的工具，目前在项目组内广泛应用，并得到了领导和客户的好评。</p>\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>使用python的tkinter库编写gui。通过获取用户在输入控件(Entry)中输入的ivr_id、dtproxy_ip、dtproxy_id和参数配置。编写 cleanparam()函数清洗找出入参，和出参个数。编写dogenerate()函数生成ivr和dtproxy的配置，并循环生成入参、出参配置。使用python的 pyinstaller工具生成exe可执行文件。详情请查看我的<a href=\"https://github.com/kongzheng1993/GuiGenerateTestIVRConfig\" target=\"_blank\" rel=\"noopener\">github:GuiGenerateTestIVRConfig</a></p>\n<h2 id=\"会员摇奖系统-（2018年5月-2018年6月）\"><a href=\"#会员摇奖系统-（2018年5月-2018年6月）\" class=\"headerlink\" title=\"会员摇奖系统 （2018年5月-2018年6月）\"></a>会员摇奖系统 （2018年5月-2018年6月）</h2><h3 id=\"项目介绍-1\"><a href=\"#项目介绍-1\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>本系统是提供给微信、微博等运营平台的抽奖接口，后期会做成商城。</p>\n<h3 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>使用MySQL数据库，使用ssm框架。 用户在页面填写手机号码获取验证码，调用阿里短信接口，实现短信验证。用户点击抽奖，后台将用户信息入库，判断用户是否中过奖(一 个用户在一次活动中只能中将一次)，并判断用户是否今日已经参加过活动(一个用户每日只能摇奖一次)，而后判断用户是否为没十次摇 奖记录的第六次，如果是则为中奖，修改数据库，将此条数据状态更新为中奖。返回包含中奖信息的JSON，前台显示中奖信息。 用户中奖后可以点击立即兑奖兑换相应的奖品，用户选择出行日期，通过ajax调用后台controller获取此次出行的相关信息显示在页面上。用 户输入手机号码，js调用后台方法判断是否为中奖号码。用户在页面选择出行人数，计算用户在扣除中奖后公司垫付的金额后的实际付款数目。用户点击支付来调用微信支付接口付款。 如果用户没有中奖，可以点击立即购买跳转到上面的兑奖页面，然后通过自费参加活动。详情请查看我的<a href=\"https://github.com/kongzheng1993/TmShop\" target=\"_blank\" rel=\"noopener\">github:TmShop</a></p>\n<h2 id=\"iBet彩票微信小程序-（2018年10月-2018年12月）\"><a href=\"#iBet彩票微信小程序-（2018年10月-2018年12月）\" class=\"headerlink\" title=\"iBet彩票微信小程序 （2018年10月-2018年12月）\"></a>iBet彩票微信小程序 （2018年10月-2018年12月）</h2><h3 id=\"项目内容\"><a href=\"#项目内容\" class=\"headerlink\" title=\"项目内容\"></a>项目内容</h3><p>iBet彩票微信小程序。父母经营一个福利彩票投注站，因为国家规定网上禁止彩票销售，很多彩民不能及时前往投注站投注，这些彩民只能通过打电话或者微信联系投注，而且容易出现描述不清导致买错号码或者账务纠纷等问题，所以决定帮他们解决这个问题。采用微信小程序开发较快，而且彩民使用比较方便。彩民可以随时去投注站进行充值，在小程序提交充值申请，投注站在收款后审批申请，彩民即可在小程序“我”tab页中查看自己的余额。彩民可以在每日19时之前使用iBet彩票微信小程序选号、下单，后台进行数据入库。投注站可以在每日19时以后通过管理系统查看本投注站所有的订单，并打印彩票，当日上传照片。彩民可以在”已购买“tab页查看已购买彩票详情，点击可查看彩票照片。本项目使用ssm框架。考虑到投注站信息调用量大且不会轻易改变，使用redis保存各投注站信息。</p>\n<h3 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>前端使用微信小程序，开发较快，学习成本较低。后台使用ssm框架，redis作缓存，mysql数据库。另有一个供投注站使用对管理系统，使用ssm框架，投注站管理员登陆后可以配置本投注站数据（上架玩法等），并在此系统完成彩民管理、订单查看和充值提现等操作。redis主要用来保存投注站配置信息。</p>\n<h2 id=\"代理商供货信息-微信小程序-（2019年2月-2019年3月）\"><a href=\"#代理商供货信息-微信小程序-（2019年2月-2019年3月）\" class=\"headerlink\" title=\"代理商供货信息 微信小程序 （2019年2月-2019年3月）\"></a>代理商供货信息 微信小程序 （2019年2月-2019年3月）</h2><h3 id=\"项目介绍-2\"><a href=\"#项目介绍-2\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>代理商供货信息小程序包含供应商入驻、用户发布消息、供应商产商品管理、用户搜索、用户下单、用户评价等功能。小程序根据用户定位信息显示本区县内供应商和发布信息。用户可查看附近供应商信息，可点击发布tab进行信息发布，包含出租、出售、求购、招聘等信息。</p>\n<h3 id=\"责任描述\"><a href=\"#责任描述\" class=\"headerlink\" title=\"责任描述\"></a>责任描述</h3><p>负责主页、搜索页和定位页的小程序和后台系统开发。包含轮播图、搜索、定位、推荐产品、可自定义tab选项（附近、优惠等）、首页主体内容（供应商列表、发布信息列表）等。</p>\n<h2 id=\"中移在线统一接口平台-（2018年10月至今）\"><a href=\"#中移在线统一接口平台-（2018年10月至今）\" class=\"headerlink\" title=\"中移在线统一接口平台 （2018年10月至今）\"></a>中移在线统一接口平台 （2018年10月至今）</h2><h3 id=\"项目介绍-3\"><a href=\"#项目介绍-3\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>此项目为中国移动在线公司北京分公司统一接口平台。此系统为中间层，中移在线北京分公司等10086IVR、营业厅一体机、app、网站等都通过调用此接口平台，由接口平台转接到能力提供方，再将能力响应信息返回给调用方。大部分接口要做一些数据格式的转换和数据内容的映射，以适应各个渠道的调用。<br>此系统为分布式架构（nginx、tomcat、redis、mysql），使用ssm框架，涵盖jersey、dubbo、zookeeper等技术。通过一个web项目提供接口的配置功能，在页面可以进行接入接口、转接接口、接口映射、接入参数、转接参数、参数映射、接入渠道、渠道权限和能力等的配置。当收到调用，程序会通过调用url获取到通过redis/mysql获取到此接口的相关配置，并根据获取到的参数配置进行参数校验、参数处理、参数映射，调用转接接口获取响应后处理并返回给调用方。</p>\n<h3 id=\"工作内容-1\"><a href=\"#工作内容-1\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3><p>根据需求完成各类接口的开发、测试、联调、发布。完成了营业厅一体机身份验证、登陆、选号、获取写卡信息、写卡结果反馈全流程接口。在工作中不断深入、了解项目架构和公司框架。</p>\n<h2 id=\"中移在线工单接口机-（2018年10月至今）\"><a href=\"#中移在线工单接口机-（2018年10月至今）\" class=\"headerlink\" title=\"中移在线工单接口机 （2018年10月至今）\"></a>中移在线工单接口机 （2018年10月至今）</h2><h3 id=\"项目介绍-4\"><a href=\"#项目介绍-4\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>此项目为ssm架构，比较简陋，基本不进行中间处理，只提供工单类接口服务。此系统作为中间层，接收调用方请求，进行参数校验、映射后调用服务提供方，获取响应后返回给调用方。</p>\n<h3 id=\"工作内容-2\"><a href=\"#工作内容-2\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3><p>根据客户需求完成工单接口。<br>在受理预约（移动用户向客服人员预约办理业务）需求中，在项目中使用quartz框架，为系统增加了作业调度功能。此需求是客服人员在页面填写客户预约内容（客户手机号码、客服人员手机号码、受理内容简述、预约时间等），通过调用接口将数据传到接口机，数据入库，在预约到时间发送短信给客户和客服人员。整合spring和quartz，每整点到db取出本小时内所有预约数据，按分钟为key存入本分钟内所有的预约数据。每整分钟在redis取出本分钟预约数据，循环下发短信。<br>通过此需求，为系统增加了作业调度功能，为以后相似需求提供了模版，收到了领导和客户的好评。</p>\n<h2 id=\"北京移动客服系统-（2018年12月至今）\"><a href=\"#北京移动客服系统-（2018年12月至今）\" class=\"headerlink\" title=\"北京移动客服系统 （2018年12月至今）\"></a>北京移动客服系统 （2018年12月至今）</h2><h3 id=\"项目介绍-5\"><a href=\"#项目介绍-5\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>此系统使用亚信AppFrame（封装了ssm、jquery、html等技术）框架，提供给北京移动客服人员使用，业务比较复杂。<br>主要功能：</p>\n<ol>\n<li>呼叫中心，客服可以通过此系·统呼叫移动客户，帮客户转接其他坐席。</li>\n<li>工单，新建工单、工单派发、认领等功能等</li>\n<li>服务，提供给其他系统等网络接口。</li>\n<li>客户关系管理，客户黑灰红白名单录入、设置等，客户信息查询、修改等</li>\n<li>后台进程，包括task、fp、tf等。<h3 id=\"工作内容-3\"><a href=\"#工作内容-3\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3>在原有基础上新增、修改功能。完成黑灰名单自动填充失效时间、工单流转信息查询功能、向crm提供工单流转信息查询功能接口等需求。认真了解了公司框架，熟练完成前后端开发。</li>\n</ol>\n<hr>\n<h1 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h1><ol>\n<li>熟悉Java，了解Python、Shell</li>\n<li>熟练使用SSM等开源框架</li>\n<li>熟练使用Dubbo分布式服务框架，熟悉zookeeper</li>\n<li>熟练使用Kafka、ActiveMQ</li>\n<li>熟练使用Redis</li>\n<li>熟悉微信小程序的开发</li>\n<li>熟练使用Mysql、Oracle数据库</li>\n<li>熟悉Jsp、JavaScrip、Ajax、CSS等web技术</li>\n<li>熟练使用Git、SVN、\bMaven</li>\n<li>熟练使用IDEA、Eclipse等开发工具</li>\n<li>了解Docker容器</li>\n</ol>\n<hr>\n<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1><p>毕业后在华为项目，养成了较好的职业素养，对工作积极负责，有创新意识和团队合作精神。虽然在传统行业，项目技术架构较为落后，但是我一直积极学习和使用热门技术，得到了领导的好评。态度端正，积极好学，平时喜欢篮球。目前在亚信科技，项目技术过于陈旧，希望到一个新的平台发展。</p>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","site":{"data":{}},"more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：15810692477</li>\n<li>Email：<a href=\"mailto:kongzheng1993@hotmail.com\" target=\"_blank\" rel=\"noopener\">kongzheng1993@hotmail.com</a></li>\n<li>QQ/微信号：767141624/KXMISA</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>孔征/男/1992 </li>\n<li>本科/菏泽学院计算机与信息工程系 </li>\n<li>毕业时间：2016年7月</li>\n<li>微博：<a href=\"http://weibo.com/kongzheng1993\" target=\"_blank\" rel=\"noopener\">@困成了马</a></li>\n<li>技术博客：<a href=\"http://kongzheng1993.github.io\">kongzheng1993.github.io</a></li>\n<li>Github: <a href=\"https://github.com/kongzheng1993\" target=\"_blank\" rel=\"noopener\">https://github.com/kongzheng1993</a></li>\n<li>期望职位：Java开发工程师</li>\n</ul>\n<hr>\n<h1 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h1><h2 id=\"软通动力信息服务有限公司北京分公司-（2016年8月-2018年10月）\"><a href=\"#软通动力信息服务有限公司北京分公司-（2016年8月-2018年10月）\" class=\"headerlink\" title=\"软通动力信息服务有限公司北京分公司 （2016年8月-2018年10月）\"></a>软通动力信息服务有限公司北京分公司 （2016年8月-2018年10月）</h2><p>中国移动在线服务公司北京分公司10086&amp;12580呼叫中心开发运维工作。华为项目，使用华为呼叫中心技术，为中移在线北京分公司定制开发。</p>\n<h2 id=\"亚信科技（中国）有限公司-（2018年10月至今）\"><a href=\"#亚信科技（中国）有限公司-（2018年10月至今）\" class=\"headerlink\" title=\"亚信科技（中国）有限公司 （2018年10月至今）\"></a>亚信科技（中国）有限公司 （2018年10月至今）</h2><p>中国移动crm项目、客服项目、中移在线北京分公司统一接口平台、接口机等项目开发。</p>\n<hr>\n<h1 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h1><h2 id=\"北京移动10086-amp-12580开发运维-（2016年8月-2018年10月）\"><a href=\"#北京移动10086-amp-12580开发运维-（2016年8月-2018年10月）\" class=\"headerlink\" title=\"北京移动10086&amp;12580开发运维 （2016年8月-2018年10月）\"></a>北京移动10086&amp;12580开发运维 （2016年8月-2018年10月）</h2><h3 id=\"工作内容\"><a href=\"#工作内容\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3><p>负责10086和12580的需求开发、测试、上线和运维工作:</p>\n<ol>\n<li>流程开发</li>\n<li>数据库开发(Oracle)，包括procedure和job等。</li>\n<li>数据库维护，包括各种数据库对象。服务器软件维护，包括华为ivr、aplogic、dtproxy、gfep、datastation和ftp等。 </li>\n<li>基于dtproxy和gfep的接口开发。</li>\n<li>需求上线操作。</li>\n<li>日常问题定位。</li>\n</ol>\n<h2 id=\"testIVR配置文件生成工具-（2017年10月-2017年10月）\"><a href=\"#testIVR配置文件生成工具-（2017年10月-2017年10月）\" class=\"headerlink\" title=\"testIVR配置文件生成工具 （2017年10月-2017年10月）\"></a>testIVR配置文件生成工具 （2017年10月-2017年10月）</h2><h3 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>来到项目后发现大家使用的调试接口的工具testIVR(模拟ivr流程调用socket和http接口工具) 总是需要手动配置，而且错误率特别高，经常因为一个小问题找半天。在熟悉了testIVR之后，我使用python-tkinter写了一个自动生成testIVR配置文件的工具，目前在项目组内广泛应用，并得到了领导和客户的好评。</p>\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>使用python的tkinter库编写gui。通过获取用户在输入控件(Entry)中输入的ivr_id、dtproxy_ip、dtproxy_id和参数配置。编写 cleanparam()函数清洗找出入参，和出参个数。编写dogenerate()函数生成ivr和dtproxy的配置，并循环生成入参、出参配置。使用python的 pyinstaller工具生成exe可执行文件。详情请查看我的<a href=\"https://github.com/kongzheng1993/GuiGenerateTestIVRConfig\" target=\"_blank\" rel=\"noopener\">github:GuiGenerateTestIVRConfig</a></p>\n<h2 id=\"会员摇奖系统-（2018年5月-2018年6月）\"><a href=\"#会员摇奖系统-（2018年5月-2018年6月）\" class=\"headerlink\" title=\"会员摇奖系统 （2018年5月-2018年6月）\"></a>会员摇奖系统 （2018年5月-2018年6月）</h2><h3 id=\"项目介绍-1\"><a href=\"#项目介绍-1\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>本系统是提供给微信、微博等运营平台的抽奖接口，后期会做成商城。</p>\n<h3 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>使用MySQL数据库，使用ssm框架。 用户在页面填写手机号码获取验证码，调用阿里短信接口，实现短信验证。用户点击抽奖，后台将用户信息入库，判断用户是否中过奖(一 个用户在一次活动中只能中将一次)，并判断用户是否今日已经参加过活动(一个用户每日只能摇奖一次)，而后判断用户是否为没十次摇 奖记录的第六次，如果是则为中奖，修改数据库，将此条数据状态更新为中奖。返回包含中奖信息的JSON，前台显示中奖信息。 用户中奖后可以点击立即兑奖兑换相应的奖品，用户选择出行日期，通过ajax调用后台controller获取此次出行的相关信息显示在页面上。用 户输入手机号码，js调用后台方法判断是否为中奖号码。用户在页面选择出行人数，计算用户在扣除中奖后公司垫付的金额后的实际付款数目。用户点击支付来调用微信支付接口付款。 如果用户没有中奖，可以点击立即购买跳转到上面的兑奖页面，然后通过自费参加活动。详情请查看我的<a href=\"https://github.com/kongzheng1993/TmShop\" target=\"_blank\" rel=\"noopener\">github:TmShop</a></p>\n<h2 id=\"iBet彩票微信小程序-（2018年10月-2018年12月）\"><a href=\"#iBet彩票微信小程序-（2018年10月-2018年12月）\" class=\"headerlink\" title=\"iBet彩票微信小程序 （2018年10月-2018年12月）\"></a>iBet彩票微信小程序 （2018年10月-2018年12月）</h2><h3 id=\"项目内容\"><a href=\"#项目内容\" class=\"headerlink\" title=\"项目内容\"></a>项目内容</h3><p>iBet彩票微信小程序。父母经营一个福利彩票投注站，因为国家规定网上禁止彩票销售，很多彩民不能及时前往投注站投注，这些彩民只能通过打电话或者微信联系投注，而且容易出现描述不清导致买错号码或者账务纠纷等问题，所以决定帮他们解决这个问题。采用微信小程序开发较快，而且彩民使用比较方便。彩民可以随时去投注站进行充值，在小程序提交充值申请，投注站在收款后审批申请，彩民即可在小程序“我”tab页中查看自己的余额。彩民可以在每日19时之前使用iBet彩票微信小程序选号、下单，后台进行数据入库。投注站可以在每日19时以后通过管理系统查看本投注站所有的订单，并打印彩票，当日上传照片。彩民可以在”已购买“tab页查看已购买彩票详情，点击可查看彩票照片。本项目使用ssm框架。考虑到投注站信息调用量大且不会轻易改变，使用redis保存各投注站信息。</p>\n<h3 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>前端使用微信小程序，开发较快，学习成本较低。后台使用ssm框架，redis作缓存，mysql数据库。另有一个供投注站使用对管理系统，使用ssm框架，投注站管理员登陆后可以配置本投注站数据（上架玩法等），并在此系统完成彩民管理、订单查看和充值提现等操作。redis主要用来保存投注站配置信息。</p>\n<h2 id=\"代理商供货信息-微信小程序-（2019年2月-2019年3月）\"><a href=\"#代理商供货信息-微信小程序-（2019年2月-2019年3月）\" class=\"headerlink\" title=\"代理商供货信息 微信小程序 （2019年2月-2019年3月）\"></a>代理商供货信息 微信小程序 （2019年2月-2019年3月）</h2><h3 id=\"项目介绍-2\"><a href=\"#项目介绍-2\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>代理商供货信息小程序包含供应商入驻、用户发布消息、供应商产商品管理、用户搜索、用户下单、用户评价等功能。小程序根据用户定位信息显示本区县内供应商和发布信息。用户可查看附近供应商信息，可点击发布tab进行信息发布，包含出租、出售、求购、招聘等信息。</p>\n<h3 id=\"责任描述\"><a href=\"#责任描述\" class=\"headerlink\" title=\"责任描述\"></a>责任描述</h3><p>负责主页、搜索页和定位页的小程序和后台系统开发。包含轮播图、搜索、定位、推荐产品、可自定义tab选项（附近、优惠等）、首页主体内容（供应商列表、发布信息列表）等。</p>\n<h2 id=\"中移在线统一接口平台-（2018年10月至今）\"><a href=\"#中移在线统一接口平台-（2018年10月至今）\" class=\"headerlink\" title=\"中移在线统一接口平台 （2018年10月至今）\"></a>中移在线统一接口平台 （2018年10月至今）</h2><h3 id=\"项目介绍-3\"><a href=\"#项目介绍-3\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>此项目为中国移动在线公司北京分公司统一接口平台。此系统为中间层，中移在线北京分公司等10086IVR、营业厅一体机、app、网站等都通过调用此接口平台，由接口平台转接到能力提供方，再将能力响应信息返回给调用方。大部分接口要做一些数据格式的转换和数据内容的映射，以适应各个渠道的调用。<br>此系统为分布式架构（nginx、tomcat、redis、mysql），使用ssm框架，涵盖jersey、dubbo、zookeeper等技术。通过一个web项目提供接口的配置功能，在页面可以进行接入接口、转接接口、接口映射、接入参数、转接参数、参数映射、接入渠道、渠道权限和能力等的配置。当收到调用，程序会通过调用url获取到通过redis/mysql获取到此接口的相关配置，并根据获取到的参数配置进行参数校验、参数处理、参数映射，调用转接接口获取响应后处理并返回给调用方。</p>\n<h3 id=\"工作内容-1\"><a href=\"#工作内容-1\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3><p>根据需求完成各类接口的开发、测试、联调、发布。完成了营业厅一体机身份验证、登陆、选号、获取写卡信息、写卡结果反馈全流程接口。在工作中不断深入、了解项目架构和公司框架。</p>\n<h2 id=\"中移在线工单接口机-（2018年10月至今）\"><a href=\"#中移在线工单接口机-（2018年10月至今）\" class=\"headerlink\" title=\"中移在线工单接口机 （2018年10月至今）\"></a>中移在线工单接口机 （2018年10月至今）</h2><h3 id=\"项目介绍-4\"><a href=\"#项目介绍-4\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>此项目为ssm架构，比较简陋，基本不进行中间处理，只提供工单类接口服务。此系统作为中间层，接收调用方请求，进行参数校验、映射后调用服务提供方，获取响应后返回给调用方。</p>\n<h3 id=\"工作内容-2\"><a href=\"#工作内容-2\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3><p>根据客户需求完成工单接口。<br>在受理预约（移动用户向客服人员预约办理业务）需求中，在项目中使用quartz框架，为系统增加了作业调度功能。此需求是客服人员在页面填写客户预约内容（客户手机号码、客服人员手机号码、受理内容简述、预约时间等），通过调用接口将数据传到接口机，数据入库，在预约到时间发送短信给客户和客服人员。整合spring和quartz，每整点到db取出本小时内所有预约数据，按分钟为key存入本分钟内所有的预约数据。每整分钟在redis取出本分钟预约数据，循环下发短信。<br>通过此需求，为系统增加了作业调度功能，为以后相似需求提供了模版，收到了领导和客户的好评。</p>\n<h2 id=\"北京移动客服系统-（2018年12月至今）\"><a href=\"#北京移动客服系统-（2018年12月至今）\" class=\"headerlink\" title=\"北京移动客服系统 （2018年12月至今）\"></a>北京移动客服系统 （2018年12月至今）</h2><h3 id=\"项目介绍-5\"><a href=\"#项目介绍-5\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h3><p>此系统使用亚信AppFrame（封装了ssm、jquery、html等技术）框架，提供给北京移动客服人员使用，业务比较复杂。<br>主要功能：</p>\n<ol>\n<li>呼叫中心，客服可以通过此系·统呼叫移动客户，帮客户转接其他坐席。</li>\n<li>工单，新建工单、工单派发、认领等功能等</li>\n<li>服务，提供给其他系统等网络接口。</li>\n<li>客户关系管理，客户黑灰红白名单录入、设置等，客户信息查询、修改等</li>\n<li>后台进程，包括task、fp、tf等。<h3 id=\"工作内容-3\"><a href=\"#工作内容-3\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h3>在原有基础上新增、修改功能。完成黑灰名单自动填充失效时间、工单流转信息查询功能、向crm提供工单流转信息查询功能接口等需求。认真了解了公司框架，熟练完成前后端开发。</li>\n</ol>\n<hr>\n<h1 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h1><ol>\n<li>熟悉Java，了解Python、Shell</li>\n<li>熟练使用SSM等开源框架</li>\n<li>熟练使用Dubbo分布式服务框架，熟悉zookeeper</li>\n<li>熟练使用Kafka、ActiveMQ</li>\n<li>熟练使用Redis</li>\n<li>熟悉微信小程序的开发</li>\n<li>熟练使用Mysql、Oracle数据库</li>\n<li>熟悉Jsp、JavaScrip、Ajax、CSS等web技术</li>\n<li>熟练使用Git、SVN、\bMaven</li>\n<li>熟练使用IDEA、Eclipse等开发工具</li>\n<li>了解Docker容器</li>\n</ol>\n<hr>\n<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1><p>毕业后在华为项目，养成了较好的职业素养，对工作积极负责，有创新意识和团队合作精神。虽然在传统行业，项目技术架构较为落后，但是我一直积极学习和使用热门技术，得到了领导的好评。态度端正，积极好学，平时喜欢篮球。目前在亚信科技，项目技术过于陈旧，希望到一个新的平台发展。</p>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"},{"layout":"post","title":"About the Usage of Final","date":"2016-06-12T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n\n\n## 浅析Java中的final关键字\n\n　　谈到final关键字，想必很多人都不陌生，在使用匿名内部类的时候可能会经常用到final关键字。另外，Java中的String类就是一个final类，那么今天我们就来了解final这个关键字的用法。下面是本文的目录大纲：\n\n\n\n\n### 一.final关键字的基本用法\n\n　　在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来了解一下final关键字的基本用法。\n\n#### 1.修饰类\n\n　　当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。\n\n\n\n　　在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，尽量不要将类设计为final类。\n\n#### 2.修饰方法\n\n　　下面这段话摘自《Java编程思想》第四版第143页：\n\n　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“\n\n　　因此，如果只有在想明确禁止 该方法在子类中被覆盖的情况下才将方法设置为final的。\n\n　　注：类的private方法会隐式地被指定为final方法。\n\n#### 3.修饰变量\n\n　　修饰变量是final用得最多的地方，也是本文接下来要重点阐述的内容。首先了解一下final变量的基本语法：\n\n　　对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。\n\n　　举个例子：\n\n```\n\n    class Man{\n        private final int a=0;\n        pbulic Man{\n            i=1;\n            final Object obj=new Object();\n            obj=new Object();\n        }\n\n    }\n\n\n```\n\n\n　　上面的一段代码中，对变量i和obj的重新赋值都报错了。\n\n### 二.深入理解final关键字\n\n　　在了解了final关键字的基本用法之后，这一节我们来看一下final关键字容易混淆的地方。\n\n#### 1.类的final变量和普通变量有什么区别？\n\n　　当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。\n\n　　那么final变量和普通变量到底有何区别呢？下面请看一个例子：\n \n```\n\npublic class Test {\n    public static void main(String[] args)  {\n        String a = \"hello2\";  \n        final String b = \"hello\";\n        String d = \"hello\";\n        String c = b + 2;  \n        String e = d + 2;\n        System.out.println((a == c));\n        System.out.println((a == e));\n    }\n} \n\n\n```\n　　\n　　大家可以先想一下这道题的输出结果。为什么第一个比较结果为true，而第二个比较结果为fasle。这里面就是final变量和普通变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用。也就是说在用到该final变量的地方，相当于直接访问的这个常量，不需要在运行时确定。这种和C语言中的宏替换有点像。因此在上面的一段代码中，由于变量b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b 替换为它的  值。而对于变量d的访问却需要在运行时通过链接来进行。想必其中的区别大家应该明白了，不过要注意，只有在编译期间能确切知道final变量值的情况下，编译器才会进行这样的优化，比如下面的这段代码就不会进行优化：\n\n```\n\npublic class Test {\n    public static void main(String[] args)  {\n\n        String a = \"hello2\";  \n        final String b = getHello();\n        String c = b + 2;  \n        System.out.println((a == c));\n    }\n     \n    public static String getHello() {\n        return \"hello\";\n    }\n} \n\n\n```\n\n\n　　这段代码的输出结果为false。\n\n#### 2.被final修饰的引用变量指向的对象内容可变吗？\n\n　　在上面提到被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？看下面这个例子：\n\n```\n\npublic class Test {\n    public static void main(String[] args)  {\n        final MyClass myClass = new MyClass();\n        System.out.println(++myClass.i);\n    }\n}\nclass MyClass {\n    public int i = 0;\n} \n\n```\n\n　　这段代码可以顺利编译通过并且有输出结果，输出结果为1。这说明引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。\n\n#### 3.final和static\n\n　　很多时候会容易把static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。看下面这个例子：\n\n```\n\npublic class Test {\n    public static void main(String[] args)  {\n        MyClass myClass1 = new MyClass();\n        MyClass myClass2 = new MyClass();\n        System.out.println(myClass1.i);\n        System.out.println(myClass1.j);\n        System.out.println(myClass2.i);\n        System.out.println(myClass2.j);\n    }\n}\n\nclass MyClass {\n    public final double i = Math.random();\n    public static double j = Math.random();\n} \n\n```\n　　运行这段代码就会发现，每次打印的两个j值都是一样的，而i的值却是不同的。从这里就可以知道final和static变量的区别了。\n\n#### 4.匿名内部类中使用的外部局部变量为什么只能是final变量？\n\n　　这个问题请参见上一篇博文中《Java内部类详解》中的解释，在此处不再赘述。\n\n#### 5.关于final参数的问题\n\n　　关于网上流传的”当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量“这句话，我个人理解这样说是不恰当的。\n\n　　因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。\n\n　　看这个例子就清楚了：\n\n\n\n　　上面这段代码好像让人觉得用final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changeValue和main方法中的变量i根本就不是一个变量，因为java参数传递采用的是值传递，对于基本类型的变量，相当于直接将变量进行了拷贝。所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。\n\n　　再看下面这段代码：\n\n```\n\n\npublic class Test {\n\n    public static void main(String[] args)  {\n\n        MyClass myClass = new MyClass();\n\n        StringBuffer buffer = new StringBuffer(\"hello\");\n\n        myClass.changeValue(buffer);\n\n        System.out.println(buffer.toString());\n\n    }\n\n}\n\n \n\nclass MyClass {\n\n     \n\n    void changeValue(final StringBuffer buffer) {\n\n        buffer.append(\"world\");\n\n    }\n\n} \n\n\n```\n\n　　运行这段代码就会发现输出结果为 helloworld。很显然，用final进行修饰并没有阻止在changeValue中改变buffer指向的对象的内容。有人说假如把final去掉了，万一在changeValue中让buffer指向了其他对象怎么办。有这种想法的朋友可以自己动手写代码试一下这样的结果是什么，如果把final去掉了，然后在changeValue中让buffer指向了其他对象，也不会影响到main方法中的buffer，原因在于java采用的是值传递，对于引用变量，传递的是引用的值，也就是说让实参和形参同时指向了同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。\n\n　　所以关于网上流传的final参数的说法，我个人不是很赞同。\n\n参考资料：\n\n　　《Java编程思想》\n\n##### 本文摘自http://www.cnblogs.com/dolphin0520/p/3736238.html\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\" data-title=\"about the usage of final\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","source":"_posts/2016-06-13-kongzheng1993-aboutFinal.md","raw":"---\nlayout: post\ntitle: \"About the Usage of Final\"\ndate: 2016-06-13\nexcerpt: \"code or die\"\ntags: [sample post, images, test]\ncomments: true\n---\n\n\n\n\n## 浅析Java中的final关键字\n\n　　谈到final关键字，想必很多人都不陌生，在使用匿名内部类的时候可能会经常用到final关键字。另外，Java中的String类就是一个final类，那么今天我们就来了解final这个关键字的用法。下面是本文的目录大纲：\n\n\n\n\n### 一.final关键字的基本用法\n\n　　在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来了解一下final关键字的基本用法。\n\n#### 1.修饰类\n\n　　当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。\n\n\n\n　　在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，尽量不要将类设计为final类。\n\n#### 2.修饰方法\n\n　　下面这段话摘自《Java编程思想》第四版第143页：\n\n　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“\n\n　　因此，如果只有在想明确禁止 该方法在子类中被覆盖的情况下才将方法设置为final的。\n\n　　注：类的private方法会隐式地被指定为final方法。\n\n#### 3.修饰变量\n\n　　修饰变量是final用得最多的地方，也是本文接下来要重点阐述的内容。首先了解一下final变量的基本语法：\n\n　　对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。\n\n　　举个例子：\n\n```\n\n    class Man{\n        private final int a=0;\n        pbulic Man{\n            i=1;\n            final Object obj=new Object();\n            obj=new Object();\n        }\n\n    }\n\n\n```\n\n\n　　上面的一段代码中，对变量i和obj的重新赋值都报错了。\n\n### 二.深入理解final关键字\n\n　　在了解了final关键字的基本用法之后，这一节我们来看一下final关键字容易混淆的地方。\n\n#### 1.类的final变量和普通变量有什么区别？\n\n　　当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。\n\n　　那么final变量和普通变量到底有何区别呢？下面请看一个例子：\n \n```\n\npublic class Test {\n    public static void main(String[] args)  {\n        String a = \"hello2\";  \n        final String b = \"hello\";\n        String d = \"hello\";\n        String c = b + 2;  \n        String e = d + 2;\n        System.out.println((a == c));\n        System.out.println((a == e));\n    }\n} \n\n\n```\n　　\n　　大家可以先想一下这道题的输出结果。为什么第一个比较结果为true，而第二个比较结果为fasle。这里面就是final变量和普通变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用。也就是说在用到该final变量的地方，相当于直接访问的这个常量，不需要在运行时确定。这种和C语言中的宏替换有点像。因此在上面的一段代码中，由于变量b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b 替换为它的  值。而对于变量d的访问却需要在运行时通过链接来进行。想必其中的区别大家应该明白了，不过要注意，只有在编译期间能确切知道final变量值的情况下，编译器才会进行这样的优化，比如下面的这段代码就不会进行优化：\n\n```\n\npublic class Test {\n    public static void main(String[] args)  {\n\n        String a = \"hello2\";  \n        final String b = getHello();\n        String c = b + 2;  \n        System.out.println((a == c));\n    }\n     \n    public static String getHello() {\n        return \"hello\";\n    }\n} \n\n\n```\n\n\n　　这段代码的输出结果为false。\n\n#### 2.被final修饰的引用变量指向的对象内容可变吗？\n\n　　在上面提到被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？看下面这个例子：\n\n```\n\npublic class Test {\n    public static void main(String[] args)  {\n        final MyClass myClass = new MyClass();\n        System.out.println(++myClass.i);\n    }\n}\nclass MyClass {\n    public int i = 0;\n} \n\n```\n\n　　这段代码可以顺利编译通过并且有输出结果，输出结果为1。这说明引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。\n\n#### 3.final和static\n\n　　很多时候会容易把static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。看下面这个例子：\n\n```\n\npublic class Test {\n    public static void main(String[] args)  {\n        MyClass myClass1 = new MyClass();\n        MyClass myClass2 = new MyClass();\n        System.out.println(myClass1.i);\n        System.out.println(myClass1.j);\n        System.out.println(myClass2.i);\n        System.out.println(myClass2.j);\n    }\n}\n\nclass MyClass {\n    public final double i = Math.random();\n    public static double j = Math.random();\n} \n\n```\n　　运行这段代码就会发现，每次打印的两个j值都是一样的，而i的值却是不同的。从这里就可以知道final和static变量的区别了。\n\n#### 4.匿名内部类中使用的外部局部变量为什么只能是final变量？\n\n　　这个问题请参见上一篇博文中《Java内部类详解》中的解释，在此处不再赘述。\n\n#### 5.关于final参数的问题\n\n　　关于网上流传的”当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量“这句话，我个人理解这样说是不恰当的。\n\n　　因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。\n\n　　看这个例子就清楚了：\n\n\n\n　　上面这段代码好像让人觉得用final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changeValue和main方法中的变量i根本就不是一个变量，因为java参数传递采用的是值传递，对于基本类型的变量，相当于直接将变量进行了拷贝。所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。\n\n　　再看下面这段代码：\n\n```\n\n\npublic class Test {\n\n    public static void main(String[] args)  {\n\n        MyClass myClass = new MyClass();\n\n        StringBuffer buffer = new StringBuffer(\"hello\");\n\n        myClass.changeValue(buffer);\n\n        System.out.println(buffer.toString());\n\n    }\n\n}\n\n \n\nclass MyClass {\n\n     \n\n    void changeValue(final StringBuffer buffer) {\n\n        buffer.append(\"world\");\n\n    }\n\n} \n\n\n```\n\n　　运行这段代码就会发现输出结果为 helloworld。很显然，用final进行修饰并没有阻止在changeValue中改变buffer指向的对象的内容。有人说假如把final去掉了，万一在changeValue中让buffer指向了其他对象怎么办。有这种想法的朋友可以自己动手写代码试一下这样的结果是什么，如果把final去掉了，然后在changeValue中让buffer指向了其他对象，也不会影响到main方法中的buffer，原因在于java采用的是值传递，对于引用变量，传递的是引用的值，也就是说让实参和形参同时指向了同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。\n\n　　所以关于网上流传的final参数的说法，我个人不是很赞同。\n\n参考资料：\n\n　　《Java编程思想》\n\n##### 本文摘自http://www.cnblogs.com/dolphin0520/p/3736238.html\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\" data-title=\"about the usage of final\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","slug":"kongzheng1993-aboutFinal","published":1,"updated":"2019-01-26T09:37:47.568Z","photos":[],"link":"","_id":"cjwaviv91003y41xnk9cive79","content":"<h2 id=\"浅析Java中的final关键字\"><a href=\"#浅析Java中的final关键字\" class=\"headerlink\" title=\"浅析Java中的final关键字\"></a>浅析Java中的final关键字</h2><p>　　谈到final关键字，想必很多人都不陌生，在使用匿名内部类的时候可能会经常用到final关键字。另外，Java中的String类就是一个final类，那么今天我们就来了解final这个关键字的用法。下面是本文的目录大纲：</p>\n<h3 id=\"一-final关键字的基本用法\"><a href=\"#一-final关键字的基本用法\" class=\"headerlink\" title=\"一.final关键字的基本用法\"></a>一.final关键字的基本用法</h3><p>　　在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来了解一下final关键字的基本用法。</p>\n<h4 id=\"1-修饰类\"><a href=\"#1-修饰类\" class=\"headerlink\" title=\"1.修饰类\"></a>1.修饰类</h4><p>　　当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p>\n<p>　　在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，尽量不要将类设计为final类。</p>\n<h4 id=\"2-修饰方法\"><a href=\"#2-修饰方法\" class=\"headerlink\" title=\"2.修饰方法\"></a>2.修饰方法</h4><p>　　下面这段话摘自《Java编程思想》第四版第143页：</p>\n<p>　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“</p>\n<p>　　因此，如果只有在想明确禁止 该方法在子类中被覆盖的情况下才将方法设置为final的。</p>\n<p>　　注：类的private方法会隐式地被指定为final方法。</p>\n<h4 id=\"3-修饰变量\"><a href=\"#3-修饰变量\" class=\"headerlink\" title=\"3.修饰变量\"></a>3.修饰变量</h4><p>　　修饰变量是final用得最多的地方，也是本文接下来要重点阐述的内容。首先了解一下final变量的基本语法：</p>\n<p>　　对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p>\n<p>　　举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Man&#123;</span><br><span class=\"line\">    private final int a=0;</span><br><span class=\"line\">    pbulic Man&#123;</span><br><span class=\"line\">        i=1;</span><br><span class=\"line\">        final Object obj=new Object();</span><br><span class=\"line\">        obj=new Object();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　上面的一段代码中，对变量i和obj的重新赋值都报错了。</p>\n<h3 id=\"二-深入理解final关键字\"><a href=\"#二-深入理解final关键字\" class=\"headerlink\" title=\"二.深入理解final关键字\"></a>二.深入理解final关键字</h3><p>　　在了解了final关键字的基本用法之后，这一节我们来看一下final关键字容易混淆的地方。</p>\n<h4 id=\"1-类的final变量和普通变量有什么区别？\"><a href=\"#1-类的final变量和普通变量有什么区别？\" class=\"headerlink\" title=\"1.类的final变量和普通变量有什么区别？\"></a>1.类的final变量和普通变量有什么区别？</h4><p>　　当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。</p>\n<p>　　那么final变量和普通变量到底有何区别呢？下面请看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\">        String a = &quot;hello2&quot;;  </span><br><span class=\"line\">        final String b = &quot;hello&quot;;</span><br><span class=\"line\">        String d = &quot;hello&quot;;</span><br><span class=\"line\">        String c = b + 2;  </span><br><span class=\"line\">        String e = d + 2;</span><br><span class=\"line\">        System.out.println((a == c));</span><br><span class=\"line\">        System.out.println((a == e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　<br>　　大家可以先想一下这道题的输出结果。为什么第一个比较结果为true，而第二个比较结果为fasle。这里面就是final变量和普通变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用。也就是说在用到该final变量的地方，相当于直接访问的这个常量，不需要在运行时确定。这种和C语言中的宏替换有点像。因此在上面的一段代码中，由于变量b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b 替换为它的  值。而对于变量d的访问却需要在运行时通过链接来进行。想必其中的区别大家应该明白了，不过要注意，只有在编译期间能确切知道final变量值的情况下，编译器才会进行这样的优化，比如下面的这段代码就不会进行优化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String a = &quot;hello2&quot;;  </span><br><span class=\"line\">        final String b = getHello();</span><br><span class=\"line\">        String c = b + 2;  </span><br><span class=\"line\">        System.out.println((a == c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    public static String getHello() &#123;</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　这段代码的输出结果为false。</p>\n<h4 id=\"2-被final修饰的引用变量指向的对象内容可变吗？\"><a href=\"#2-被final修饰的引用变量指向的对象内容可变吗？\" class=\"headerlink\" title=\"2.被final修饰的引用变量指向的对象内容可变吗？\"></a>2.被final修饰的引用变量指向的对象内容可变吗？</h4><p>　　在上面提到被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\">        final MyClass myClass = new MyClass();</span><br><span class=\"line\">        System.out.println(++myClass.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">    public int i = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　这段代码可以顺利编译通过并且有输出结果，输出结果为1。这说明引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。</p>\n<h4 id=\"3-final和static\"><a href=\"#3-final和static\" class=\"headerlink\" title=\"3.final和static\"></a>3.final和static</h4><p>　　很多时候会容易把static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\">        MyClass myClass1 = new MyClass();</span><br><span class=\"line\">        MyClass myClass2 = new MyClass();</span><br><span class=\"line\">        System.out.println(myClass1.i);</span><br><span class=\"line\">        System.out.println(myClass1.j);</span><br><span class=\"line\">        System.out.println(myClass2.i);</span><br><span class=\"line\">        System.out.println(myClass2.j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">    public final double i = Math.random();</span><br><span class=\"line\">    public static double j = Math.random();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　运行这段代码就会发现，每次打印的两个j值都是一样的，而i的值却是不同的。从这里就可以知道final和static变量的区别了。</p>\n<h4 id=\"4-匿名内部类中使用的外部局部变量为什么只能是final变量？\"><a href=\"#4-匿名内部类中使用的外部局部变量为什么只能是final变量？\" class=\"headerlink\" title=\"4.匿名内部类中使用的外部局部变量为什么只能是final变量？\"></a>4.匿名内部类中使用的外部局部变量为什么只能是final变量？</h4><p>　　这个问题请参见上一篇博文中《Java内部类详解》中的解释，在此处不再赘述。</p>\n<h4 id=\"5-关于final参数的问题\"><a href=\"#5-关于final参数的问题\" class=\"headerlink\" title=\"5.关于final参数的问题\"></a>5.关于final参数的问题</h4><p>　　关于网上流传的”当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量“这句话，我个人理解这样说是不恰当的。</p>\n<p>　　因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。</p>\n<p>　　看这个例子就清楚了：</p>\n<p>　　上面这段代码好像让人觉得用final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changeValue和main方法中的变量i根本就不是一个变量，因为java参数传递采用的是值传递，对于基本类型的变量，相当于直接将变量进行了拷贝。所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。</p>\n<p>　　再看下面这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyClass myClass = new MyClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer buffer = new StringBuffer(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        myClass.changeValue(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(buffer.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    void changeValue(final StringBuffer buffer) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer.append(&quot;world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　运行这段代码就会发现输出结果为 helloworld。很显然，用final进行修饰并没有阻止在changeValue中改变buffer指向的对象的内容。有人说假如把final去掉了，万一在changeValue中让buffer指向了其他对象怎么办。有这种想法的朋友可以自己动手写代码试一下这样的结果是什么，如果把final去掉了，然后在changeValue中让buffer指向了其他对象，也不会影响到main方法中的buffer，原因在于java采用的是值传递，对于引用变量，传递的是引用的值，也就是说让实参和形参同时指向了同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。</p>\n<p>　　所以关于网上流传的final参数的说法，我个人不是很赞同。</p>\n<p>参考资料：</p>\n<p>　　《Java编程思想》</p>\n<h5 id=\"本文摘自http-www-cnblogs-com-dolphin0520-p-3736238-html\"><a href=\"#本文摘自http-www-cnblogs-com-dolphin0520-p-3736238-html\" class=\"headerlink\" title=\"本文摘自http://www.cnblogs.com/dolphin0520/p/3736238.html\"></a>本文摘自<a href=\"http://www.cnblogs.com/dolphin0520/p/3736238.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dolphin0520/p/3736238.html</a></h5><html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\" data-title=\"about the usage of final\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n","site":{"data":{}},"more":"<h2 id=\"浅析Java中的final关键字\"><a href=\"#浅析Java中的final关键字\" class=\"headerlink\" title=\"浅析Java中的final关键字\"></a>浅析Java中的final关键字</h2><p>　　谈到final关键字，想必很多人都不陌生，在使用匿名内部类的时候可能会经常用到final关键字。另外，Java中的String类就是一个final类，那么今天我们就来了解final这个关键字的用法。下面是本文的目录大纲：</p>\n<h3 id=\"一-final关键字的基本用法\"><a href=\"#一-final关键字的基本用法\" class=\"headerlink\" title=\"一.final关键字的基本用法\"></a>一.final关键字的基本用法</h3><p>　　在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来了解一下final关键字的基本用法。</p>\n<h4 id=\"1-修饰类\"><a href=\"#1-修饰类\" class=\"headerlink\" title=\"1.修饰类\"></a>1.修饰类</h4><p>　　当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p>\n<p>　　在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，尽量不要将类设计为final类。</p>\n<h4 id=\"2-修饰方法\"><a href=\"#2-修饰方法\" class=\"headerlink\" title=\"2.修饰方法\"></a>2.修饰方法</h4><p>　　下面这段话摘自《Java编程思想》第四版第143页：</p>\n<p>　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“</p>\n<p>　　因此，如果只有在想明确禁止 该方法在子类中被覆盖的情况下才将方法设置为final的。</p>\n<p>　　注：类的private方法会隐式地被指定为final方法。</p>\n<h4 id=\"3-修饰变量\"><a href=\"#3-修饰变量\" class=\"headerlink\" title=\"3.修饰变量\"></a>3.修饰变量</h4><p>　　修饰变量是final用得最多的地方，也是本文接下来要重点阐述的内容。首先了解一下final变量的基本语法：</p>\n<p>　　对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p>\n<p>　　举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Man&#123;</span><br><span class=\"line\">    private final int a=0;</span><br><span class=\"line\">    pbulic Man&#123;</span><br><span class=\"line\">        i=1;</span><br><span class=\"line\">        final Object obj=new Object();</span><br><span class=\"line\">        obj=new Object();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　上面的一段代码中，对变量i和obj的重新赋值都报错了。</p>\n<h3 id=\"二-深入理解final关键字\"><a href=\"#二-深入理解final关键字\" class=\"headerlink\" title=\"二.深入理解final关键字\"></a>二.深入理解final关键字</h3><p>　　在了解了final关键字的基本用法之后，这一节我们来看一下final关键字容易混淆的地方。</p>\n<h4 id=\"1-类的final变量和普通变量有什么区别？\"><a href=\"#1-类的final变量和普通变量有什么区别？\" class=\"headerlink\" title=\"1.类的final变量和普通变量有什么区别？\"></a>1.类的final变量和普通变量有什么区别？</h4><p>　　当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。</p>\n<p>　　那么final变量和普通变量到底有何区别呢？下面请看一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\">        String a = &quot;hello2&quot;;  </span><br><span class=\"line\">        final String b = &quot;hello&quot;;</span><br><span class=\"line\">        String d = &quot;hello&quot;;</span><br><span class=\"line\">        String c = b + 2;  </span><br><span class=\"line\">        String e = d + 2;</span><br><span class=\"line\">        System.out.println((a == c));</span><br><span class=\"line\">        System.out.println((a == e));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　<br>　　大家可以先想一下这道题的输出结果。为什么第一个比较结果为true，而第二个比较结果为fasle。这里面就是final变量和普通变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用。也就是说在用到该final变量的地方，相当于直接访问的这个常量，不需要在运行时确定。这种和C语言中的宏替换有点像。因此在上面的一段代码中，由于变量b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b 替换为它的  值。而对于变量d的访问却需要在运行时通过链接来进行。想必其中的区别大家应该明白了，不过要注意，只有在编译期间能确切知道final变量值的情况下，编译器才会进行这样的优化，比如下面的这段代码就不会进行优化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String a = &quot;hello2&quot;;  </span><br><span class=\"line\">        final String b = getHello();</span><br><span class=\"line\">        String c = b + 2;  </span><br><span class=\"line\">        System.out.println((a == c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    public static String getHello() &#123;</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　这段代码的输出结果为false。</p>\n<h4 id=\"2-被final修饰的引用变量指向的对象内容可变吗？\"><a href=\"#2-被final修饰的引用变量指向的对象内容可变吗？\" class=\"headerlink\" title=\"2.被final修饰的引用变量指向的对象内容可变吗？\"></a>2.被final修饰的引用变量指向的对象内容可变吗？</h4><p>　　在上面提到被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\">        final MyClass myClass = new MyClass();</span><br><span class=\"line\">        System.out.println(++myClass.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">    public int i = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　这段代码可以顺利编译通过并且有输出结果，输出结果为1。这说明引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。</p>\n<h4 id=\"3-final和static\"><a href=\"#3-final和static\" class=\"headerlink\" title=\"3.final和static\"></a>3.final和static</h4><p>　　很多时候会容易把static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。看下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\">        MyClass myClass1 = new MyClass();</span><br><span class=\"line\">        MyClass myClass2 = new MyClass();</span><br><span class=\"line\">        System.out.println(myClass1.i);</span><br><span class=\"line\">        System.out.println(myClass1.j);</span><br><span class=\"line\">        System.out.println(myClass2.i);</span><br><span class=\"line\">        System.out.println(myClass2.j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">    public final double i = Math.random();</span><br><span class=\"line\">    public static double j = Math.random();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　运行这段代码就会发现，每次打印的两个j值都是一样的，而i的值却是不同的。从这里就可以知道final和static变量的区别了。</p>\n<h4 id=\"4-匿名内部类中使用的外部局部变量为什么只能是final变量？\"><a href=\"#4-匿名内部类中使用的外部局部变量为什么只能是final变量？\" class=\"headerlink\" title=\"4.匿名内部类中使用的外部局部变量为什么只能是final变量？\"></a>4.匿名内部类中使用的外部局部变量为什么只能是final变量？</h4><p>　　这个问题请参见上一篇博文中《Java内部类详解》中的解释，在此处不再赘述。</p>\n<h4 id=\"5-关于final参数的问题\"><a href=\"#5-关于final参数的问题\" class=\"headerlink\" title=\"5.关于final参数的问题\"></a>5.关于final参数的问题</h4><p>　　关于网上流传的”当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量“这句话，我个人理解这样说是不恰当的。</p>\n<p>　　因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。</p>\n<p>　　看这个例子就清楚了：</p>\n<p>　　上面这段代码好像让人觉得用final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changeValue和main方法中的变量i根本就不是一个变量，因为java参数传递采用的是值传递，对于基本类型的变量，相当于直接将变量进行了拷贝。所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。</p>\n<p>　　再看下面这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyClass myClass = new MyClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer buffer = new StringBuffer(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        myClass.changeValue(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(buffer.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    void changeValue(final StringBuffer buffer) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        buffer.append(&quot;world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　运行这段代码就会发现输出结果为 helloworld。很显然，用final进行修饰并没有阻止在changeValue中改变buffer指向的对象的内容。有人说假如把final去掉了，万一在changeValue中让buffer指向了其他对象怎么办。有这种想法的朋友可以自己动手写代码试一下这样的结果是什么，如果把final去掉了，然后在changeValue中让buffer指向了其他对象，也不会影响到main方法中的buffer，原因在于java采用的是值传递，对于引用变量，传递的是引用的值，也就是说让实参和形参同时指向了同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。</p>\n<p>　　所以关于网上流传的final参数的说法，我个人不是很赞同。</p>\n<p>参考资料：</p>\n<p>　　《Java编程思想》</p>\n<h5 id=\"本文摘自http-www-cnblogs-com-dolphin0520-p-3736238-html\"><a href=\"#本文摘自http-www-cnblogs-com-dolphin0520-p-3736238-html\" class=\"headerlink\" title=\"本文摘自http://www.cnblogs.com/dolphin0520/p/3736238.html\"></a>本文摘自<a href=\"http://www.cnblogs.com/dolphin0520/p/3736238.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dolphin0520/p/3736238.html</a></h5><html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\" data-title=\"about the usage of final\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-aboutFinal/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n"},{"layout":"post","title":"centos 7 安装mysql遇到的问题","date":"2016-07-25T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n\n## cent os 7安装mysql遇到的问题\n\n1.在centos 7上装mysql，但是运行的话会报错，服务未启动\n\n```\n\n[evilrat@evilRat_desktop ~]$ mysql status\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)\n\n\n```\n\n2.尝试启动服务：\n\n```\n\n[evilrat@evilRat_desktop ~]$ systemctl enable mysql.service\nFailed to execute operation: Access denied\n\n\n```\n这样也不行……\n\n```\n\n[evilrat@evilRat_desktop ~]$ service mysql start\nRedirecting to /bin/systemctl start  mysql.service\n\n\n\n```\n\n3.通过百度找到这个\nmariaDB\n\n\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。\nMariaDB基于事务的Maria存储引擎，替换了MySQL的MyISAM存储引擎，它使用了Percona的 XtraDB，InnoDB的变体，分支的开发者希望提供访问即将到来的MySQL 5.4 InnoDB性能。这个版本还包括了 PrimeBase XT (PBXT) 和 FederatedX存储引擎。\n\n\n4.于是我尝试安装了一下\n\n\n```\n\n[root@evilRat_desktop evilrat]# yum install mariadb-server -y\nLoaded plugins: fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nRepository epel-debuginfo is listed more than once in the configuration\nRepository epel-source is listed more than once in the configuration\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nadobe-linux-x86_64                                       |  951 B     00:00     \nbase                                                     | 3.6 kB     00:00     \nepel                                                     | 4.3 kB     00:00     \nextras                                                   | 3.4 kB     00:00     \nnux-dextop                                               | 2.9 kB     00:00     \nupdates                                                  | 3.4 kB     00:00     \n(1/5): extras/7/x86_64/primary_db                          | 139 kB   00:00     \n(2/5): epel/x86_64/updateinfo                              | 765 kB   00:01     \n(3/5): epel/x86_64/primary_db                              | 4.6 MB   00:10     \n(4/5): updates/7/x86_64/primary_db                         | 3.8 MB   00:11     \n(5/5): nux-dextop/x86_64/primary_db                        | 1.7 MB   00:29     \nadobe-linux-x86_64/primary                                 | 1.3 kB   00:00     \nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirrors.aliyun.com\n * extras: mirrors.aliyun.com\n * nux-dextop: li.nux.ro\n * updates: mirrors.aliyun.com\nadobe-linux-x86_64                                                          3/3\nResolving Dependencies\n--> Running transaction check\n---> Package mariadb-server.x86_64 1:5.5.52-1.el7 will be installed\n--> Processing Dependency: perl-DBI for package: 1:mariadb-server-5.5.52-1.el7.x86_64\n--> Processing Dependency: perl-DBD-MySQL for package: 1:mariadb-server-5.5.52-1.el7.x86_64\n--> Processing Dependency: perl(DBI) for package: 1:mariadb-server-5.5.52-1.el7.x86_64\n--> Running transaction check\n---> Package perl-DBD-MySQL.x86_64 0:4.023-5.el7 will be installed\n---> Package perl-DBI.x86_64 0:1.627-4.el7 will be installed\n--> Processing Dependency: perl(RPC::PlServer) >= 0.2001 for package: perl-DBI-1.627-4.el7.x86_64\n--> Processing Dependency: perl(RPC::PlClient) >= 0.2000 for package: perl-DBI-1.627-4.el7.x86_64\n--> Running transaction check\n---> Package perl-PlRPC.noarch 0:0.2020-14.el7 will be installed\n--> Processing Dependency: perl(Net::Daemon) >= 0.13 for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Processing Dependency: perl(Net::Daemon::Test) for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Processing Dependency: perl(Net::Daemon::Log) for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Processing Dependency: perl(Compress::Zlib) for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Running transaction check\n---> Package perl-IO-Compress.noarch 0:2.061-2.el7 will be installed\n--> Processing Dependency: perl(Compress::Raw::Zlib) >= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch\n--> Processing Dependency: perl(Compress::Raw::Bzip2) >= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch\n---> Package perl-Net-Daemon.noarch 0:0.48-5.el7 will be installed\n--> Running transaction check\n---> Package perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 will be installed\n---> Package perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 will be installed\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package                      Arch        Version               Repository\n                                                                           Size\n================================================================================\nInstalling:\n mariadb-server               x86_64      1:5.5.52-1.el7        base       11 M\nInstalling for dependencies:\n perl-Compress-Raw-Bzip2      x86_64      2.061-3.el7           base       32 k\n perl-Compress-Raw-Zlib       x86_64      1:2.061-4.el7         base       57 k\n perl-DBD-MySQL               x86_64      4.023-5.el7           base      140 k\n perl-DBI                     x86_64      1.627-4.el7           base      802 k\n perl-IO-Compress             noarch      2.061-2.el7           base      260 k\n perl-Net-Daemon              noarch      0.48-5.el7            base       51 k\n perl-PlRPC                   noarch      0.2020-14.el7         base       36 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package (+7 Dependent packages)\n\nTotal download size: 12 M\nInstalled size: 59 M\nDownloading packages:\n(1/8): perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm      |  32 kB   00:00     \n(2/8): perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpm       |  57 kB   00:00     \n(3/8): perl-DBD-MySQL-4.023-5.el7.x86_64.rpm               | 140 kB   00:00     \n(4/8): perl-DBI-1.627-4.el7.x86_64.rpm                     | 802 kB   00:00     \n(5/8): perl-IO-Compress-2.061-2.el7.noarch.rpm             | 260 kB   00:00     \n(6/8): perl-Net-Daemon-0.48-5.el7.noarch.rpm               |  51 kB   00:00     \n(7/8): perl-PlRPC-0.2020-14.el7.noarch.rpm                 |  36 kB   00:00     \n(8/8): mariadb-server-5.5.52-1.el7.x86_64.rpm              |  11 MB   00:12     \n--------------------------------------------------------------------------------\nTotal                                              1.0 MB/s |  12 MB  00:12     \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   1/8 \n  Installing : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  2/8 \n  Installing : perl-IO-Compress-2.061-2.el7.noarch                          3/8 \n  Installing : perl-Net-Daemon-0.48-5.el7.noarch                            4/8 \n  Installing : perl-PlRPC-0.2020-14.el7.noarch                              5/8 \n  Installing : perl-DBI-1.627-4.el7.x86_64                                  6/8 \n  Installing : perl-DBD-MySQL-4.023-5.el7.x86_64                            7/8 \n  Installing : 1:mariadb-server-5.5.52-1.el7.x86_64                         8/8 \n  Verifying  : perl-Net-Daemon-0.48-5.el7.noarch                            1/8 \n  Verifying  : 1:mariadb-server-5.5.52-1.el7.x86_64                         2/8 \n  Verifying  : perl-IO-Compress-2.061-2.el7.noarch                          3/8 \n  Verifying  : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  4/8 \n  Verifying  : perl-PlRPC-0.2020-14.el7.noarch                              5/8 \n  Verifying  : perl-DBI-1.627-4.el7.x86_64                                  6/8 \n  Verifying  : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   7/8 \n  Verifying  : perl-DBD-MySQL-4.023-5.el7.x86_64                            8/8 \n\nInstalled:\n  mariadb-server.x86_64 1:5.5.52-1.el7                                          \n\nDependency Installed:\n  perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7                                  \n  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7                                   \n  perl-DBD-MySQL.x86_64 0:4.023-5.el7                                           \n  perl-DBI.x86_64 0:1.627-4.el7                                                 \n  perl-IO-Compress.noarch 0:2.061-2.el7                                         \n  perl-Net-Daemon.noarch 0:0.48-5.el7                                           \n  perl-PlRPC.noarch 0:0.2020-14.el7                                             \n\nComplete!\n\n\n\n\n```\n\n5.然后我启动服务，尝试启动mysql\n\n```\n\n[root@evilRat_desktop evilrat]# systemctl start mariadb.service\n[root@evilRat_desktop evilrat]# systemctl enable mariadb.service\nCreated symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.\n[root@evilRat_desktop evilrat]# mysql\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 2\nServer version: 5.5.52-MariaDB MariaDB Server\n\nCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]> show databases\n    -> ;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.00 sec)\n\nMariaDB [(none)]> exit\nBye\n\n\n\n```\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\" data-title=\"centos7_mysql\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n","source":"_posts/2017-03-28-kongzheng1993-centos7_mysql.md","raw":"---\nlayout: post\ntitle: \"centos 7 安装mysql遇到的问题\"\ndate: 2016-07-26\nexcerpt: \"getRequestDispatcher,forword,sendRedirect\"\ntags: [re]\ncomments: true\n---\n\n\n## cent os 7安装mysql遇到的问题\n\n1.在centos 7上装mysql，但是运行的话会报错，服务未启动\n\n```\n\n[evilrat@evilRat_desktop ~]$ mysql status\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)\n\n\n```\n\n2.尝试启动服务：\n\n```\n\n[evilrat@evilRat_desktop ~]$ systemctl enable mysql.service\nFailed to execute operation: Access denied\n\n\n```\n这样也不行……\n\n```\n\n[evilrat@evilRat_desktop ~]$ service mysql start\nRedirecting to /bin/systemctl start  mysql.service\n\n\n\n```\n\n3.通过百度找到这个\nmariaDB\n\n\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。\nMariaDB基于事务的Maria存储引擎，替换了MySQL的MyISAM存储引擎，它使用了Percona的 XtraDB，InnoDB的变体，分支的开发者希望提供访问即将到来的MySQL 5.4 InnoDB性能。这个版本还包括了 PrimeBase XT (PBXT) 和 FederatedX存储引擎。\n\n\n4.于是我尝试安装了一下\n\n\n```\n\n[root@evilRat_desktop evilrat]# yum install mariadb-server -y\nLoaded plugins: fastestmirror, langpacks\nRepository epel is listed more than once in the configuration\nRepository epel-debuginfo is listed more than once in the configuration\nRepository epel-source is listed more than once in the configuration\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nadobe-linux-x86_64                                       |  951 B     00:00     \nbase                                                     | 3.6 kB     00:00     \nepel                                                     | 4.3 kB     00:00     \nextras                                                   | 3.4 kB     00:00     \nnux-dextop                                               | 2.9 kB     00:00     \nupdates                                                  | 3.4 kB     00:00     \n(1/5): extras/7/x86_64/primary_db                          | 139 kB   00:00     \n(2/5): epel/x86_64/updateinfo                              | 765 kB   00:01     \n(3/5): epel/x86_64/primary_db                              | 4.6 MB   00:10     \n(4/5): updates/7/x86_64/primary_db                         | 3.8 MB   00:11     \n(5/5): nux-dextop/x86_64/primary_db                        | 1.7 MB   00:29     \nadobe-linux-x86_64/primary                                 | 1.3 kB   00:00     \nLoading mirror speeds from cached hostfile\n * base: mirrors.aliyun.com\n * epel: mirrors.aliyun.com\n * extras: mirrors.aliyun.com\n * nux-dextop: li.nux.ro\n * updates: mirrors.aliyun.com\nadobe-linux-x86_64                                                          3/3\nResolving Dependencies\n--> Running transaction check\n---> Package mariadb-server.x86_64 1:5.5.52-1.el7 will be installed\n--> Processing Dependency: perl-DBI for package: 1:mariadb-server-5.5.52-1.el7.x86_64\n--> Processing Dependency: perl-DBD-MySQL for package: 1:mariadb-server-5.5.52-1.el7.x86_64\n--> Processing Dependency: perl(DBI) for package: 1:mariadb-server-5.5.52-1.el7.x86_64\n--> Running transaction check\n---> Package perl-DBD-MySQL.x86_64 0:4.023-5.el7 will be installed\n---> Package perl-DBI.x86_64 0:1.627-4.el7 will be installed\n--> Processing Dependency: perl(RPC::PlServer) >= 0.2001 for package: perl-DBI-1.627-4.el7.x86_64\n--> Processing Dependency: perl(RPC::PlClient) >= 0.2000 for package: perl-DBI-1.627-4.el7.x86_64\n--> Running transaction check\n---> Package perl-PlRPC.noarch 0:0.2020-14.el7 will be installed\n--> Processing Dependency: perl(Net::Daemon) >= 0.13 for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Processing Dependency: perl(Net::Daemon::Test) for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Processing Dependency: perl(Net::Daemon::Log) for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Processing Dependency: perl(Compress::Zlib) for package: perl-PlRPC-0.2020-14.el7.noarch\n--> Running transaction check\n---> Package perl-IO-Compress.noarch 0:2.061-2.el7 will be installed\n--> Processing Dependency: perl(Compress::Raw::Zlib) >= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch\n--> Processing Dependency: perl(Compress::Raw::Bzip2) >= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch\n---> Package perl-Net-Daemon.noarch 0:0.48-5.el7 will be installed\n--> Running transaction check\n---> Package perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 will be installed\n---> Package perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 will be installed\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n================================================================================\n Package                      Arch        Version               Repository\n                                                                           Size\n================================================================================\nInstalling:\n mariadb-server               x86_64      1:5.5.52-1.el7        base       11 M\nInstalling for dependencies:\n perl-Compress-Raw-Bzip2      x86_64      2.061-3.el7           base       32 k\n perl-Compress-Raw-Zlib       x86_64      1:2.061-4.el7         base       57 k\n perl-DBD-MySQL               x86_64      4.023-5.el7           base      140 k\n perl-DBI                     x86_64      1.627-4.el7           base      802 k\n perl-IO-Compress             noarch      2.061-2.el7           base      260 k\n perl-Net-Daemon              noarch      0.48-5.el7            base       51 k\n perl-PlRPC                   noarch      0.2020-14.el7         base       36 k\n\nTransaction Summary\n================================================================================\nInstall  1 Package (+7 Dependent packages)\n\nTotal download size: 12 M\nInstalled size: 59 M\nDownloading packages:\n(1/8): perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm      |  32 kB   00:00     \n(2/8): perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpm       |  57 kB   00:00     \n(3/8): perl-DBD-MySQL-4.023-5.el7.x86_64.rpm               | 140 kB   00:00     \n(4/8): perl-DBI-1.627-4.el7.x86_64.rpm                     | 802 kB   00:00     \n(5/8): perl-IO-Compress-2.061-2.el7.noarch.rpm             | 260 kB   00:00     \n(6/8): perl-Net-Daemon-0.48-5.el7.noarch.rpm               |  51 kB   00:00     \n(7/8): perl-PlRPC-0.2020-14.el7.noarch.rpm                 |  36 kB   00:00     \n(8/8): mariadb-server-5.5.52-1.el7.x86_64.rpm              |  11 MB   00:12     \n--------------------------------------------------------------------------------\nTotal                                              1.0 MB/s |  12 MB  00:12     \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   1/8 \n  Installing : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  2/8 \n  Installing : perl-IO-Compress-2.061-2.el7.noarch                          3/8 \n  Installing : perl-Net-Daemon-0.48-5.el7.noarch                            4/8 \n  Installing : perl-PlRPC-0.2020-14.el7.noarch                              5/8 \n  Installing : perl-DBI-1.627-4.el7.x86_64                                  6/8 \n  Installing : perl-DBD-MySQL-4.023-5.el7.x86_64                            7/8 \n  Installing : 1:mariadb-server-5.5.52-1.el7.x86_64                         8/8 \n  Verifying  : perl-Net-Daemon-0.48-5.el7.noarch                            1/8 \n  Verifying  : 1:mariadb-server-5.5.52-1.el7.x86_64                         2/8 \n  Verifying  : perl-IO-Compress-2.061-2.el7.noarch                          3/8 \n  Verifying  : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  4/8 \n  Verifying  : perl-PlRPC-0.2020-14.el7.noarch                              5/8 \n  Verifying  : perl-DBI-1.627-4.el7.x86_64                                  6/8 \n  Verifying  : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   7/8 \n  Verifying  : perl-DBD-MySQL-4.023-5.el7.x86_64                            8/8 \n\nInstalled:\n  mariadb-server.x86_64 1:5.5.52-1.el7                                          \n\nDependency Installed:\n  perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7                                  \n  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7                                   \n  perl-DBD-MySQL.x86_64 0:4.023-5.el7                                           \n  perl-DBI.x86_64 0:1.627-4.el7                                                 \n  perl-IO-Compress.noarch 0:2.061-2.el7                                         \n  perl-Net-Daemon.noarch 0:0.48-5.el7                                           \n  perl-PlRPC.noarch 0:0.2020-14.el7                                             \n\nComplete!\n\n\n\n\n```\n\n5.然后我启动服务，尝试启动mysql\n\n```\n\n[root@evilRat_desktop evilrat]# systemctl start mariadb.service\n[root@evilRat_desktop evilrat]# systemctl enable mariadb.service\nCreated symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.\n[root@evilRat_desktop evilrat]# mysql\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 2\nServer version: 5.5.52-MariaDB MariaDB Server\n\nCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]> show databases\n    -> ;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.00 sec)\n\nMariaDB [(none)]> exit\nBye\n\n\n\n```\n\n\n\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\" data-title=\"centos7_mysql\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n","slug":"kongzheng1993-centos7_mysql","published":1,"updated":"2019-01-26T09:37:47.572Z","photos":[],"link":"","_id":"cjwaviv93004141xn4c3gvsas","content":"<h2 id=\"cent-os-7安装mysql遇到的问题\"><a href=\"#cent-os-7安装mysql遇到的问题\" class=\"headerlink\" title=\"cent os 7安装mysql遇到的问题\"></a>cent os 7安装mysql遇到的问题</h2><p>1.在centos 7上装mysql，但是运行的话会报错，服务未启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[evilrat@evilRat_desktop ~]$ mysql status</span><br><span class=\"line\">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/var/lib/mysql/mysql.sock&apos; (2)</span><br></pre></td></tr></table></figure>\n\n<p>2.尝试启动服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[evilrat@evilRat_desktop ~]$ systemctl enable mysql.service</span><br><span class=\"line\">Failed to execute operation: Access denied</span><br></pre></td></tr></table></figure>\n\n<p>这样也不行……</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[evilrat@evilRat_desktop ~]$ service mysql start</span><br><span class=\"line\">Redirecting to /bin/systemctl start  mysql.service</span><br></pre></td></tr></table></figure>\n\n<p>3.通过百度找到这个<br>mariaDB</p>\n<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。<br>MariaDB基于事务的Maria存储引擎，替换了MySQL的MyISAM存储引擎，它使用了Percona的 XtraDB，InnoDB的变体，分支的开发者希望提供访问即将到来的MySQL 5.4 InnoDB性能。这个版本还包括了 PrimeBase XT (PBXT) 和 FederatedX存储引擎。</p>\n<p>4.于是我尝试安装了一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@evilRat_desktop evilrat]# yum install mariadb-server -y</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once in the configuration</span><br><span class=\"line\">Repository epel-debuginfo is listed more than once in the configuration</span><br><span class=\"line\">Repository epel-source is listed more than once in the configuration</span><br><span class=\"line\">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class=\"line\">adobe-linux-x86_64                                       |  951 B     00:00     </span><br><span class=\"line\">base                                                     | 3.6 kB     00:00     </span><br><span class=\"line\">epel                                                     | 4.3 kB     00:00     </span><br><span class=\"line\">extras                                                   | 3.4 kB     00:00     </span><br><span class=\"line\">nux-dextop                                               | 2.9 kB     00:00     </span><br><span class=\"line\">updates                                                  | 3.4 kB     00:00     </span><br><span class=\"line\">(1/5): extras/7/x86_64/primary_db                          | 139 kB   00:00     </span><br><span class=\"line\">(2/5): epel/x86_64/updateinfo                              | 765 kB   00:01     </span><br><span class=\"line\">(3/5): epel/x86_64/primary_db                              | 4.6 MB   00:10     </span><br><span class=\"line\">(4/5): updates/7/x86_64/primary_db                         | 3.8 MB   00:11     </span><br><span class=\"line\">(5/5): nux-dextop/x86_64/primary_db                        | 1.7 MB   00:29     </span><br><span class=\"line\">adobe-linux-x86_64/primary                                 | 1.3 kB   00:00     </span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * epel: mirrors.aliyun.com</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * nux-dextop: li.nux.ro</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">adobe-linux-x86_64                                                          3/3</span><br><span class=\"line\">Resolving Dependencies</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package mariadb-server.x86_64 1:5.5.52-1.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl-DBI for package: 1:mariadb-server-5.5.52-1.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: perl-DBD-MySQL for package: 1:mariadb-server-5.5.52-1.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: perl(DBI) for package: 1:mariadb-server-5.5.52-1.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-DBD-MySQL.x86_64 0:4.023-5.el7 will be installed</span><br><span class=\"line\">---&gt; Package perl-DBI.x86_64 0:1.627-4.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl(RPC::PlServer) &gt;= 0.2001 for package: perl-DBI-1.627-4.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: perl(RPC::PlClient) &gt;= 0.2000 for package: perl-DBI-1.627-4.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-PlRPC.noarch 0:0.2020-14.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Net::Daemon) &gt;= 0.13 for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Net::Daemon::Test) for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Net::Daemon::Log) for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Compress::Zlib) for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-IO-Compress.noarch 0:2.061-2.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Compress::Raw::Zlib) &gt;= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Compress::Raw::Bzip2) &gt;= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch</span><br><span class=\"line\">---&gt; Package perl-Net-Daemon.noarch 0:0.48-5.el7 will be installed</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 will be installed</span><br><span class=\"line\">---&gt; Package perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 will be installed</span><br><span class=\"line\">--&gt; Finished Dependency Resolution</span><br><span class=\"line\"></span><br><span class=\"line\">Dependencies Resolved</span><br><span class=\"line\"></span><br><span class=\"line\">================================================================================</span><br><span class=\"line\"> Package                      Arch        Version               Repository</span><br><span class=\"line\">                                                                           Size</span><br><span class=\"line\">================================================================================</span><br><span class=\"line\">Installing:</span><br><span class=\"line\"> mariadb-server               x86_64      1:5.5.52-1.el7        base       11 M</span><br><span class=\"line\">Installing for dependencies:</span><br><span class=\"line\"> perl-Compress-Raw-Bzip2      x86_64      2.061-3.el7           base       32 k</span><br><span class=\"line\"> perl-Compress-Raw-Zlib       x86_64      1:2.061-4.el7         base       57 k</span><br><span class=\"line\"> perl-DBD-MySQL               x86_64      4.023-5.el7           base      140 k</span><br><span class=\"line\"> perl-DBI                     x86_64      1.627-4.el7           base      802 k</span><br><span class=\"line\"> perl-IO-Compress             noarch      2.061-2.el7           base      260 k</span><br><span class=\"line\"> perl-Net-Daemon              noarch      0.48-5.el7            base       51 k</span><br><span class=\"line\"> perl-PlRPC                   noarch      0.2020-14.el7         base       36 k</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">================================================================================</span><br><span class=\"line\">Install  1 Package (+7 Dependent packages)</span><br><span class=\"line\"></span><br><span class=\"line\">Total download size: 12 M</span><br><span class=\"line\">Installed size: 59 M</span><br><span class=\"line\">Downloading packages:</span><br><span class=\"line\">(1/8): perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm      |  32 kB   00:00     </span><br><span class=\"line\">(2/8): perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpm       |  57 kB   00:00     </span><br><span class=\"line\">(3/8): perl-DBD-MySQL-4.023-5.el7.x86_64.rpm               | 140 kB   00:00     </span><br><span class=\"line\">(4/8): perl-DBI-1.627-4.el7.x86_64.rpm                     | 802 kB   00:00     </span><br><span class=\"line\">(5/8): perl-IO-Compress-2.061-2.el7.noarch.rpm             | 260 kB   00:00     </span><br><span class=\"line\">(6/8): perl-Net-Daemon-0.48-5.el7.noarch.rpm               |  51 kB   00:00     </span><br><span class=\"line\">(7/8): perl-PlRPC-0.2020-14.el7.noarch.rpm                 |  36 kB   00:00     </span><br><span class=\"line\">(8/8): mariadb-server-5.5.52-1.el7.x86_64.rpm              |  11 MB   00:12     </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">Total                                              1.0 MB/s |  12 MB  00:12     </span><br><span class=\"line\">Running transaction check</span><br><span class=\"line\">Running transaction test</span><br><span class=\"line\">Transaction test succeeded</span><br><span class=\"line\">Running transaction</span><br><span class=\"line\">  Installing : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   1/8 </span><br><span class=\"line\">  Installing : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  2/8 </span><br><span class=\"line\">  Installing : perl-IO-Compress-2.061-2.el7.noarch                          3/8 </span><br><span class=\"line\">  Installing : perl-Net-Daemon-0.48-5.el7.noarch                            4/8 </span><br><span class=\"line\">  Installing : perl-PlRPC-0.2020-14.el7.noarch                              5/8 </span><br><span class=\"line\">  Installing : perl-DBI-1.627-4.el7.x86_64                                  6/8 </span><br><span class=\"line\">  Installing : perl-DBD-MySQL-4.023-5.el7.x86_64                            7/8 </span><br><span class=\"line\">  Installing : 1:mariadb-server-5.5.52-1.el7.x86_64                         8/8 </span><br><span class=\"line\">  Verifying  : perl-Net-Daemon-0.48-5.el7.noarch                            1/8 </span><br><span class=\"line\">  Verifying  : 1:mariadb-server-5.5.52-1.el7.x86_64                         2/8 </span><br><span class=\"line\">  Verifying  : perl-IO-Compress-2.061-2.el7.noarch                          3/8 </span><br><span class=\"line\">  Verifying  : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  4/8 </span><br><span class=\"line\">  Verifying  : perl-PlRPC-0.2020-14.el7.noarch                              5/8 </span><br><span class=\"line\">  Verifying  : perl-DBI-1.627-4.el7.x86_64                                  6/8 </span><br><span class=\"line\">  Verifying  : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   7/8 </span><br><span class=\"line\">  Verifying  : perl-DBD-MySQL-4.023-5.el7.x86_64                            8/8 </span><br><span class=\"line\"></span><br><span class=\"line\">Installed:</span><br><span class=\"line\">  mariadb-server.x86_64 1:5.5.52-1.el7                                          </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7                                  </span><br><span class=\"line\">  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7                                   </span><br><span class=\"line\">  perl-DBD-MySQL.x86_64 0:4.023-5.el7                                           </span><br><span class=\"line\">  perl-DBI.x86_64 0:1.627-4.el7                                                 </span><br><span class=\"line\">  perl-IO-Compress.noarch 0:2.061-2.el7                                         </span><br><span class=\"line\">  perl-Net-Daemon.noarch 0:0.48-5.el7                                           </span><br><span class=\"line\">  perl-PlRPC.noarch 0:0.2020-14.el7                                             </span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n\n<p>5.然后我启动服务，尝试启动mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@evilRat_desktop evilrat]# systemctl start mariadb.service</span><br><span class=\"line\">[root@evilRat_desktop evilrat]# systemctl enable mariadb.service</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</span><br><span class=\"line\">[root@evilRat_desktop evilrat]# mysql</span><br><span class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MariaDB connection id is 2</span><br><span class=\"line\">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; show databases</span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| test               |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\" data-title=\"centos7_mysql\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n","site":{"data":{}},"more":"<h2 id=\"cent-os-7安装mysql遇到的问题\"><a href=\"#cent-os-7安装mysql遇到的问题\" class=\"headerlink\" title=\"cent os 7安装mysql遇到的问题\"></a>cent os 7安装mysql遇到的问题</h2><p>1.在centos 7上装mysql，但是运行的话会报错，服务未启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[evilrat@evilRat_desktop ~]$ mysql status</span><br><span class=\"line\">ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/var/lib/mysql/mysql.sock&apos; (2)</span><br></pre></td></tr></table></figure>\n\n<p>2.尝试启动服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[evilrat@evilRat_desktop ~]$ systemctl enable mysql.service</span><br><span class=\"line\">Failed to execute operation: Access denied</span><br></pre></td></tr></table></figure>\n\n<p>这样也不行……</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[evilrat@evilRat_desktop ~]$ service mysql start</span><br><span class=\"line\">Redirecting to /bin/systemctl start  mysql.service</span><br></pre></td></tr></table></figure>\n\n<p>3.通过百度找到这个<br>mariaDB</p>\n<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。<br>MariaDB基于事务的Maria存储引擎，替换了MySQL的MyISAM存储引擎，它使用了Percona的 XtraDB，InnoDB的变体，分支的开发者希望提供访问即将到来的MySQL 5.4 InnoDB性能。这个版本还包括了 PrimeBase XT (PBXT) 和 FederatedX存储引擎。</p>\n<p>4.于是我尝试安装了一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@evilRat_desktop evilrat]# yum install mariadb-server -y</span><br><span class=\"line\">Loaded plugins: fastestmirror, langpacks</span><br><span class=\"line\">Repository epel is listed more than once in the configuration</span><br><span class=\"line\">Repository epel-debuginfo is listed more than once in the configuration</span><br><span class=\"line\">Repository epel-source is listed more than once in the configuration</span><br><span class=\"line\">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class=\"line\">adobe-linux-x86_64                                       |  951 B     00:00     </span><br><span class=\"line\">base                                                     | 3.6 kB     00:00     </span><br><span class=\"line\">epel                                                     | 4.3 kB     00:00     </span><br><span class=\"line\">extras                                                   | 3.4 kB     00:00     </span><br><span class=\"line\">nux-dextop                                               | 2.9 kB     00:00     </span><br><span class=\"line\">updates                                                  | 3.4 kB     00:00     </span><br><span class=\"line\">(1/5): extras/7/x86_64/primary_db                          | 139 kB   00:00     </span><br><span class=\"line\">(2/5): epel/x86_64/updateinfo                              | 765 kB   00:01     </span><br><span class=\"line\">(3/5): epel/x86_64/primary_db                              | 4.6 MB   00:10     </span><br><span class=\"line\">(4/5): updates/7/x86_64/primary_db                         | 3.8 MB   00:11     </span><br><span class=\"line\">(5/5): nux-dextop/x86_64/primary_db                        | 1.7 MB   00:29     </span><br><span class=\"line\">adobe-linux-x86_64/primary                                 | 1.3 kB   00:00     </span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.aliyun.com</span><br><span class=\"line\"> * epel: mirrors.aliyun.com</span><br><span class=\"line\"> * extras: mirrors.aliyun.com</span><br><span class=\"line\"> * nux-dextop: li.nux.ro</span><br><span class=\"line\"> * updates: mirrors.aliyun.com</span><br><span class=\"line\">adobe-linux-x86_64                                                          3/3</span><br><span class=\"line\">Resolving Dependencies</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package mariadb-server.x86_64 1:5.5.52-1.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl-DBI for package: 1:mariadb-server-5.5.52-1.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: perl-DBD-MySQL for package: 1:mariadb-server-5.5.52-1.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: perl(DBI) for package: 1:mariadb-server-5.5.52-1.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-DBD-MySQL.x86_64 0:4.023-5.el7 will be installed</span><br><span class=\"line\">---&gt; Package perl-DBI.x86_64 0:1.627-4.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl(RPC::PlServer) &gt;= 0.2001 for package: perl-DBI-1.627-4.el7.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: perl(RPC::PlClient) &gt;= 0.2000 for package: perl-DBI-1.627-4.el7.x86_64</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-PlRPC.noarch 0:0.2020-14.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Net::Daemon) &gt;= 0.13 for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Net::Daemon::Test) for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Net::Daemon::Log) for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Compress::Zlib) for package: perl-PlRPC-0.2020-14.el7.noarch</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-IO-Compress.noarch 0:2.061-2.el7 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Compress::Raw::Zlib) &gt;= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch</span><br><span class=\"line\">--&gt; Processing Dependency: perl(Compress::Raw::Bzip2) &gt;= 2.061 for package: perl-IO-Compress-2.061-2.el7.noarch</span><br><span class=\"line\">---&gt; Package perl-Net-Daemon.noarch 0:0.48-5.el7 will be installed</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 will be installed</span><br><span class=\"line\">---&gt; Package perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 will be installed</span><br><span class=\"line\">--&gt; Finished Dependency Resolution</span><br><span class=\"line\"></span><br><span class=\"line\">Dependencies Resolved</span><br><span class=\"line\"></span><br><span class=\"line\">================================================================================</span><br><span class=\"line\"> Package                      Arch        Version               Repository</span><br><span class=\"line\">                                                                           Size</span><br><span class=\"line\">================================================================================</span><br><span class=\"line\">Installing:</span><br><span class=\"line\"> mariadb-server               x86_64      1:5.5.52-1.el7        base       11 M</span><br><span class=\"line\">Installing for dependencies:</span><br><span class=\"line\"> perl-Compress-Raw-Bzip2      x86_64      2.061-3.el7           base       32 k</span><br><span class=\"line\"> perl-Compress-Raw-Zlib       x86_64      1:2.061-4.el7         base       57 k</span><br><span class=\"line\"> perl-DBD-MySQL               x86_64      4.023-5.el7           base      140 k</span><br><span class=\"line\"> perl-DBI                     x86_64      1.627-4.el7           base      802 k</span><br><span class=\"line\"> perl-IO-Compress             noarch      2.061-2.el7           base      260 k</span><br><span class=\"line\"> perl-Net-Daemon              noarch      0.48-5.el7            base       51 k</span><br><span class=\"line\"> perl-PlRPC                   noarch      0.2020-14.el7         base       36 k</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">================================================================================</span><br><span class=\"line\">Install  1 Package (+7 Dependent packages)</span><br><span class=\"line\"></span><br><span class=\"line\">Total download size: 12 M</span><br><span class=\"line\">Installed size: 59 M</span><br><span class=\"line\">Downloading packages:</span><br><span class=\"line\">(1/8): perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm      |  32 kB   00:00     </span><br><span class=\"line\">(2/8): perl-Compress-Raw-Zlib-2.061-4.el7.x86_64.rpm       |  57 kB   00:00     </span><br><span class=\"line\">(3/8): perl-DBD-MySQL-4.023-5.el7.x86_64.rpm               | 140 kB   00:00     </span><br><span class=\"line\">(4/8): perl-DBI-1.627-4.el7.x86_64.rpm                     | 802 kB   00:00     </span><br><span class=\"line\">(5/8): perl-IO-Compress-2.061-2.el7.noarch.rpm             | 260 kB   00:00     </span><br><span class=\"line\">(6/8): perl-Net-Daemon-0.48-5.el7.noarch.rpm               |  51 kB   00:00     </span><br><span class=\"line\">(7/8): perl-PlRPC-0.2020-14.el7.noarch.rpm                 |  36 kB   00:00     </span><br><span class=\"line\">(8/8): mariadb-server-5.5.52-1.el7.x86_64.rpm              |  11 MB   00:12     </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">Total                                              1.0 MB/s |  12 MB  00:12     </span><br><span class=\"line\">Running transaction check</span><br><span class=\"line\">Running transaction test</span><br><span class=\"line\">Transaction test succeeded</span><br><span class=\"line\">Running transaction</span><br><span class=\"line\">  Installing : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   1/8 </span><br><span class=\"line\">  Installing : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  2/8 </span><br><span class=\"line\">  Installing : perl-IO-Compress-2.061-2.el7.noarch                          3/8 </span><br><span class=\"line\">  Installing : perl-Net-Daemon-0.48-5.el7.noarch                            4/8 </span><br><span class=\"line\">  Installing : perl-PlRPC-0.2020-14.el7.noarch                              5/8 </span><br><span class=\"line\">  Installing : perl-DBI-1.627-4.el7.x86_64                                  6/8 </span><br><span class=\"line\">  Installing : perl-DBD-MySQL-4.023-5.el7.x86_64                            7/8 </span><br><span class=\"line\">  Installing : 1:mariadb-server-5.5.52-1.el7.x86_64                         8/8 </span><br><span class=\"line\">  Verifying  : perl-Net-Daemon-0.48-5.el7.noarch                            1/8 </span><br><span class=\"line\">  Verifying  : 1:mariadb-server-5.5.52-1.el7.x86_64                         2/8 </span><br><span class=\"line\">  Verifying  : perl-IO-Compress-2.061-2.el7.noarch                          3/8 </span><br><span class=\"line\">  Verifying  : 1:perl-Compress-Raw-Zlib-2.061-4.el7.x86_64                  4/8 </span><br><span class=\"line\">  Verifying  : perl-PlRPC-0.2020-14.el7.noarch                              5/8 </span><br><span class=\"line\">  Verifying  : perl-DBI-1.627-4.el7.x86_64                                  6/8 </span><br><span class=\"line\">  Verifying  : perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64                   7/8 </span><br><span class=\"line\">  Verifying  : perl-DBD-MySQL-4.023-5.el7.x86_64                            8/8 </span><br><span class=\"line\"></span><br><span class=\"line\">Installed:</span><br><span class=\"line\">  mariadb-server.x86_64 1:5.5.52-1.el7                                          </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7                                  </span><br><span class=\"line\">  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7                                   </span><br><span class=\"line\">  perl-DBD-MySQL.x86_64 0:4.023-5.el7                                           </span><br><span class=\"line\">  perl-DBI.x86_64 0:1.627-4.el7                                                 </span><br><span class=\"line\">  perl-IO-Compress.noarch 0:2.061-2.el7                                         </span><br><span class=\"line\">  perl-Net-Daemon.noarch 0:0.48-5.el7                                           </span><br><span class=\"line\">  perl-PlRPC.noarch 0:0.2020-14.el7                                             </span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n\n<p>5.然后我启动服务，尝试启动mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@evilRat_desktop evilrat]# systemctl start mariadb.service</span><br><span class=\"line\">[root@evilRat_desktop evilrat]# systemctl enable mariadb.service</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</span><br><span class=\"line\">[root@evilRat_desktop evilrat]# mysql</span><br><span class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MariaDB connection id is 2</span><br><span class=\"line\">Server version: 5.5.52-MariaDB MariaDB Server</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; show databases</span><br><span class=\"line\">    -&gt; ;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| test               |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n\n<html>\n<div class=\"ds-thread\" data-thread-key=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\" data-title=\"centos7_mysql\" data-url=\"http://kongzheng1993.github.io/kongzheng1993-centos7_mysql/\"></div>\n<!-- 多说评论框 end -->\n<!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"kongzheng1993\"};\n    (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0] \n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n</script>\n</html>\n\n"},{"layout":"post","title":"***.java:[1,1] illegal character","date":"2019-05-29T16:00:00.000Z","excerpt":"","comments":1,"_content":"\n## 千万不要用记事本写代码改代码……\n\n刚接到今晚发布留守同事等电话：“你的代码报错了，给你发截图了，qq！！！”。我心里一惊，mmp，不可能吧。。。\n赶紧登陆qq，看了一下他发来等截图\n![编译报错](2019-05-31-kongzheng1993-生产部署illegal-character/WechatIMG1.jpg)\nmmp? 第一行，第一个字符就报错？\n定睛一看，是非法字符。\n仔细回想……\n今天我提代码的时候在生产库用记事本改代码了……\n“大哥，帮我把这个文件重新提一下，多谢多谢🙏”\n重提这个文件，打包，发布，编译成功，总算松了口气。\n\n之前就记得windows记事本会文本文件编码做修改，静下来后百度下：\n```\n某些编辑器会往utf8文件中添加utf8标记（editplus称其为签名），它会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM），它的表示的是 Unicode 标记（BOM）。 因此要解决这个问题的关键就是把这个标记选项去掉，可按如下方法操作。 \n首先用editplus打开这个文件，从Doucument菜单中选择Permanet Settings,有三个分类，分别是General,File, Tools.点击File,右边会有一项是 UTF-8 signature: 选择 always remove signature. 点击OK 。中文版本的 Editplus 下操作的菜单结构如下: 文档->参数设置->文件->UTF-8签名->总是移除签名->确定 ，这样就设置了UTF-8格式不需要在文件前面加标记，最后把文件另存为utf-8格式就好了.\n```\n\n\n","source":"_posts/2019-05-30-kongzheng1993-生产部署illegal-character.md","raw":"---\nlayout: post\ntitle: \"***.java:[1,1] illegal character\"\ndate: 2019-05-30\nexcerpt: \"mysql 导库\"\ntags: [mysql,备份]\ncategories: [mysql]\ncomments: true\n---\n\n## 千万不要用记事本写代码改代码……\n\n刚接到今晚发布留守同事等电话：“你的代码报错了，给你发截图了，qq！！！”。我心里一惊，mmp，不可能吧。。。\n赶紧登陆qq，看了一下他发来等截图\n![编译报错](2019-05-31-kongzheng1993-生产部署illegal-character/WechatIMG1.jpg)\nmmp? 第一行，第一个字符就报错？\n定睛一看，是非法字符。\n仔细回想……\n今天我提代码的时候在生产库用记事本改代码了……\n“大哥，帮我把这个文件重新提一下，多谢多谢🙏”\n重提这个文件，打包，发布，编译成功，总算松了口气。\n\n之前就记得windows记事本会文本文件编码做修改，静下来后百度下：\n```\n某些编辑器会往utf8文件中添加utf8标记（editplus称其为签名），它会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM），它的表示的是 Unicode 标记（BOM）。 因此要解决这个问题的关键就是把这个标记选项去掉，可按如下方法操作。 \n首先用editplus打开这个文件，从Doucument菜单中选择Permanet Settings,有三个分类，分别是General,File, Tools.点击File,右边会有一项是 UTF-8 signature: 选择 always remove signature. 点击OK 。中文版本的 Editplus 下操作的菜单结构如下: 文档->参数设置->文件->UTF-8签名->总是移除签名->确定 ，这样就设置了UTF-8格式不需要在文件前面加标记，最后把文件另存为utf-8格式就好了.\n```\n\n\n","slug":"kongzheng1993-生产部署illegal-character","published":1,"updated":"2019-05-30T16:34:21.016Z","photos":[],"link":"","_id":"cjwavpdr500006kxnsgm737a8","content":"<h2 id=\"千万不要用记事本写代码改代码……\"><a href=\"#千万不要用记事本写代码改代码……\" class=\"headerlink\" title=\"千万不要用记事本写代码改代码……\"></a>千万不要用记事本写代码改代码……</h2><p>刚接到今晚发布留守同事等电话：“你的代码报错了，给你发截图了，qq！！！”。我心里一惊，mmp，不可能吧。。。<br>赶紧登陆qq，看了一下他发来等截图<br><img src=\"/2019/05/30/kongzheng1993-生产部署illegal-character/2019-05-31-kongzheng1993-%E7%94%9F%E4%BA%A7%E9%83%A8%E7%BD%B2illegal-character/WechatIMG1.jpg\" alt=\"编译报错\"><br>mmp? 第一行，第一个字符就报错？<br>定睛一看，是非法字符。<br>仔细回想……<br>今天我提代码的时候在生产库用记事本改代码了……<br>“大哥，帮我把这个文件重新提一下，多谢多谢🙏”<br>重提这个文件，打包，发布，编译成功，总算松了口气。</p>\n<p>之前就记得windows记事本会文本文件编码做修改，静下来后百度下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些编辑器会往utf8文件中添加utf8标记（editplus称其为签名），它会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM），它的表示的是 Unicode 标记（BOM）。 因此要解决这个问题的关键就是把这个标记选项去掉，可按如下方法操作。 </span><br><span class=\"line\">首先用editplus打开这个文件，从Doucument菜单中选择Permanet Settings,有三个分类，分别是General,File, Tools.点击File,右边会有一项是 UTF-8 signature: 选择 always remove signature. 点击OK 。中文版本的 Editplus 下操作的菜单结构如下: 文档-&gt;参数设置-&gt;文件-&gt;UTF-8签名-&gt;总是移除签名-&gt;确定 ，这样就设置了UTF-8格式不需要在文件前面加标记，最后把文件另存为utf-8格式就好了.</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h2 id=\"千万不要用记事本写代码改代码……\"><a href=\"#千万不要用记事本写代码改代码……\" class=\"headerlink\" title=\"千万不要用记事本写代码改代码……\"></a>千万不要用记事本写代码改代码……</h2><p>刚接到今晚发布留守同事等电话：“你的代码报错了，给你发截图了，qq！！！”。我心里一惊，mmp，不可能吧。。。<br>赶紧登陆qq，看了一下他发来等截图<br><img src=\"/2019/05/30/kongzheng1993-生产部署illegal-character/2019-05-31-kongzheng1993-%E7%94%9F%E4%BA%A7%E9%83%A8%E7%BD%B2illegal-character/WechatIMG1.jpg\" alt=\"编译报错\"><br>mmp? 第一行，第一个字符就报错？<br>定睛一看，是非法字符。<br>仔细回想……<br>今天我提代码的时候在生产库用记事本改代码了……<br>“大哥，帮我把这个文件重新提一下，多谢多谢🙏”<br>重提这个文件，打包，发布，编译成功，总算松了口气。</p>\n<p>之前就记得windows记事本会文本文件编码做修改，静下来后百度下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些编辑器会往utf8文件中添加utf8标记（editplus称其为签名），它会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM），它的表示的是 Unicode 标记（BOM）。 因此要解决这个问题的关键就是把这个标记选项去掉，可按如下方法操作。 </span><br><span class=\"line\">首先用editplus打开这个文件，从Doucument菜单中选择Permanet Settings,有三个分类，分别是General,File, Tools.点击File,右边会有一项是 UTF-8 signature: 选择 always remove signature. 点击OK 。中文版本的 Editplus 下操作的菜单结构如下: 文档-&gt;参数设置-&gt;文件-&gt;UTF-8签名-&gt;总是移除签名-&gt;确定 ，这样就设置了UTF-8格式不需要在文件前面加标记，最后把文件另存为utf-8格式就好了.</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/2018-06-08-kongzheng1993-java多线程总结/20150309140927553.jpeg","slug":"20150309140927553.jpeg","post":"cjwaviv7h001a41xn8dz2vo6t","modified":0,"renderable":0},{"_id":"source/_posts/2019-05-30-kongzheng1993-生产部署illegal-character/WechatIMG1.jpeg","slug":"WechatIMG1.jpeg","post":"cjwavpdr500006kxnsgm737a8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjwaviv7e001741xn4ndl2z03","category_id":"cjwaviv7r001h41xn4oabnk78","_id":"cjwaviv7w001p41xnert9hfoe"},{"post_id":"cjwaviv7h001a41xn8dz2vo6t","category_id":"cjwaviv7u001l41xnaj4bf3uv","_id":"cjwaviv7y001u41xne7aizmf8"},{"post_id":"cjwaviv78001141xn57dqqhe0","category_id":"cjwaviv7d001541xnb7lhk7go","_id":"cjwaviv84002741xnaxqsp3o1"},{"post_id":"cjwaviv78001141xn57dqqhe0","category_id":"cjwaviv7w001q41xnc9sb0pur","_id":"cjwaviv85002a41xnzncwa64d"},{"post_id":"cjwaviv78001141xn57dqqhe0","category_id":"cjwaviv83002341xniolqmfk3","_id":"cjwaviv86002c41xn6zhxpdya"},{"post_id":"cjwaviv7j001c41xnvmc1hebc","category_id":"cjwaviv7y001v41xnaovxeb9f","_id":"cjwaviv86002f41xni5sqpd5x"},{"post_id":"cjwaviv7j001c41xnvmc1hebc","category_id":"cjwaviv84002541xnd5exieyt","_id":"cjwaviv87002h41xngxw6hmny"},{"post_id":"cjwaviv7b001441xnsjcr3uz2","category_id":"cjwaviv7k001d41xn4o162co8","_id":"cjwaviv87002j41xnx4a8cil2"},{"post_id":"cjwaviv7b001441xnsjcr3uz2","category_id":"cjwaviv81002041xn57lq40b6","_id":"cjwaviv88002m41xnp1qkmw1b"},{"post_id":"cjwaviv7b001441xnsjcr3uz2","category_id":"cjwaviv85002841xnb0gk6x68","_id":"cjwaviv88002o41xnwalg2vp7"},{"post_id":"cjwaviv8x003x41xnz502h2ij","category_id":"cjwaviv93003z41xns0m4qyqu","_id":"cjwaviv97004641xnmue5nehn"},{"post_id":"cjwavpdr500006kxnsgm737a8","category_id":"cjwaviv7r001h41xn4oabnk78","_id":"cjwavpdsl00036kxnbujueaqy"}],"PostTag":[{"post_id":"cjwaviv56000041xnpfwmqcxu","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv62000741xnqg9js8k3"},{"post_id":"cjwaviv5x000541xnhxj5bw76","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv64000941xnq16t1r1m"},{"post_id":"cjwaviv62000841xnnjo3b2u5","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv6c000c41xnliohmsq6"},{"post_id":"cjwaviv5i000141xnt0zuo2c3","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv6j000e41xn4gvizlr2"},{"post_id":"cjwaviv5q000341xny4ki07as","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv6n000h41xn59b47btc"},{"post_id":"cjwaviv5v000441xnh78pypyr","tag_id":"cjwaviv6l000g41xnxyvb58l6","_id":"cjwaviv6t000m41xn93gj0sof"},{"post_id":"cjwaviv6q000j41xn0grrplii","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv6v000o41xny1drc3ph"},{"post_id":"cjwaviv6s000l41xnmfsornnz","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv6x000r41xnzptj7a8r"},{"post_id":"cjwaviv64000a41xnzgi01kut","tag_id":"cjwaviv6s000k41xnt8ov3y53","_id":"cjwaviv6y000t41xndrzgy6r4"},{"post_id":"cjwaviv6x000s41xn24fesoi5","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv71000w41xnguv6nr6t"},{"post_id":"cjwaviv76001041xn4pu52hw8","tag_id":"cjwaviv6s000k41xnt8ov3y53","_id":"cjwaviv7a001341xniu1zct51"},{"post_id":"cjwaviv6d000d41xnai3j0l87","tag_id":"cjwaviv6v000p41xnlyhuhccr","_id":"cjwaviv7e001641xn30kqfad9"},{"post_id":"cjwaviv6d000d41xnai3j0l87","tag_id":"cjwaviv6z000u41xninjhzjz8","_id":"cjwaviv7h001941xnahgb5lk5"},{"post_id":"cjwaviv6d000d41xnai3j0l87","tag_id":"cjwaviv75000z41xnz8jw1ikc","_id":"cjwaviv7j001b41xna4966u0m"},{"post_id":"cjwaviv6j000f41xnoorl4146","tag_id":"cjwaviv6v000p41xnlyhuhccr","_id":"cjwaviv7t001j41xnyjn7kwy3"},{"post_id":"cjwaviv6j000f41xnoorl4146","tag_id":"cjwaviv6z000u41xninjhzjz8","_id":"cjwaviv7u001k41xna9h0b7r6"},{"post_id":"cjwaviv6j000f41xnoorl4146","tag_id":"cjwaviv75000z41xnz8jw1ikc","_id":"cjwaviv7v001n41xn7tz28ju0"},{"post_id":"cjwaviv7p001g41xnfbd2w6p9","tag_id":"cjwaviv5m000241xn43ezhrgg","_id":"cjwaviv7w001o41xn5d1t8c3j"},{"post_id":"cjwaviv6o000i41xnniselbpn","tag_id":"cjwaviv7s001i41xnoeo1vr87","_id":"cjwaviv7y001s41xnw6xvlnrh"},{"post_id":"cjwaviv6o000i41xnniselbpn","tag_id":"cjwaviv7u001m41xnjnt7zgd6","_id":"cjwaviv7y001t41xnipbj4ijf"},{"post_id":"cjwaviv6u000n41xn3dbrs6hd","tag_id":"cjwaviv7x001r41xnn0r6k9wf","_id":"cjwaviv7z001x41xnrw6qs8sb"},{"post_id":"cjwaviv6w000q41xnoez29ldl","tag_id":"cjwaviv7z001w41xntt3mwd1i","_id":"cjwaviv86002b41xndaq2ax95"},{"post_id":"cjwaviv6w000q41xnoez29ldl","tag_id":"cjwaviv80001z41xnn2b4szp2","_id":"cjwaviv86002d41xnqrqc24h3"},{"post_id":"cjwaviv6w000q41xnoez29ldl","tag_id":"cjwaviv82002141xnstu6dxe5","_id":"cjwaviv87002g41xn95lv40pk"},{"post_id":"cjwaviv6w000q41xnoez29ldl","tag_id":"cjwaviv83002441xnx2z3fc3e","_id":"cjwaviv87002i41xnvl0ppcd3"},{"post_id":"cjwaviv6w000q41xnoez29ldl","tag_id":"cjwaviv84002641xn6arx31r6","_id":"cjwaviv88002l41xnk8jwp0mr"},{"post_id":"cjwaviv6z000v41xnocb1qy4a","tag_id":"cjwaviv85002941xnuka9002j","_id":"cjwaviv88002n41xn09m4fdis"},{"post_id":"cjwaviv71000x41xnaky4ec8t","tag_id":"cjwaviv86002e41xnxs6puwto","_id":"cjwaviv89002r41xnv7lmbupp"},{"post_id":"cjwaviv71000x41xnaky4ec8t","tag_id":"cjwaviv87002k41xn7eape8tx","_id":"cjwaviv8a002s41xnnwmjn2hd"},{"post_id":"cjwaviv71000x41xnaky4ec8t","tag_id":"cjwaviv7z001w41xntt3mwd1i","_id":"cjwaviv8a002u41xnimbq6op2"},{"post_id":"cjwaviv74000y41xnvapxeat7","tag_id":"cjwaviv89002q41xnwbrxkxar","_id":"cjwaviv8c002y41xn4sw6tlw5"},{"post_id":"cjwaviv74000y41xnvapxeat7","tag_id":"cjwaviv8a002t41xnn6x8kcvw","_id":"cjwaviv8d002z41xn1azph3rz"},{"post_id":"cjwaviv74000y41xnvapxeat7","tag_id":"cjwaviv8b002v41xnfdx0nm9w","_id":"cjwaviv8d003141xn7141i6w7"},{"post_id":"cjwaviv74000y41xnvapxeat7","tag_id":"cjwaviv8b002w41xnzf35c5uk","_id":"cjwaviv8d003241xn9699vf97"},{"post_id":"cjwaviv78001141xn57dqqhe0","tag_id":"cjwaviv8c002x41xncf1f87hv","_id":"cjwaviv8f003541xn509mxf2a"},{"post_id":"cjwaviv78001141xn57dqqhe0","tag_id":"cjwaviv8d003041xnbt7zpjvh","_id":"cjwaviv8f003641xnoztvqd2d"},{"post_id":"cjwaviv78001141xn57dqqhe0","tag_id":"cjwaviv8e003341xnpqg3257m","_id":"cjwaviv8f003841xn7xls8ck9"},{"post_id":"cjwaviv7b001441xnsjcr3uz2","tag_id":"cjwaviv8e003441xntz21yfxr","_id":"cjwaviv8i003b41xnok1amcmz"},{"post_id":"cjwaviv7b001441xnsjcr3uz2","tag_id":"cjwaviv8f003741xnd7k3fv6q","_id":"cjwaviv8i003c41xn58pnvn0x"},{"post_id":"cjwaviv7b001441xnsjcr3uz2","tag_id":"cjwaviv8f003941xnsuxvfvxp","_id":"cjwaviv8j003e41xnxnzmc4pb"},{"post_id":"cjwaviv7e001741xn4ndl2z03","tag_id":"cjwaviv8g003a41xnedlmcfm7","_id":"cjwaviv8k003g41xnprxxybvc"},{"post_id":"cjwaviv7e001741xn4ndl2z03","tag_id":"cjwaviv8i003d41xn79evpd47","_id":"cjwaviv8k003h41xnhud8ivd6"},{"post_id":"cjwaviv7h001a41xn8dz2vo6t","tag_id":"cjwaviv89002q41xnwbrxkxar","_id":"cjwaviv8m003l41xnu934jblr"},{"post_id":"cjwaviv7h001a41xn8dz2vo6t","tag_id":"cjwaviv8k003i41xnv9bzpz52","_id":"cjwaviv8m003m41xnicnk6zlv"},{"post_id":"cjwaviv7h001a41xn8dz2vo6t","tag_id":"cjwaviv8k003j41xn0g68wsqr","_id":"cjwaviv8n003o41xn9a7ndn1c"},{"post_id":"cjwaviv7j001c41xnvmc1hebc","tag_id":"cjwaviv8l003k41xnutfs30iy","_id":"cjwaviv8p003r41xnarbvw2lo"},{"post_id":"cjwaviv7j001c41xnvmc1hebc","tag_id":"cjwaviv8m003n41xnch4g9vss","_id":"cjwaviv8p003s41xnx9gszaxl"},{"post_id":"cjwaviv7j001c41xnvmc1hebc","tag_id":"cjwaviv8n003p41xnud9tvvda","_id":"cjwaviv8q003u41xnlrxjglg0"},{"post_id":"cjwaviv91003y41xnk9cive79","tag_id":"cjwaviv6v000p41xnlyhuhccr","_id":"cjwaviv95004241xnneapt2er"},{"post_id":"cjwaviv91003y41xnk9cive79","tag_id":"cjwaviv6z000u41xninjhzjz8","_id":"cjwaviv96004341xnh7zrvaku"},{"post_id":"cjwaviv91003y41xnk9cive79","tag_id":"cjwaviv75000z41xnz8jw1ikc","_id":"cjwaviv97004441xncq0zzo06"},{"post_id":"cjwaviv93004141xn4c3gvsas","tag_id":"cjwaviv6s000k41xnt8ov3y53","_id":"cjwaviv97004541xngsrav3ot"},{"post_id":"cjwaviv8x003x41xnz502h2ij","tag_id":"cjwaviv93004041xnj3nqrqim","_id":"cjwaviv97004741xn04iba44f"},{"post_id":"cjwavpdr500006kxnsgm737a8","tag_id":"cjwaviv8g003a41xnedlmcfm7","_id":"cjwavpdrs00016kxnwvoozgpv"},{"post_id":"cjwavpdr500006kxnsgm737a8","tag_id":"cjwaviv8i003d41xn79evpd47","_id":"cjwavpdsk00026kxnhb63boim"}],"Tag":[{"name":"oop","_id":"cjwaviv5m000241xn43ezhrgg"},{"name":"float","_id":"cjwaviv6l000g41xnxyvb58l6"},{"name":"re","_id":"cjwaviv6s000k41xnt8ov3y53"},{"name":"sample post","_id":"cjwaviv6v000p41xnlyhuhccr"},{"name":"images","_id":"cjwaviv6z000u41xninjhzjz8"},{"name":"test","_id":"cjwaviv75000z41xnz8jw1ikc"},{"name":"String","_id":"cjwaviv7s001i41xnoeo1vr87"},{"name":"new","_id":"cjwaviv7u001m41xnjnt7zgd6"},{"name":"catch，try","_id":"cjwaviv7x001r41xnn0r6k9wf"},{"name":"sql","_id":"cjwaviv7z001w41xntt3mwd1i"},{"name":"select","_id":"cjwaviv80001z41xnn2b4szp2"},{"name":"distinct","_id":"cjwaviv82002141xnstu6dxe5"},{"name":"group by","_id":"cjwaviv83002441xnx2z3fc3e"},{"name":"order by","_id":"cjwaviv84002641xn6arx31r6"},{"name":"oracle","_id":"cjwaviv85002941xnuka9002j"},{"name":"sys","_id":"cjwaviv86002e41xnxs6puwto"},{"name":"sqlplus","_id":"cjwaviv87002k41xn7eape8tx"},{"name":"java","_id":"cjwaviv89002q41xnwbrxkxar"},{"name":"reflect","_id":"cjwaviv8a002t41xnn6x8kcvw"},{"name":"Class","_id":"cjwaviv8b002v41xnfdx0nm9w"},{"name":"对象，Class对象","_id":"cjwaviv8b002w41xnzf35c5uk"},{"name":"github","_id":"cjwaviv8c002x41xncf1f87hv"},{"name":"hexo","_id":"cjwaviv8d003041xnbt7zpjvh"},{"name":"git","_id":"cjwaviv8e003341xnpqg3257m"},{"name":"suse","_id":"cjwaviv8e003441xntz21yfxr"},{"name":"server","_id":"cjwaviv8f003741xnd7k3fv6q"},{"name":"FTP","_id":"cjwaviv8f003941xnsuxvfvxp"},{"name":"mysql","_id":"cjwaviv8g003a41xnedlmcfm7"},{"name":"备份","_id":"cjwaviv8i003d41xn79evpd47"},{"name":"多线程","_id":"cjwaviv8k003i41xnv9bzpz52"},{"name":"安全","_id":"cjwaviv8k003j41xn0g68wsqr"},{"name":"linux","_id":"cjwaviv8l003k41xnutfs30iy"},{"name":"ss","_id":"cjwaviv8m003n41xnch4g9vss"},{"name":"console","_id":"cjwaviv8n003p41xnud9tvvda"},{"name":"resume，简历","_id":"cjwaviv93004041xnj3nqrqim"}]}}